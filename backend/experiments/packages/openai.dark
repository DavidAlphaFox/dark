module OpenAI

// syntax to reference another package
// (later, we could alias here, say `import TempFileStorage as Storage`)
import TempFileStorage

// TODO: the consuming package will have to host the mp3s on a handler somewhere, based on file name

type WhisperApiRequest =
  { version: string
    input: WhisperInput }

and WhisperInput =
  // see https://replicate.com/openai/whisper/api for additional fields available
  { /// Public URL where replicate can access the mp3 file
    audio: string

    /// Either `large` or `large-v2`
    model: string }

type WhisperApiResponse =
  { id: String

    segments: any // TODO: figure out what this is - it's not documented
    srt_file: String
    txt_file: String
    transcription: String

    detected_language: String
    translation: String }






/// Uploads an audio file to the host, and returns the result
let callWhisper (urlBase: String -> String) (audio: Bytes): string =
  let replicateApiToken = Environment.getValue "REPLICATE_API_TOKEN"

  // store audio in a file
  let filePath = TempFileStorage.uploadFile audio

  // TODO: somehow tell consumers that they'll need to expose an endpoint calling
  // TempFileStorage.getFileContents as mp3 for the external API to access

  // call the endpoint

  // delete audio from file
  let requestBody =
    { version = "e39e354773466b955265e969568deb7da217804d8e771ea8c9cd0cef6591f8bc"
      input = { audio = urlBase filePath; model = "large" } }
    |> Json.serialize<WhisperApiRequest>
    |> Result.map String.toBytes
    |> Result.withDefault Bytes.empty // TODO: improve error-handling

  let apiResponse =
    HttpClient.request
      "post"
      "https://api.replicate.com/v1/predictions"
      [
        ('content-type', 'application/json')
        ('authorization', 'Token ' ++ replicateApiToken)
      ]
      requestBody

  match apiResponse with
  | Ok response ->
    let parsedResponse = response.body |> String.fromBytes |> Json.parse<WhisperApiResponse>

    match parsedResponse with
    | Ok parsed -> parsed.id
    | Error err -> err

  | Error err -> err


{
  "completed_at": null,
  "created_at": "2023-03-08T17:54:26.385912Z",
  "error": null,
  "id": "j6t4en2gxjbnvnmxim7ylcyihu",
  "input": {"audio": "..."},
  "logs": null,
  "metrics": {},
  "output": null,
  "started_at": null,
  "status": "starting",
  "version": "e39e354773466b955265e969568deb7da217804d8e771ea8c9cd0cef6591f8bc"
}
