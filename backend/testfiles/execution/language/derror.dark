module Error =
  Builtin.List.map_v0 [ 1; 2; 3; 4; 5 ] (fun x y -> x) = Test.derrorMessage
    "Expected 2 arguments, got 1"

  PACKAGE.Darklang.Stdlib.Option.map2_v0
    (PACKAGE.Darklang.Stdlib.Option.Option.Some 10)
    "not an option"
    (fun (a, b) -> "1") = (Test.derrorMessage
    "PACKAGE.Darklang.Stdlib.Builtin.Option.map2's 2nd argument (`option2`) should be a PACKAGE.Darklang.Stdlib.Option.Option<'b>. However, a String (\"not an op...) was passed instead.

Expected: (option2: PACKAGE.Darklang.Stdlib.Option.Option<'b>)
Actual: a String: \"not an option\"")


// Check we get previous errors before later ones
(Builtin.List.map_v0 [ 1; 2; 3; 4; 5 ] (fun x -> Test.runtimeError "X"))
|> Builtin.List.fakeFunction = Test.derrorMessage "X"



module ErrorPropagation =
  type EPRec = { i: Int; m: Int; j: Int; n: Int }

  PACKAGE.Darklang.Stdlib.List.head (Test.runtimeError "test") = Test.derrorMessage
    "test"

  (if Test.runtimeError "test" then 5 else 6) = Test.derrorMessage "test"

  (PACKAGE.Darklang.Stdlib.List.head (Test.runtimeError "test")).field = Test.derrorMessage
    "test"

  [ 5; 6; PACKAGE.Darklang.Stdlib.List.head (Test.runtimeError "test") ] = Test.derrorMessage
    "test"

  [ 5; 6; Test.runtimeError "test" ] = Test.derrorMessage "test"

  EPRec
    { i = Test.runtimeError "1"
      m = 5
      j = PACKAGE.Darklang.Stdlib.List.head (Test.runtimeError "2")
      n = 6 } = Test.derrorMessage "1"

  5 |> (+) (Test.runtimeError "test") |> (+) 3564 = Test.derrorMessage "test"
  5 |> (+) (Test.runtimeError "test") = Test.derrorMessage "test"
  ("test" |> Test.runtimeError) = Test.derrorMessage "test"

  PACKAGE.Darklang.Stdlib.Option.Option.Some(Test.runtimeError "test") = Test.derrorMessage
    "test"

  PACKAGE.Darklang.Stdlib.Result.Result.Error(Test.runtimeError "test") = Test.derrorMessage
    "test"

  PACKAGE.Darklang.Stdlib.Result.Result.Ok(Test.runtimeError "test") = Test.derrorMessage
    "test"


  // pipe into error
  ("test" |> Test.runtimeError |> (++) "3") = Test.derrorMessage "test"