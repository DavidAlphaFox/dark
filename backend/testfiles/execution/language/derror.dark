module Error =
  List.map_v0 [ 1; 2; 3; 4; 5 ] (fun x y -> x) = Test.runtimeError
    "Expected 2 arguments, got 1"

  Option.map2_v0
    (PACKAGE.Darklang.Stdlib.Option.Option.Some 10)
    "not an option"
    (fun (a, b) -> "1") = Test.derror (
    PACKAGE.Darklang.LanguageTools.RuntimeErrors.Error.TypeCheckerError(
      PACKAGE
        .Darklang
        .LanguageTools
        .RuntimeErrors
        .TypeChecker
        .Error
        .ValueNotExpectedType(
          PACKAGE.Darklang.LanguageTools.RuntimeTypes.Dval.DString("not an option"),
          PACKAGE.Darklang.LanguageTools.RuntimeTypes.TypeReference.TCustomType(
            PACKAGE.Darklang.Stdlib.Result.Result.Ok(
              PACKAGE.Darklang.LanguageTools.RuntimeTypes.FQName.FQName.Package(
                PACKAGE.Darklang.LanguageTools.RuntimeTypes.FQName.Package
                  { modules = [ "Stdlib"; "Option" ]
                    name =
                      PACKAGE
                        .Darklang
                        .LanguageTools
                        .RuntimeTypes
                        .TypeName
                        .Name
                        .TypeName("Option")
                    owner = "Darklang"
                    version = 0 }
              )
            ),
            [ PACKAGE.Darklang.LanguageTools.RuntimeTypes.TypeReference.TVariable(
                "b"
              ) ]
          ),
          PACKAGE
            .Darklang
            .LanguageTools
            .RuntimeErrors
            .TypeChecker
            .Context
            .FunctionCallParameter(
              PACKAGE.Darklang.LanguageTools.RuntimeTypes.FQName.FQName.BuiltIn(
                PACKAGE.Darklang.LanguageTools.RuntimeTypes.FQName.BuiltIn
                  { modules = [ "Option" ]
                    name =
                      PACKAGE.Darklang.LanguageTools.RuntimeTypes.FnName.Name.FnName(
                        "map2"
                      )
                    version = 0 }
              ),
              PACKAGE.Darklang.LanguageTools.RuntimeTypes.Param
                { name = "option2"
                  typ =
                    PACKAGE
                      .Darklang
                      .LanguageTools
                      .RuntimeTypes
                      .TypeReference
                      .TCustomType(
                        PACKAGE.Darklang.Stdlib.Result.Result.Ok(
                          PACKAGE
                            .Darklang
                            .LanguageTools
                            .RuntimeTypes
                            .FQName
                            .T
                            .Package(
                              PACKAGE.Darklang.LanguageTools.RuntimeTypes.FQName.Package
                                { modules = [ "Stdlib"; "Option" ]
                                  name =
                                    PACKAGE
                                      .Darklang
                                      .LanguageTools
                                      .RuntimeTypes
                                      .TypeName
                                      .Name
                                      .TypeName("Option")
                                  owner = "Darklang"
                                  version = 0 }
                            )
                        ),
                        [ PACKAGE
                            .Darklang
                            .LanguageTools
                            .RuntimeTypes
                            .TypeReference
                            .TVariable("b") ]
                      ) },
              1,
              PACKAGE.Darklang.Stdlib.Option.Option.None
            )
        )
    )
  )



  // Check we get previous errors before later ones
  (List.map_v0 [ 1; 2; 3; 4; 5 ] (fun x -> Test.runtimeError "X"))
  |> List.fakeFunction = Test.runtimeError "X"



module ErrorPropagation =
  type EPRec = { i: Int; m: Int; j: Int; n: Int }

  PACKAGE.Darklang.Stdlib.List.head (Test.runtimeError "test") = Test.runtimeError
    "test"

  (if Test.runtimeError "test" then 5 else 6) = Test.runtimeError "test"

  (PACKAGE.Darklang.Stdlib.List.head (Test.runtimeError "test")).field = Test.runtimeError
    "test"

  [ 5; 6; PACKAGE.Darklang.Stdlib.List.head (Test.runtimeError "test") ] = Test.runtimeError
    "test"

  [ 5; 6; Test.runtimeError "test" ] = Test.runtimeError "test"

  EPRec
    { i = Test.runtimeError "1"
      m = 5
      j = PACKAGE.Darklang.Stdlib.List.head (Test.runtimeError "2")
      n = 6 } = Test.runtimeError "1"

  5 |> (+) (Test.runtimeError "test") |> (+) 3564 = Test.runtimeError "test"
  5 |> (+) (Test.runtimeError "test") = Test.runtimeError "test"
  ("test" |> Test.runtimeError) = Test.runtimeError "test"

  PACKAGE.Darklang.Stdlib.Option.Option.Some(Test.runtimeError "test") = Test.runtimeError
    "test"

  PACKAGE.Darklang.Stdlib.Result.Result.Error(Test.runtimeError "test") = Test.runtimeError
    "test"

  PACKAGE.Darklang.Stdlib.Result.Result.Ok(Test.runtimeError "test") = Test.runtimeError
    "test"


  // pipe into error
  ("test" |> Test.runtimeError |> (++) "3") = Test.runtimeError "test"