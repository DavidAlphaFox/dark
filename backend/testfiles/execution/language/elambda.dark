PACKAGE.Darklang.Stdlib.List.push_v0 [] (fun x -> -4.611686018e+18) = [ (fun x ->
                                                                          -4.611686018e+18) ]

// Test that empty parameters are removed
(let y = (fun x ___ -> x + 1) in PACKAGE.Darklang.Stdlib.List.map_v0 [ 1; 2; 3; 4 ] y) = [ 2
                                                                                           3
                                                                                           4
                                                                                           5 ]

(let y = (fun x -> x + 1) in PACKAGE.Darklang.Stdlib.List.map_v0 [ 1; 2; 3; 4 ] y) = [ 2
                                                                                       3
                                                                                       4
                                                                                       5 ]

(let y = (fun msg -> Builtin.Test.runtimeError msg) in
 PACKAGE.Darklang.Stdlib.List.map_v0 [ "1"; "2"; "3"; "4" ] y) = Builtin.Test.derrorMessage
  "4"

(let y = (fun msg -> Builtin.Test.runtimeError msg) in
 PACKAGE.Darklang.Stdlib.List.map_v0 [] y) = []
// (let y = (fun a b -> a + b) in y 2 3) = 5 // TODO: allow
(let y = (fun a b -> a * b) in
 PACKAGE.Darklang.Stdlib.List.fold_v0 [ 1; 2; 3; 4 ] 1 y) = 24

(PACKAGE.Darklang.Stdlib.List.fold_v0 [ 4 ] 1 (Builtin.Test.runtimeError "test")) = Builtin.Test.derrorMessage
  "test"

(let x = 5 in
 let y = (fun c -> x + c) in
 let x = 6 in
 [ 1; 2; 3; 4 ] |> PACKAGE.Darklang.Stdlib.List.map_v0 y) = [ 6; 7; 8; 9 ]

(Builtin.String.join_v0
  (PACKAGE.Darklang.Stdlib.List.map_v0
    (Builtin.String.toList "some string")
    (fun var ->
      Builtin.String.toUppercase (PACKAGE.Darklang.Stdlib.String.fromChar var)))
  "") = "SOME STRING"

(let y = (fun c -> if c > 2 then Builtin.Test.runtimeError "err" else 18)
 [ 1; 2; 3; 4 ] |> PACKAGE.Darklang.Stdlib.List.map_v0 y) = Builtin.Test.derrorMessage
  "err"

(let y = (fun c -> if c > 2 then Builtin.Test.runtimeError "err" else 18)
 [ 1; 2 ] |> PACKAGE.Darklang.Stdlib.List.map_v0 y) = [ 18; 18 ]

(let t = true in PACKAGE.Darklang.Stdlib.List.all [ 1; 2 ] (fun _ -> t)) = true
(let f = false in PACKAGE.Darklang.Stdlib.List.all [ 1; 2 ] (fun _ -> f)) = false

(let x = 1
 let f = fun _ -> x
 let x = 2
 PACKAGE.Darklang.Stdlib.List.map [ 1; 2; 3 ] f) = [ 1; 1; 1 ]