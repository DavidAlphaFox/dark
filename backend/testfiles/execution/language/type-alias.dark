// simple alias
type Id = String

type Something = { ID: Id; Data: String }
Something { ID = "2"; Data = "test" } = Something { ID = "2"; Data = "test" }

// TODO: would be better if this indicated that it was an Id originally
Something { ID = 2; Data = "test" } = Test.runtimeError
  "Something's `ID` field should be a String. However, an Int (2) was passed instead.\n\nExpected: ({ ID: Id; ... })\nActual: an Int: 2"


module SimpleRecordAlias =
  type Person = { name: String }
  type MyPerson = Person
  type MyPerson2 = Person

  (MyPerson { name = "test" } == Person { name = "test" }) = true
  (MyPerson { name = "test" } == MyPerson2 { name = "test" }) = true

  let getName (p: MyPerson) : String = p.name
  getName (MyPerson { name = "test" }) = "test"

module SimpleEnumAlias =
  type UserRole =
    | Admin
    | User
    | Guest

  type AdminRole = UserRole
  type GuestRole = UserRole

  (GuestRole.Guest == AdminRole.Guest) = true

module NestedAlias =
  type UserCredential = (String * Id)
  type EmployeeCredential = UserCredential

  let getUserID (credential: UserCredential) : Id = credential |> Tuple2.second
  getUserID (("Alice", "EMP123")) = "EMP123"

  getUserID (("Alice", 123)) = Test.runtimeError
    "NestedAlias.getUserID's return value should be a String. However, an Int (123) was passed instead.\n\nExpected: Id\nActual: an Int: 123"

  type UserProfile =
    { credential: UserCredential
      name: String }

  type EmployeeProfile = UserProfile
  let getEmployeeName (profile: EmployeeProfile) : String = profile.name

  getEmployeeName (
    UserProfile
      { credential = ("Alice", "EMP123")
        name = "Alice" }
  ) = "Alice"

module ListAlias =
  type IntegerList = List<Int>
  let isEmpty (il: IntegerList) : Bool = List.isEmpty_v0 il
  isEmpty ([]) = true
  isEmpty ([ 1; 2; 3 ]) = false

module ResultAlias =
  // result alias
  type IntResult = PACKAGE.Darklang.Stdlib.Result.Result<Int, String>

  let getIntResultValue (ir: IntResult) : Int =
    PACKAGE.Darklang.Stdlib.Result.withDefault_v0 ir 0

  getIntResultValue (PACKAGE.Darklang.Stdlib.Result.Result.Ok 5) = 5
  getIntResultValue (PACKAGE.Darklang.Stdlib.Result.Result.Error "error") = 0

module WithTypeArgs =
  type X<'a, 'b> = { a: 'a; b: 'b }
  type Y1<'a> = X<'a, Int>
  type Y2<'b> = X<String, 'b>
  type Z<'a, 'b> = X<'b, 'a>

  let getXb (x: X<'a, 'b>) : 'b = x.b
  getXb (X { a = "test"; b = 5 }) = 5
  getXb (Y1 { a = "test"; b = 5 }) = 5
  getXb (Y2 { a = "test"; b = 5 }) = 5
  getXb (Z { a = 5; b = "test" }) = "test"
  Y1 { a = "test"; b = 5 } = Y2 { a = "test"; b = 5 }

  Y2 { a = 5; b = 6 } = Test.runtimeError
    "WithTypeArgs.Y2's `a` field should be a String. However, an Int (5) was passed instead.\n\nExpected: ({ a: String; ... })\nActual: an Int: 5"