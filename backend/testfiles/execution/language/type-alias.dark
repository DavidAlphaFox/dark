// simple alias
type Id = String

type Something = { ID: Id; Data: String }
Something { ID = "2"; Data = "test" } = Something { ID = "2"; Data = "test" }

// TODO: would be better if this indicated that it was an Id originally
Something { ID = 2; Data = "test" } = Test.runtimeError
  "Something's `ID` field should be a String. However, an Int (2) was passed instead.\n\nExpected: ({ ID: Id; ... })\nActual: an Int: 2"


module SimpleRecordAlias =
  type Person = { name: String }
  type MyPerson = Person
  type MyPerson2 = Person

  (MyPerson { name = "test" } == Person { name = "test" }) = true
  (MyPerson { name = "test" } == MyPerson2 { name = "test" }) = true

  let getName (p: MyPerson) : String = p.name
  getName (MyPerson { name = "test" }) = "test"

module EnumAlias =
  type UserRole =
    | Admin
    | User
    | Guest

  type User =
    { id: Id; name: String; role: UserRole }

  type Admin = User

  Admin
    { id = "1"
      name = "Alice"
      role = UserRole.Admin } = Admin
    { id = "1"
      name = "Alice"
      role = UserRole.Admin }

  User
    { id = "3"
      name = "Charlie"
      role = UserRole.Guest } = Admin
    { id = "3"
      name = "Charlie"
      role = UserRole.Guest }

  let getUserRole (u: User) : UserRole = u.role

  getUserRole (
    Admin
      { id = "1"
        name = "Alice"
        role = UserRole.Admin }
  ) = UserRole.Admin

  let isAdmin (u: User) : Bool = u.role == UserRole.Admin

  isAdmin (
    Admin
      { id = "1"
        name = "Alice"
        role = UserRole.Admin }
  ) = true


  module NestedAlias =
    type UserCredential = (String * Id)
    type EmployeeCredential = UserCredential

    let getUserID (credential: UserCredential) : Id = credential |> Tuple2.second
    getUserID (("Alice", "EMP123")) = "EMP123"

    getUserID (("Alice", 123)) = Test.runtimeError
      "EnumAlias.NestedAlias.getUserID's return value should be a String. However, an Int (123) was passed instead.\n\nExpected: Id\nActual: an Int: 123"

    type UserProfile =
      { credential: UserCredential
        name: String
        role: UserRole }

    type EmployeeProfile = UserProfile
    let getEmployeeName (profile: EmployeeProfile) : String = profile.name

    getEmployeeName (
      UserProfile
        { credential = ("Alice", "EMP123")
          name = "Alice"
          role = UserRole.Admin }
    ) = "Alice"

  module ListAlias =
    type IntegerList = List<Int>
    let isEmpty (il: IntegerList) : Bool = List.isEmpty_v0 il
    isEmpty ([]) = true
    isEmpty ([ 1; 2; 3 ]) = false

  module ResultAlias =
    // result alias
    type IntResult = PACKAGE.Darklang.Stdlib.Result.Result<Int, String>

    let getIntResultValue (ir: IntResult) : Int =
      PACKAGE.Darklang.Stdlib.Result.withDefault_v0 ir 0

    getIntResultValue (PACKAGE.Darklang.Stdlib.Result.Result.Ok 5) = 5
    getIntResultValue (PACKAGE.Darklang.Stdlib.Result.Result.Error "error") = 0