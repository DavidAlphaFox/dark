// function
let userFn () : Int = 6L
(() |> userFn) = 6L
([] |> PACKAGE.Darklang.Stdlib.List.push_v0 2L) = [ 2L ]

// nested function
([]
 |> PACKAGE.Darklang.Stdlib.List.push_v0 (
   PACKAGE.Darklang.Stdlib.Int.add_v0 1L (PACKAGE.Darklang.Stdlib.Int.add_v0 1L 3L)
 )) = [ 5L ]

([]
 |> PACKAGE.Darklang.Stdlib.List.push_v0 (
   PACKAGE.Darklang.Stdlib.Int.add_v0 1L ((+) 1L 3L)
 )) = [ 5L ]

([] |> PACKAGE.Darklang.Stdlib.List.push_v0 (Builtin.Test.runtimeError "err")) = Builtin.Test.derrorMessage
  "err"

// general
(4L |> (-) 3L) = 1L

([ 5L ]
 |> PACKAGE.Darklang.Stdlib.List.head
 |> Builtin.unwrap
 |> PACKAGE.Darklang.Stdlib.Int.add_v0 1L
 |> (+) 3L
 |> (fun x -> if (x + 4L) > 1L then x else (1L + x))) = 9L

// lambda in variable
(let x = fun a -> a + 1L in (5L |> x |> x |> (+) 3L)) = 10L

(let x = fun a b -> a + 1L in (7L |> x)) = Builtin.Test.derrorMessage
  "Expected 2 arguments, got 1"

// only lambda might be placed into the variable used in the middle of the pipe
(let x = 1L in (5L |> x |> x |> (+) 3L)) = Builtin.Test.derrorMessage
  "Expected a function value, got something else: 1"

// dict
type Z = { a: List<Int> }
type Y = { z: Z }
type X = { y: Y }

(let x = X { y = Y { z = Z { a = [ 1L; 2L; 3L; 4L; 5L ] } } } in
 (x.y.z.a |> PACKAGE.Darklang.Stdlib.List.length_v0)) = 5L

type MyEnum = A of Int * Int * Int
(33L |> MyEnum.A 21L 42L) = MyEnum.A 33L 21L 42L

(3L |> PACKAGE.Darklang.Stdlib.Result.Result.Ok) = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  3L

(4L |> (+) 3L |> PACKAGE.Darklang.Stdlib.Option.Option.Some) = PACKAGE.Darklang.Stdlib.Option.Option.Some
  7L

(PACKAGE.Darklang.Stdlib.Option.Option.None
 |> PACKAGE.Darklang.Stdlib.Option.Option.Some) = PACKAGE.Darklang.Stdlib.Option.Option.Some
  PACKAGE.Darklang.Stdlib.Option.Option.None


(let x = PACKAGE.Darklang.Stdlib.Option.Option.Some 3L

 x
 |> PACKAGE.Darklang.Stdlib.Option.map (fun a -> a)
 |> PACKAGE.Darklang.Stdlib.Option.map (fun a -> a + 1L)) = PACKAGE.Darklang.Stdlib.Option.Option.Some
  4L

(let x = fun x -> PACKAGE.Darklang.Stdlib.Option.map x (fun a -> a) in

 (PACKAGE.Darklang.Stdlib.Option.Option.Some 3L)
 |> x
 |> PACKAGE.Darklang.Stdlib.Option.map (fun a -> a + 1L)) = PACKAGE.Darklang.Stdlib.Option.Option.Some
  4L

((PACKAGE.Darklang.Stdlib.Option.Option.Some 3L)
 |> PACKAGE.Darklang.Stdlib.Option.withDefault_v0
   PACKAGE.Darklang.Stdlib.Option.Option.None
 |> (+) 3L) = 6L

((PACKAGE.Darklang.Stdlib.Result.Result.Ok 3L)
 |> PACKAGE.Darklang.Stdlib.Result.withDefault_v0 0L
 |> (+) 3L) = 6L

((PACKAGE.Darklang.Stdlib.Result.Result.Error "err")
 |> PACKAGE.Darklang.Stdlib.Result.withDefault_v0 0L
 |> (+) 3L) = 3L

(let x = fun a -> PACKAGE.Darklang.Stdlib.Result.withDefault_v0 a 1L in
 (PACKAGE.Darklang.Stdlib.Result.Result.Error "err") |> x |> (+) 3L) = 4L

(let x =
  fun x ->
    PACKAGE.Darklang.Stdlib.Option.andThen_v0
      (PACKAGE.Darklang.Stdlib.Option.Option.Some x)
      (fun x -> PACKAGE.Darklang.Stdlib.Option.Option.Some(1L + x)) in

 3L |> x) = PACKAGE.Darklang.Stdlib.Option.Option.Some 4L

(let x =
  fun x ->
    PACKAGE.Darklang.Stdlib.Option.andThen_v0 x (fun x ->
      PACKAGE.Darklang.Stdlib.Option.Option.Some(1L + x)) in

 3L |> PACKAGE.Darklang.Stdlib.Option.Option.Some |> x) = PACKAGE.Darklang.Stdlib.Option.Option.Some
  4L

(3L
 |> PACKAGE.Darklang.Stdlib.Option.Option.Some
 |> PACKAGE.Darklang.Stdlib.Result.fromOption "test") = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  3L

(PACKAGE.Darklang.Stdlib.Option.Option.None
 |> PACKAGE.Darklang.Stdlib.Result.fromOption "test") = PACKAGE.Darklang.Stdlib.Result.Result.Error
  "test"


module FnName =
  (let fn = (fun x -> x + 1L)
   6L |> fn) = 7L

  (let fn = PACKAGE.Darklang.Stdlib.Int.add
   3L |> fn 4L) = 7L

  (let fn = PACKAGE.Darklang.Stdlib.Int.subtract
   11L |> fn 4L) = 7L

  (let fn = PACKAGE.Darklang.Stdlib.Int.max
   3L |> fn 7L) = 7L