let d (datestr:String) : DateTime =
  (DateTime.parse_v2 datestr) |> Test.unwrap

let p (datestr:String) : Result<DateTime, String> =
  (DateTime.parse_v2 datestr) |> Result.map_v1 (fun x -> DateTime.toString_v0 x)

module DateParsing =
  (DateTime.parse_v2 "2019-07-28T22:42:36Z") |> Result.map_v1 (fun x -> DateTime.toString_v0 x) = Ok "2019-07-28T22:42:36Z"
  DateTime.parse_v2 "asd" = Error "Invalid date format"

// Parse in both
p "2018-09-24T18:01:24Z" = Ok "2018-09-24T18:01:24Z"


// Lowercase `z` aren't allowed
p "2023-09-23T18:01:24z" = Error "Invalid date format"


// Time zones aren't allowed
p "2000-11-22 09:10:15z" = Error "Invalid date format" // special cased in F#
p "2008-09-15T09:30:41GMT" = Error "Invalid date format" // special cased in F#
p "2008-09-15T09:30:41UTC" = Error "Invalid date format"
p "2008-09-15T09:30:41EST" = Error "Invalid date format"

// Fail in both
p "2000-11-22 09:10:15" = Error "Invalid date format"
p "2000-11-22 09:10:15Z" = Error "Invalid date format"
p "2012-01-31 23:59:59.999" = Error "Invalid date format"
p "2012-01-31 23:59:59.999+0100" = Error "Invalid date format"
p "2012-01-31 23:59:59.999-0100" = Error "Invalid date format"
p "2018-09-09 10:43:54+0100" = Error "Invalid date format"
p "2018-09-09 11:43:54+0200" = Error "Invalid date format"
p "2018-09-24T17:48:00" = Error "Invalid date format"
p "2018-09-24T18:09:24+0200" = Error "Invalid date format"
p "1999-03-22T05:06:07+01:00" = Error "Invalid date format"
p "1999-03-22T05:06:07.000Z" = Error "Invalid date format"
p "2006-06-09T10:20:30.040" = Error "Invalid date format"
p "2006-06-09T10:20:30.040+02:00" = Error "Invalid date format"
p "20061204T1020Z" = Error "Invalid date format"
p "20061204T1020" = Error "Invalid date format"
p "2008-09-15T09:30:41.1" = Error "Invalid date format"
p "2008-09-15T09:30:41.12" = Error "Invalid date format"
p "2008-09-15T09:30:41.123" = Error "Invalid date format"
p "2008-09-15T09:30:41.1234" = Error "Invalid date format"
p "2008-09-15T09:30:41.12345" = Error "Invalid date format"
p "2008-09-15T09:30:41.123456" = Error "Invalid date format"
p "2008-09-15T09:30:41.1234567" = Error "Invalid date format"
p "2008-09-15T09:30:41.1234567Z" = Error "Invalid date format"
p "2008-09-15T09:30:41.7752486-07:00" = Error "Invalid date format"
p "2008-09-15T09:30:41.7752486-04:00" = Error "Invalid date format"
p "20061204T10:20:54.67am" = Error "Invalid date format"
p "20061204T10:20:54.67am" = Error "Invalid date format"
p "20061204T1020am" = Error "Invalid date format"
p "20061204T1020AM" = Error "Invalid date format"
p "20061204T1020PM" = Error "Invalid date format"
p "20061204T1020pm" = Error "Invalid date format"
p "15/06/2008 08:30" = Error "Invalid date format"
p "18/08/2015 06:30:15.006542" = Error "Invalid date format"
p "Mon, 15 Sep 2008 09:30:41 GMT" = Error "Invalid date format"
p "2/16/2008 12:15:12 PM" = Error "Invalid date format"
p "16/02/2008 12:15:12" = Error "Invalid date format"
p "12 Juni 2008" = Error "Invalid date format"
p "Friday, April 10, 2009" = Error "Invalid date format"
p "2006-06-09" = Error "Invalid date format"
p "2012-01-31" = Error "Invalid date format"
p "2016-12-27 14:40:46 +0000" = Error "Invalid date format"
p "2017-08-02" = Error "Invalid date format"
p "2T102030Z" = Error "Invalid date format"
p "31-01-12" = Error "Invalid date format"
p "31-01-2012" = Error "Invalid date format"
p "Jun 5 Sun" = Error "Invalid date format"
p "Thursday, April 10, 2008" = Error "Invalid date format"
p "00:00:10.512345678" = Error "Invalid date format"
p "01-31-2012" = Error "Invalid date format"
p "10.5" = Error "Invalid date format"
p "10.5+02:00" = Error "Invalid date format"
p "10/04/2008" = Error "Invalid date format"
p "10:20:30.040" = Error "Invalid date format"
p "10:20:30.040+02:00" = Error "Invalid date format"
p "11:03:01" = Error "Invalid date format"
p "13:03:15.454+0530" = Error "Invalid date format"
p "1999-03-22 AD" = Error "Invalid date format"
p "1999-03-22+01:00" = Error "Invalid date format"
p "+2006-06-09" = Error "Invalid date format"
p "+2006-06-09T10:20:30.040" = Error "Invalid date format"
p "1999-03-22T05:06:07+01:00[Europe/Paris]" = Error "Invalid date format"
p "1999-03-22T05:06:07.000+01:00[Europe/Paris]" = Error "Invalid date format"
p "1999-03-22T05:06:07.000[Europe/Paris]" = Error "Invalid date format"
p "1999-081+01:00" = Error "Invalid date format"
p "1999-W13-2" = Error "Invalid date format"
p "19990322" = Error "Invalid date format"
p "19990322+0100" = Error "Invalid date format"
p "1999W132" = Error "Invalid date format"
p "2006-06-09T+02:00" = Error "Invalid date format"
p "2006-123" = Error "Invalid date format"
p "2006-123T+02:00" = Error "Invalid date format"
p "2006-123T10:20:30.040" = Error "Invalid date format"
p "2006-123T10:20:30.040+02:00" = Error "Invalid date format"
p "2006-W27-3" = Error "Invalid date format"
p "2006-W27-3T+02:00" = Error "Invalid date format"
p "2006-W27-3T10:20:30.040" = Error "Invalid date format"
p "2006-W27-3T10:20:30.040+02:00" = Error "Invalid date format"
p "20061204T10203Z" = Error "Invalid date format"
p "20061204T102Z" = Error "Invalid date format"
p "20061204T10Z" = Error "Invalid date format"
p "20061204T1Z" = Error "Invalid date format"
p "2006120T102030Z" = Error "Invalid date format"
p "200612T102030Z" = Error "Invalid date format"
p "20061T102030Z" = Error "Invalid date format"
p "2006T102030Z" = Error "Invalid date format"
p "200T102030Z" = Error "Invalid date format"
p "20T102030Z" = Error "Invalid date format"
p "Friday the 16th of May" = Error "Invalid date format"
p "Friday, May 16th 2014" = Error "Invalid date format"
p "Sat Dec 01 00:00:00 IST 2018" = Error "Invalid date format"
p "Saturday November 2012 10:45:42.720+0100" = Error "Invalid date format"
p "Sunday, June 5, 2013" = Error "Invalid date format"
p "T10.5" = Error "Invalid date format"
p "T10.5+02:00" = Error "Invalid date format"
p "T10:20:30.040" = Error "Invalid date format"
p "T10:20:30.040+02:00" = Error "Invalid date format"
p "Thu, Aug 2 1985 08:30 PM" = Error "Invalid date format"
p "Thursday, August 2 1985 08:30 PM" = Error "Invalid date format"
p "Tue, 02 Jan 2018 18:07:59 IST" = Error "Invalid date format"
p "mardi janvier 2018 14:51:02.354+0530" = Error "Invalid date format"
p "20061204T1020 am" = Error "Invalid date format"
p "20061204T1020 AM" = Error "Invalid date format"
p "2008-09-15T09:30:41 GMT" = Error "Invalid date format"
p "2008-09-15T09:30.456" = Error "Invalid date format"

// while space isn't allowed
p " 2006-06-09T10:20:30.040+02:00" = Error "Invalid date format"
p "2006-06-09T10:20:30.040+02:00 " = Error "Invalid date format"
p " 2006-06-09T10:20:30.040+02:00 " = Error "Invalid date format"

module LessThan =
  DateTime.lessThan (d "2019-07-28T22:42:36Z") (d "2019-07-28T22:42:36Z") = false
  DateTime.lessThan (d "2019-07-28T22:42:36Z") (d "2020-11-26T04:37:46Z") = true

module LessThanOrEquals =
  DateTime.lessThanOrEqualTo (d "2021-07-28T22:42:36Z") (d "2020-11-26T04:37:46Z") = false
  DateTime.lessThanOrEqualTo (d "2019-07-28T22:42:36Z") (d "2020-11-26T04:37:46Z") = true

module GreaterThan =
  DateTime.greaterThan (d "2019-07-28T22:42:36Z") (d "2019-07-28T22:42:36Z") = false
  DateTime.greaterThan (d "2020-11-26T04:37:46Z") (d "2019-07-28T22:42:36Z") = true

module GreaterThanOrEquals =
  DateTime.greaterThanOrEqualTo (d "2019-11-26T04:37:46Z") (d "2020-07-28T22:42:36Z") = false
  DateTime.greaterThanOrEqualTo (d "2020-11-26T04:37:46Z") (d "2020-11-26T04:37:46Z") = true

module Fields =
  DateTime.year_v0 (d "2019-07-28T22:42:36Z") = 2019
  DateTime.month_v0 (d "2019-07-28T22:42:36Z") = 7
  DateTime.day_v0 (d "2019-07-28T22:42:36Z") = 28
  DateTime.hour_v2 (d "2019-12-27T03:27:36Z")  = 3 // Leif's test case
  DateTime.minute_v1 (d "2019-07-28T22:42:36Z") = 42
  DateTime.weekday_v0 (d "2019-07-22T22:42:36Z") = 1 // Monday
  DateTime.weekday_v0 (d "2019-07-23T22:42:36Z") = 2
  DateTime.weekday_v0 (d "2019-07-24T22:42:36Z") = 3
  DateTime.weekday_v0 (d "2019-07-25T22:42:36Z") = 4
  DateTime.weekday_v0 (d "2019-07-26T22:42:36Z") = 5
  DateTime.weekday_v0 (d "2019-07-27T22:42:36Z") = 6
  DateTime.weekday_v0 (d "2019-07-28T22:42:36Z") = 7


module Epoch1919 =
  DateTime.year_v0 (d "1919-07-28T22:42:36Z") = 1919
  DateTime.month_v0 (d "1919-07-28T22:42:36Z") = 7
  DateTime.day_v0 (d "1919-07-28T22:42:36Z") = 28
  DateTime.weekday_v0 (d "1919-07-28T22:42:36Z") = 1
  DateTime.hour_v2 (d "1919-12-27T03:27:36Z")  = 3
  DateTime.minute_v1 (d "1919-07-28T22:42:36Z") = 42
  DateTime.second_v1 (d "1919-07-28T22:42:36Z") = 36

module Epoch1969 =
  DateTime.year_v0 (d "1969-07-28T22:42:36Z") = 1969
  DateTime.month_v0 (d "1969-07-28T22:42:36Z") = 7
  DateTime.day_v0 (d "1969-07-28T22:42:36Z") = 28
  DateTime.weekday_v0 (d "1969-07-28T22:42:36Z") = 1
  DateTime.hour_v2 (d "1969-12-27T03:27:36Z")  = 3
  DateTime.minute_v1 (d "1969-07-28T22:42:36Z") = 42
  DateTime.second_v1 (d "1969-07-28T22:42:36Z") = 36

module Epoch1970 =
  DateTime.year_v0    (d "1970-07-28T22:42:36Z") = 1970
  DateTime.month_v0   (d "1970-07-28T22:42:36Z") = 7
  DateTime.day_v0     (d "1970-07-28T22:42:36Z") = 28
  DateTime.weekday_v0 (d "1970-07-28T22:42:36Z") = 2
  DateTime.hour_v2    (d "1970-12-27T03:27:36Z")  = 3
  DateTime.minute_v1  (d "1970-07-28T22:42:36Z") = 42
  DateTime.minute_v1  (d "1970-07-28T22:42:36Z") = 42
  DateTime.second_v1  (d "1970-07-28T22:42:36Z") = 36
  DateTime.second_v1  (d "1970-07-28T22:42:36Z") = 36

module Convertsion =
  DateTime.toString_v0 (d "2019-07-28T22:42:36Z") = "2019-07-28T22:42:36Z"
  DateTime.atStartOfDay_v0 (d "2019-07-28T22:42:36Z") = (d "2019-07-28T00:00:00Z")
  DateTime.toSeconds_v0 (d "2019-07-28T22:42:36Z") = 1564353756
  DateTime.toSeconds_v0 (d "2075-11-14T11:01:35Z") = 3340954895L
  DateTime.toStringISO8601BasicDateTime_v0 (d "2019-07-28T22:42:36Z") = "20190728T224236Z"
  DateTime.toStringISO8601BasicDateTime_v0 (d "1919-07-28T22:42:36Z") = "19190728T224236Z"
  DateTime.toStringISO8601BasicDate_v0 (d "2019-07-28T22:42:36Z") = "20190728"
  DateTime.toStringISO8601BasicDate_v0 (d "1069-07-28T22:42:36Z") = "10690728"
  1095379198 |> DateTime.fromSeconds_v0 |> DateTime.toSeconds_v0 = 1095379198
  (d "2019-07-28T22:42:36Z") |> DateTime.toSeconds_v0 |> DateTime.fromSeconds_v0 |> DateTime.toString_v0 = "2019-07-28T22:42:36Z"
  // DateTime.today_v0 |> DateTime.toString_v0 = "2020-10-17T00:00:00Z" // todo, how can we test this

module AddingSeconds =
  DateTime.addSeconds_v0 (d "2020-11-26T04:37:46Z") 0 = (d "2020-11-26T04:37:46Z")
  DateTime.addSeconds_v0 (d "2020-11-26T04:37:46Z") 1 = (d "2020-11-26T04:37:47Z")
  DateTime.addSeconds_v0 (d "2020-11-26T04:37:46Z") 10 = (d "2020-11-26T04:37:56Z")
  DateTime.addSeconds_v0 (d "2020-11-26T04:37:46Z") 1000000 = (d "2020-12-07T18:24:26Z")
  DateTime.addSeconds_v0 (d "2020-11-26T04:37:46Z") -10 = (d "2020-11-26T04:37:36Z")

module SubtractingSeconds =
  DateTime.subtractSeconds_v0 (d "2020-11-26T04:37:46Z") 0 = (d "2020-11-26T04:37:46Z")
  DateTime.subtractSeconds_v0 (d "2020-11-26T04:37:46Z") 1 = (d "2020-11-26T04:37:45Z")
  DateTime.subtractSeconds_v0 (d "2020-11-26T04:37:46Z") 10 = (d "2020-11-26T04:37:36Z")
  DateTime.subtractSeconds_v0 (d "2020-11-26T04:37:46Z") 1000000 = (d "2020-11-14T14:51:06Z")
  DateTime.subtractSeconds_v0 (d "2020-11-26T04:37:46Z") -10 = (d "2020-11-26T04:37:56Z")

module Difference =
  DateTime.subtract_v1 (d "2020-11-26T04:37:46Z") (d "2020-11-26T04:37:46Z") = 0L
  DateTime.subtract_v1 (d "2020-11-26T04:37:46Z") (d "2020-11-26T04:37:45Z") = 1L
  DateTime.subtract_v1 (d "2020-11-26T04:37:46Z") (d "2020-11-26T04:37:36Z") = 10L
  DateTime.subtract_v1 (d "2020-11-26T04:37:46Z") (d "2020-11-26T04:37:56Z") = -10L
  DateTime.subtract_v1 (d "2020-11-26T04:37:46Z") (d "2020-11-14T14:51:06Z") = 1000000L
  DateTime.subtract_v1 (d "2020-11-14T14:51:06Z") (d "2020-11-26T04:37:46Z") = -1000000L
  DateTime.subtract_v1 (d "1921-01-01T12:00:00Z") (d "2021-01-01T12:00:00Z") = -3155760000L
  DateTime.subtract_v1 (d "2021-01-01T12:00:00Z") (d "1921-01-01T12:00:00Z") = 3155760000L
