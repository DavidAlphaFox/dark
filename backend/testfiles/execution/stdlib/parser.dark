// aliases and helper fns
type Point = PACKAGE.Darklang.LanguageTools.Parser.Point
type Range = PACKAGE.Darklang.LanguageTools.Parser.Range
type ParsedNode = PACKAGE.Darklang.LanguageTools.Parser.ParsedNode

let range (s: Int64 * Int64) (e: Int64 * Int64) : Range =
  let (startRow, startColumn) = s
  let (endRow, endColumn) = e

  Range
    { start = Point { row = startRow; column = startColumn }
      end_ = Point { row = endRow; column = endColumn } }



/// These tests are a huge pain to write and maintain
/// Let's focus on roundtripping tests, largely,
/// and just have one of these for some base-line checking.
///
/// TODO: make that one test much more comprehensive
module ParseToSimplifiedTree =
  // super basic test just to make sure we don't throw an exception
  (let parsed =
    Builtin.parserParseToSimplifiedTree
      "let add (a: Int) (b: Int): Int =\n  let sum = a + b\n  sum"

   parsed.typ) = "source_file"


  // simplest type alias
  ("type ID = Int64" |> Builtin.parserParseToSimplifiedTree) = ParsedNode
    { typ = "source_file"
      fieldName = Stdlib.Option.Option.None
      text = "type ID = Int64"
      sourceRange = range (0L, 0L) (0L, 15L)
      children =
        [ ParsedNode
            { fieldName = Stdlib.Option.Option.None
              typ = "type_decl"
              text = "type ID = Int64"
              sourceRange = range (0L, 0L) (0L, 15L)
              children =
                [ ParsedNode
                    { fieldName = Stdlib.Option.Option.Some "keyword_type"
                      typ = "keyword"
                      text = "type"
                      sourceRange = range (0L, 0L) (0L, 4L)
                      children = [] }

                  ParsedNode
                    { fieldName = Stdlib.Option.Option.Some "name"
                      typ = "type_identifier"
                      text = "ID"
                      sourceRange = range (0L, 5L) (0L, 7L)
                      children = [] }

                  ParsedNode
                    { fieldName = Stdlib.Option.Option.Some "symbol_equals"
                      typ = "symbol"
                      text = "="
                      sourceRange = range (0L, 8L) (0L, 9L)
                      children = [] }

                  ParsedNode
                    { fieldName = Stdlib.Option.Option.Some "typ"
                      typ = "type_reference"
                      text = "Int64"
                      sourceRange = range (0L, 10L) (0L, 15L)
                      children =
                        [ ParsedNode
                            { fieldName = Stdlib.Option.Option.None
                              typ = "builtin_type"
                              text = "Int64"
                              sourceRange = range (0L, 10L) (0L, 15L)
                              children = [] } ] } ] } ] }


  ("" |> Builtin.parserParseToSimplifiedTree) = ParsedNode
    { typ = "source_file"
      fieldName = Stdlib.Option.Option.None
      text = ""
      sourceRange = range (0L, 0L) (0L, 0L)
      children = [] }

// These tests are a huge pain to write and maintain
// Let's focus on roundtripping tests, largely,
// and just have one of these for some base-line checking.
///
/// TODO: make that one test much more comprehensive
module ParseNodeToWrittenTypes =
  ("type MyID = Int64"
   |> PACKAGE.Darklang.LanguageTools.Parser.parseToSimplifiedTree
   |> PACKAGE.Darklang.LanguageTools.Parser.parseCliScript
   |> Builtin.unwrap) = PACKAGE
    .Darklang
    .LanguageTools
    .WrittenTypes
    .ParsedFile
    .CliScript(
      PACKAGE.Darklang.LanguageTools.WrittenTypes.CliScript
        { range = range (0L, 0L) (0L, 17L)
          typesAndFns =
            [ PACKAGE.Darklang.LanguageTools.WrittenTypes.CliScriptTypeOrFn.Type(
                (PACKAGE.Darklang.LanguageTools.WrittenTypes.TypeDeclaration.TypeDeclaration
                  { range = range (0L, 0L) (0L, 17L)
                    name =
                      PACKAGE.Darklang.LanguageTools.WrittenTypes.TypeIdentifier
                        { range = range (0L, 5L) (0L, 9L)
                          name = "MyID" }
                    definition =
                      PACKAGE
                        .Darklang
                        .LanguageTools
                        .WrittenTypes
                        .TypeDeclaration
                        .Definition
                        .Alias(
                          PACKAGE
                            .Darklang
                            .LanguageTools
                            .WrittenTypes
                            .TypeReference
                            .TypeReference
                            .Builtin(
                              PACKAGE
                                .Darklang
                                .LanguageTools
                                .WrittenTypes
                                .TypeReference
                                .Builtin
                                .TInt64(range (0L, 12L) (0L, 17L))
                            )
                        )
                    keywordType = range (0L, 0L) (0L, 4L)
                    symbolEquals = range (0L, 10L) (0L, 11L) })
              ) ]
          unparseableStuff = []
          exprsToEval = [] }
    )


module TextToTextRoundtripping =
  let prettyPrintCliScript
    (parsedFile: PACKAGE.Darklang.LanguageTools.WrittenTypes.ParsedFile)
    : String =
    let script =
      match parsedFile with
      | CliScript script -> script

    let typesAndFnsPart = // List<String>
      (Stdlib.List.fold script.typesAndFns [] (fun acc typeOrFn ->
        match typeOrFn with
        | Type typeDecl ->
          let prettyPrinted =
            (PACKAGE.Darklang.LanguageTools.NameResolver.empty ())
            |> PACKAGE.Darklang.LanguageTools.WrittenTypesToProgramTypes.TypeDeclaration.toUserTypePT
              typeDecl
            |> PACKAGE.Darklang.PrettyPrinter.ProgramTypes.userType

          acc |> Stdlib.List.push prettyPrinted

        | Function fnDecl ->
          let prettyPrinted =
            (PACKAGE.Darklang.LanguageTools.NameResolver.empty ())
            |> PACKAGE.Darklang.LanguageTools.WrittenTypesToProgramTypes.FunctionDeclaration.toUserFnPT
              fnDecl
            |> PACKAGE.Darklang.PrettyPrinter.ProgramTypes.userFunction

          acc |> Stdlib.List.push prettyPrinted))
      |> Stdlib.List.reverse

    let exprsPart = // List<String>
      (Stdlib.List.fold script.exprsToEval [] (fun acc expr ->
        let prettyPrinted =
          (PACKAGE.Darklang.LanguageTools.NameResolver.empty ())
          |> PACKAGE.Darklang.LanguageTools.WrittenTypesToProgramTypes.Expr.toPT
            expr
          |> PACKAGE.Darklang.PrettyPrinter.ProgramTypes.expr

        acc |> Stdlib.List.push prettyPrinted))
      |> Stdlib.List.reverse

    [ typesAndFnsPart; exprsPart ]
    |> Stdlib.List.flatten
    |> Stdlib.String.join "\n\n"


  let roundtripCliScript (text: String) : String =
    text
    |> PACKAGE.Darklang.LanguageTools.Parser.parseToSimplifiedTree
    |> PACKAGE.Darklang.LanguageTools.Parser.parseCliScript
    |> Builtin.unwrap
    |> prettyPrintCliScript


  module TypeReference =
    // all built-ins
    ("type MyUnit = Unit" |> roundtripCliScript) = "type MyUnit =\n  Unit"
    ("type MyBool = Bool" |> roundtripCliScript) = "type MyBool =\n  Bool"
    ("type MyInt8 = Int8" |> roundtripCliScript) = "type MyInt8 =\n  Int8"
    ("type MyUInt8 = UInt8" |> roundtripCliScript) = "type MyUInt8 =\n  UInt8"
    ("type MyInt16 = Int16" |> roundtripCliScript) = "type MyInt16 =\n  Int16"
    ("type MyUInt16 = UInt16" |> roundtripCliScript) = "type MyUInt16 =\n  UInt16"
    ("type MyInt32 = Int32" |> roundtripCliScript) = "type MyInt32 =\n  Int32"
    ("type MyUInt32 = UInt32" |> roundtripCliScript) = "type MyUInt32 =\n  UInt32"
    ("type MyInt64 = Int64" |> roundtripCliScript) = "type MyInt64 =\n  Int64"
    ("type MyUInt64 = UInt64" |> roundtripCliScript) = "type MyUInt64 =\n  UInt64"
    ("type MyInt128 = Int128" |> roundtripCliScript) = "type MyInt128 =\n  Int128"
    ("type MyUInt128 = UInt128" |> roundtripCliScript) = "type MyUInt128 =\n  UInt128"
    ("type MyFloat = Float" |> roundtripCliScript) = "type MyFloat =\n  Float"
    ("type MyChar = Char" |> roundtripCliScript) = "type MyChar =\n  Char"
    ("type MyString = String" |> roundtripCliScript) = "type MyString =\n  String"

    ("type MyList = List<String>" |> roundtripCliScript) = "type MyList =\n  List<String>"
    ("type MyList = List<List<String>>" |> roundtripCliScript) = "type MyList =\n  List<List<String>>"
    ("type MyList = List<MyString>" |> roundtripCliScript) = "type MyList =\n  List<MyString>"

    ("type MyDict = Dict<Int64>" |> roundtripCliScript) = "type MyDict =\n  Dict<Int64>"
    ("type MyDict = Dict<MyList>" |> roundtripCliScript) = "type MyDict =\n  Dict<MyList>"

    ("type MyTuple2 = (String * Int64)" |> roundtripCliScript) = "type MyTuple2 =\n  (String * Int64)"
    ("type MyTuple3 = (String * Int64 * Bool)" |> roundtripCliScript) = "type MyTuple3 =\n  (String * Int64 * Bool)"
    ("type MyTuple = (String * Int64 * Bool * Unit)" |> roundtripCliScript) = "type MyTuple =\n  (String * Int64 * Bool * Unit)"
    // single-part qualified name
    ("type ID = Test" |> roundtripCliScript) = "type ID =\n  Test"

    // fully-qualified package name (multi-part)
    ("type MyOption = PACKAGE.Darklang.Stdlib.Option.Option" |> roundtripCliScript) = "type MyOption =\n  PACKAGE.Darklang.Stdlib.Option.Option_v0"
    ("type MyOption = Stdlib.Option.Option" |> roundtripCliScript) = "type MyOption =\n  PACKAGE.Darklang.Stdlib.Option.Option_v0"


  module TypeDeclaration =
    ("type SimpleAlias = Unit" |> roundtripCliScript) = "type SimpleAlias =\n  Unit"


  module Expr =
    // units
    ("()" |> roundtripCliScript) = "()"

    // bools
    ("true" |> roundtripCliScript) = "true"
    ("false" |> roundtripCliScript) = "false"

    // parens (disappear)
    ("(true)" |> roundtripCliScript) = "true"

    // int literals
    ("1y" |> roundtripCliScript) = "1y"
    ("-1y" |> roundtripCliScript) = "-1y"
    ("1uy" |> roundtripCliScript) = "1uy"
    ("1s" |> roundtripCliScript) = "1s"
    ("1us" |> roundtripCliScript) = "1us"
    ("1l" |> roundtripCliScript) = "1l"
    ("-1l" |> roundtripCliScript) = "-1l"
    ("1ul" |> roundtripCliScript) = "1ul"
    ("0L" |> roundtripCliScript) = "0L"
    ("1900L" |> roundtripCliScript) = "1900L"
    ("-1900L" |> roundtripCliScript) = "-1900L"
    ("1UL" |> roundtripCliScript) = "1UL"
    ("1Q" |> roundtripCliScript) = "1Q"
    ("-1Q" |> roundtripCliScript) = "-1Q"
    ("1Q" |> roundtripCliScript) = "1Q"

    // float literals
    ("-1.0" |> roundtripCliScript) = "-1.0"
    ("-1.5" |> roundtripCliScript) = "-1.5"
    ("1.5" |> roundtripCliScript) = "1.5"
    ("0.0" |> roundtripCliScript) = "0.0"
    ("0.775" |> roundtripCliScript) = "0.775"

    // string literals
    ("\"\"" |> roundtripCliScript) = "\"\""
    ("\"hello\"" |> roundtripCliScript) = "\"hello\""
    ("\"hello\\tworld\"" |> roundtripCliScript) = "\"hello\\tworld\""

    // char literals
    ("'a'" |> roundtripCliScript) = "'a'"
    ("'\\n'" |> roundtripCliScript) = "'\\n'"
    ("'\t'" |> roundtripCliScript) = "'\t'"

    // list literal
    ("[]" |> roundtripCliScript) = "[]"
    ("[\"hello\"]" |> roundtripCliScript) = "[\"hello\"]"
    ("[1L; 2L]" |> roundtripCliScript) = "[1L; 2L]"
    ("[1L; 2L; 3L;]" |> roundtripCliScript) = "[1L; 2L; 3L]"
    ("[true; false; true; false]" |> roundtripCliScript) = "[true; false; true; false]"
    ("[[1L; 2L]; [3L; 4L]]" |> roundtripCliScript) = "[[1L; 2L]; [3L; 4L]]"

    // dict literal
    ("Dict { }" |> roundtripCliScript) = "Dict {  }"
    ("Dict { a = 1L }" |> roundtripCliScript) = "Dict { a = 1L }"
    ("Dict { a = \"hello\"; b = \"test\" }" |> roundtripCliScript) = "Dict { a = \"hello\"; b = \"test\" }"
    ("Dict { a = 1L; b = 2L; c = 3L }" |> roundtripCliScript) = "Dict { a = 1L; b = 2L; c = 3L }"

    // tuple literals
    ("(1L, \"hello\")" |> roundtripCliScript) = "(1L, \"hello\")"
    ("(1L, \"hello\", 2L)" |> roundtripCliScript) = "(1L, \"hello\", 2L)"
    ("(1L, \"hello\", 2L, true)" |> roundtripCliScript) = "(1L, \"hello\", 2L, true)"
    ("(1L, 2L + 3L, 4L)" |> roundtripCliScript) = "(1L, (2L) + (3L), 4L)"

    // variables and let bindings
    ("assumedlyAVariableName" |> roundtripCliScript) = "assumedlyAVariableName"
    // TODO: this is ugly
    ("let x = 1L\n  x" |> roundtripCliScript) = "let x =\n  1L\nx"

    // if expressions
    ("if true then (1L)" |> roundtripCliScript) = "if true then\n  1L"
    ("if true then (1L) else 2L" |> roundtripCliScript) = "if true then\n  1L\nelse\n  2L"
    ("if a < b then (1L) else if c > d then (2L)" |> roundtripCliScript) = "if (a) < (b) then\n  1L\nelse\n  if (c) > (d) then\n    2L"
    ("if a < b then (1L) else if c > d then (2L) else 3L" |> roundtripCliScript) = "if (a) < (b) then\n  1L\nelse\n  if (c) > (d) then\n    2L\n  else\n    3L"

    ("if true then\n 1L" |> roundtripCliScript) = "if true then\n  1L"
    ("if true then\n 1L\nelse\n 2L" |> roundtripCliScript) = "if true then\n  1L\nelse\n  2L"
    ("if true then\n a\nelse if false then\n c" |> roundtripCliScript) = "if true then\n  a\nelse\n  if false then\n    c"

    ("if a > b then\n a\nelse if c > d then\n c\nelse d" |> roundtripCliScript) = "if (a) > (b) then\n  a\nelse\n  if (c) > (d) then\n    c\n  else\n    d"


    ("""if true then
  a
else if false then
  c
else if true then
  d"""
     |> roundtripCliScript) = """if true then
  a
else
  if false then
    c
  else
    if true then
      d"""


    ("""if true then
  a
else if false then
  c
else if true then
  d
else
  e"""
     |> roundtripCliScript) = """if true then
  a
else
  if false then
    c
  else
    if true then
      d
    else
      e"""

    // else for inner if
    ("""if a > b then
  if c > d then
    c
  else
    b"""
     |> roundtripCliScript) = """if (a) > (b) then
  if (c) > (d) then
    c
  else
    b"""

    // else for outer if
    ("""if a > b then
  if c > d then
    c
else
  b"""
     |> roundtripCliScript) = """if (a) > (b) then
  if (c) > (d) then
    c
else
  b"""

    // nested if
    ("""if a > b then
  a
else
  if c > d then
    c
  else
    if e > f then
      e
    else
      if g > h then
        g
      else
        h"""
     |> roundtripCliScript) = """if (a) > (b) then
  a
else
  if (c) > (d) then
    c
  else
    if (e) > (f) then
      e
    else
      if (g) > (h) then
        g
      else
        h"""


    // fn calls
    // TODO: these are ugly
    ("1L + 2L" |> roundtripCliScript) = "(1L) + (2L)"
    ("1L + b + 3L" |> roundtripCliScript) = "((1L) + (b)) + (3L)"
    ("1L + 2L * 3L - 4L" |> roundtripCliScript) = "((1L) + ((2L) * (3L))) - (4L)"
    ("1L > 2L" |> roundtripCliScript) = "(1L) > (2L)"
    ("1L >= 2L" |> roundtripCliScript) = "(1L) >= (2L)"
    ("1L < 2L" |> roundtripCliScript) = "(1L) < (2L)"
    ("1L <= 2L" |> roundtripCliScript) = "(1L) <= (2L)"
    ("1L == 2L" |> roundtripCliScript) = "(1L) == (2L)"
    ("1L != 2L" |> roundtripCliScript) = "(1L) != (2L)"
    ("1L ^ 2L" |> roundtripCliScript) = "(1L) ^ (2L)"
    ("true && false" |> roundtripCliScript) = "(true) && (false)"
    ("true || false" |> roundtripCliScript) = "(true) || (false)"
    ("(and true false)" |> roundtripCliScript) = "and true false"
    ("(Bool.and true false)" |> roundtripCliScript) = "Bool.and true false"
    ("(PACKAGE.Darklang.Stdlib.Bool.and true false)" |> roundtripCliScript) = "PACKAGE.Darklang.Stdlib.Bool.and_v0 true false"
    ("(Stdlib.Bool.and true false)" |> roundtripCliScript) = "PACKAGE.Darklang.Stdlib.Bool.and_v0 true false"
    ("(Builtin.int64Add 1L 2L)" |> roundtripCliScript) = "Builtin.int64Add 1L 2L"

  module FunctionDeclaration =
    // single 'normal' param
    ("let helloWorld (i: Int64): String = \"Hello world\"" |> roundtripCliScript) = "let helloWorld (i: Int64): String =\n  \"Hello world\""

    ("let double2 (i: PACKAGE.Darklang.LanguageTools.ID_v0) : Int64 = i + i"
     |> roundtripCliScript) = "let double2 (i: PACKAGE.Darklang.LanguageTools.ID_v0): Int64 =\n  (i) + (i)"

    // () param
    ("let emptyString () : String = \"\"" |> roundtripCliScript) = "let emptyString (_: Unit): String =\n  \"\""


    // multiple params
    ("let isHigher (a: Int64) (b: Int64) : Bool = (Stdlib.Int64.greaterThan_v0 a b)"
     |> roundtripCliScript) = "let isHigher (a: Int64) (b: Int64): Bool =\n  PACKAGE.Darklang.Stdlib.Int64.greaterThan_v0 a b"



  module FnCalls =
    //package function call
    ("let sum (a : Int64) (b : Int64) : Int64 = (PACKAGE.Darklang.Stdlib.Int64.add a b)"
     |> roundtripCliScript) = "let sum (a: Int64) (b: Int64): Int64 =\n  PACKAGE.Darklang.Stdlib.Int64.add_v0 a b"



    module CliScript =
      // TODO the output here is a bit broken
      ("""
type BookID = Int64

let getTitle (bookId: BookID): String =
  let book = (Library.getBook bookId)
  (getNameFromBook book)

let curiousGeorgeBookId = 101L
(Builtin.printLine (getTitle curiousGeorgeBookId))

0L
"""
       |> roundtripCliScript) = """type BookID =
  Int64

let getTitle (bookId: BookID): String =
  let book =
    Library.getBook bookId
  getNameFromBook book

let curiousGeorgeBookId =
  101L
Builtin.printLine getTitle curiousGeorgeBookId

0L"""