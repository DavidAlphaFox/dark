PACKAGE.Darklang.Stdlib.Result.andThen
  (PACKAGE.Darklang.Stdlib.Result.Result.Error "test")
  (fun x -> PACKAGE.Darklang.Stdlib.Result.Result.Error "test") = PACKAGE.Darklang.Stdlib.Result.Result.Error
  "test"

PACKAGE.Darklang.Stdlib.Result.andThen
  (PACKAGE.Darklang.Stdlib.Result.Result.Error "test")
  (fun x -> PACKAGE.Darklang.Stdlib.Result.Result.Ok 5) = PACKAGE.Darklang.Stdlib.Result.Result.Error
  "test"

PACKAGE.Darklang.Stdlib.Result.andThen
  (PACKAGE.Darklang.Stdlib.Result.Result.Ok 5)
  (fun x -> PACKAGE.Darklang.Stdlib.Result.Result.Error "test") = PACKAGE.Darklang.Stdlib.Result.Result.Error
  "test"

PACKAGE.Darklang.Stdlib.Result.andThen
  (PACKAGE.Darklang.Stdlib.Result.Result.Ok 5)
  (fun x -> PACKAGE.Darklang.Stdlib.Result.Result.Ok(1 + x)) = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  6


PACKAGE.Darklang.Stdlib.Result.collect
  [ PACKAGE.Darklang.Stdlib.Result.Result.Ok 5
    PACKAGE.Darklang.Stdlib.Result.Result.Ok 6
    PACKAGE.Darklang.Stdlib.Result.Result.Ok 7 ] = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  [ 5; 6; 7 ]

PACKAGE.Darklang.Stdlib.Result.collect
  [ PACKAGE.Darklang.Stdlib.Result.Result.Ok 5
    PACKAGE.Darklang.Stdlib.Result.Result.Error "test"
    PACKAGE.Darklang.Stdlib.Result.Result.Ok 7 ] = PACKAGE.Darklang.Stdlib.Result.Result.Error
  "test"

PACKAGE.Darklang.Stdlib.Result.collect
  [ PACKAGE.Darklang.Stdlib.Result.Result.Ok 5
    PACKAGE.Darklang.Stdlib.Result.Result.Error "test"
    PACKAGE.Darklang.Stdlib.Result.Result.Error "test2" ] = PACKAGE.Darklang.Stdlib.Result.Result.Error
  "test"

PACKAGE.Darklang.Stdlib.Result.collect
  [ PACKAGE.Darklang.Stdlib.Result.Result.Error "test"
    PACKAGE.Darklang.Stdlib.Result.Result.Error "test2" ] = PACKAGE.Darklang.Stdlib.Result.Result.Error
  "test"

PACKAGE.Darklang.Stdlib.Result.collect [] = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  []



PACKAGE.Darklang.Stdlib.Result.fromOption (PACKAGE.Darklang.Stdlib.Option.Option.Just 6) "test" = PACKAGE.Darklang.Stdlib.Result.Result.Ok
  6

PACKAGE.Darklang.Stdlib.Result.fromOption PACKAGE.Darklang.Stdlib.Option.Option.Nothing "test" = PACKAGE.Darklang.Stdlib.Result.Result.Error
  "test"

PACKAGE.Darklang.Stdlib.Result.fromOption
  (PACKAGE.Darklang.Stdlib.Option.Option.Just(PACKAGE.Darklang.Stdlib.Result.Result.Error "test"))
  "test" = PACKAGE.Darklang.Stdlib.Result.Result.Ok(
  PACKAGE.Darklang.Stdlib.Result.Result.Error "test"
)

PACKAGE.Darklang.Stdlib.Result.fromOption PACKAGE.Darklang.Stdlib.Option.Option.Nothing (1, 2, 3) = PACKAGE.Darklang.Stdlib.Result.Result.Error((1, 2, 3))

PACKAGE.Darklang.Stdlib.Result.fromOption PACKAGE.Darklang.Stdlib.Option.Option.Nothing PACKAGE.Darklang.Stdlib.Option.Option.Nothing = PACKAGE.Darklang.Stdlib.Result.Result.Error
  PACKAGE.Darklang.Stdlib.Option.Option.Nothing



Result.map2_v0
  (PACKAGE.Darklang.Stdlib.Result.Result.Error "error1")
  (PACKAGE.Darklang.Stdlib.Result.Result.Error "error2")
  (fun (a, b) -> a - b) = PACKAGE.Darklang.Stdlib.Result.Result.Error "error1"

Result.map2_v0
  (PACKAGE.Darklang.Stdlib.Result.Result.Error "error1")
  (PACKAGE.Darklang.Stdlib.Result.Result.Ok 1)
  (fun (a, b) -> a - b) = PACKAGE.Darklang.Stdlib.Result.Result.Error "error1"

Result.map2_v0
  (PACKAGE.Darklang.Stdlib.Result.Result.Ok 10)
  (PACKAGE.Darklang.Stdlib.Result.Result.Error "error2")
  (fun (a, b) -> a - b) = PACKAGE.Darklang.Stdlib.Result.Result.Error "error2"

Result.map2_v0
  (PACKAGE.Darklang.Stdlib.Result.Result.Ok 10)
  (PACKAGE.Darklang.Stdlib.Result.Result.Ok 1)
  (fun (a, b) -> a - b) = PACKAGE.Darklang.Stdlib.Result.Result.Ok 9

Result.map2_v0
  (Test.okWithTypeError "err")
  (PACKAGE.Darklang.Stdlib.Result.Result.Ok 1)
  (fun (a, b) -> a - b) = Test.runtimeError "err"



PACKAGE.Darklang.Stdlib.Result.mapError
  (PACKAGE.Darklang.Stdlib.Result.Result.Error "test")
  (fun x -> String.append x "-appended") = PACKAGE.Darklang.Stdlib.Result.Result.Error
  "test-appended"

PACKAGE.Darklang.Stdlib.Result.mapError
  (PACKAGE.Darklang.Stdlib.Result.Result.Ok 4)
  (fun x -> Int.divide_v0 x 2) = PACKAGE.Darklang.Stdlib.Result.Result.Ok 4


PACKAGE.Darklang.Stdlib.Result.map
  (PACKAGE.Darklang.Stdlib.Result.Result.Error "test")
  (fun x -> Int.divide_v0 x 2) = PACKAGE.Darklang.Stdlib.Result.Result.Error "test"

PACKAGE.Darklang.Stdlib.Result.map
  (PACKAGE.Darklang.Stdlib.Result.Result.Ok 4)
  (fun x -> Int.divide_v0 x 2) = PACKAGE.Darklang.Stdlib.Result.Result.Ok 2



PACKAGE.Darklang.Stdlib.Result.toOption (
  PACKAGE.Darklang.Stdlib.Result.Result.Ok "test"
) = PACKAGE.Darklang.Stdlib.Option.Option.Just "test"

PACKAGE.Darklang.Stdlib.Result.toOption (
  PACKAGE.Darklang.Stdlib.Result.Result.Error "test"
) = PACKAGE.Darklang.Stdlib.Option.Option.Nothing



PACKAGE.Darklang.Stdlib.Result.withDefault_v0
  (PACKAGE.Darklang.Stdlib.Result.Result.Error "test")
  5 = 5

PACKAGE.Darklang.Stdlib.Result.withDefault_v0
  (PACKAGE.Darklang.Stdlib.Result.Result.Ok 6)
  5 = 6