// Tuple2
PACKAGE.Darklang.Stdlib.Tuple2.create "one" 2L = ("one", 2L)
PACKAGE.Darklang.Stdlib.Tuple2.create 1L "two" = (1L, "two")

PACKAGE.Darklang.Stdlib.Tuple2.first ("one", 2L) = "one"
PACKAGE.Darklang.Stdlib.Tuple2.first (1L, "two") = 1L
PACKAGE.Darklang.Stdlib.Tuple2.second ("one", 2L) = 2L
PACKAGE.Darklang.Stdlib.Tuple2.second (1L, "two") = "two"

PACKAGE.Darklang.Stdlib.Tuple2.swap ("one", 2L) = (2L, "one")
PACKAGE.Darklang.Stdlib.Tuple2.swap (1L, "two") = ("two", 1L)

PACKAGE.Darklang.Stdlib.Tuple2.swap (
  PACKAGE.Darklang.Stdlib.Tuple2.swap ("two swaps", "back to original")
) = ("two swaps", "back to original")

PACKAGE.Darklang.Stdlib.Tuple2.mapFirst
  (fun x -> PACKAGE.Darklang.Stdlib.String.toUppercase x)
  ("one", 2L) = ("ONE", 2L)

PACKAGE.Darklang.Stdlib.Tuple2.mapFirst (fun x -> x - 2L) (1L, "two") = (-1L, "two")
PACKAGE.Darklang.Stdlib.Tuple2.mapSecond (fun x -> x - 2L) ("one", 2L) = ("one", 0L)

PACKAGE.Darklang.Stdlib.Tuple2.mapSecond
  (fun x -> PACKAGE.Darklang.Stdlib.String.toUppercase x)
  (1L, "two") = (1L, "TWO")

PACKAGE.Darklang.Stdlib.Tuple2.mapBoth
  (fun x -> PACKAGE.Darklang.Stdlib.String.toUppercase x)
  (fun x -> x - 2L)
  ("one", 2L) = ("ONE", 0L)

PACKAGE.Darklang.Stdlib.Tuple2.mapBoth
  (fun x -> x - 2L)
  (fun x -> PACKAGE.Darklang.Stdlib.String.toUppercase x)
  (1L, "two") = (-1L, "TWO")


// Tuple3
PACKAGE.Darklang.Stdlib.Tuple3.create "one" 2L "pi" = ("one", 2L, "pi")
PACKAGE.Darklang.Stdlib.Tuple3.create 1L "two" 3.14 = (1L, "two", 3.14)

PACKAGE.Darklang.Stdlib.Tuple3.first (1L, "two", 3.14) = 1L
PACKAGE.Darklang.Stdlib.Tuple3.first ("one", 2L, "pi") = "one"
PACKAGE.Darklang.Stdlib.Tuple3.second (1L, "two", 3.14) = "two"
PACKAGE.Darklang.Stdlib.Tuple3.second ("one", 2L, "pi") = 2L
PACKAGE.Darklang.Stdlib.Tuple3.third (1L, "two", 3.14) = 3.14
PACKAGE.Darklang.Stdlib.Tuple3.third ("one", 2L, "pi") = "pi"

PACKAGE.Darklang.Stdlib.Tuple3.mapFirst
  (fun x -> PACKAGE.Darklang.Stdlib.String.toUppercase x)
  ("one", 2L, "pi") = ("ONE", 2L, "pi")

PACKAGE.Darklang.Stdlib.Tuple3.mapFirst (fun x -> x - 2L) (1L, "two", 3.14) = (-1L,
                                                                               "two",
                                                                               3.14)

PACKAGE.Darklang.Stdlib.Tuple3.mapSecond (fun x -> x - 2L) ("one", 2L, "pi") = ("one",
                                                                                0L,
                                                                                "pi")

PACKAGE.Darklang.Stdlib.Tuple3.mapSecond
  (fun x -> PACKAGE.Darklang.Stdlib.String.toUppercase x)
  (1L, "two", 3.14) = (1L, "TWO", 3.14)

PACKAGE.Darklang.Stdlib.Tuple3.mapThird
  (fun x -> PACKAGE.Darklang.Stdlib.String.toUppercase x)
  ("one", 2L, "pi") = ("one", 2L, "PI")

PACKAGE.Darklang.Stdlib.Tuple3.mapThird
  (fun x -> PACKAGE.Darklang.Stdlib.Float.roundDown_v0 x)
  (1L, "two", 3.14) = (1L, "two", 3L)

PACKAGE.Darklang.Stdlib.Tuple3.mapAllThree
  (fun x -> PACKAGE.Darklang.Stdlib.String.toUppercase x)
  (fun x -> x - 2L)
  (fun x -> PACKAGE.Darklang.Stdlib.String.toUppercase x)
  ("one", 2L, "pi") = ("ONE", 0L, "PI")

PACKAGE.Darklang.Stdlib.Tuple3.mapAllThree
  (fun x -> x - 2L)
  (fun x -> PACKAGE.Darklang.Stdlib.String.toUppercase x)
  (fun x -> PACKAGE.Darklang.Stdlib.Float.roundDown_v0 x)
  (1L, "two", 3.14) = (-1L, "TWO", 3L)