// aliases and helpers

type JT = PACKAGE.Darklang.Stdlib.AltJson.JsonToken

type TokenParseError =
  PACKAGE.Darklang.Stdlib.AltJson.TokenParseError.TokenParseError


let tokenParsedOk
  (jt: JT)
  : PACKAGE.Darklang.Stdlib.Result.Result<JT, TokenParseError> =
  PACKAGE.Darklang.Stdlib.Result.Result.Ok jt

let tokenParseError
  (err: TokenParseError)
  : PACKAGE.Darklang.Stdlib.Result.Result<JT, TokenParseError> =
  PACKAGE.Darklang.Stdlib.Result.Result.Error err


// TODO: think - should it be impossible for a JNumber to hold anything that isn't alowed by JSON
// what about huge strings or something? look into the limitations of JSON per the spec
// I mean, just generally (?print and) read the spec - it's only 21 pages

// TODO: the serializer doesn't _have_ to be a builtin... but the parser kinda does, for now
// should we bother taking the parser out of Builtin land? enh

module Null =
  // TODO:
  // - blank
  // - NULL, and other spellings
  // - "unit"
  Builtin.AltJson.serializeToken JT.Null = "null"
  Builtin.AltJson.parseToken "null" = tokenParsedOk JT.Null


module Bool =
  // TODO:
  // - 0, 1,
  // - TRUE, other spellings
  Builtin.AltJson.serializeToken (JT.Bool true) = "true"
  Builtin.AltJson.serializeToken (JT.Bool false) = "false"
  Builtin.AltJson.parseToken "true" = tokenParsedOk (JT.Bool true)
  Builtin.AltJson.parseToken "false" = tokenParsedOk (JT.Bool false)


module Number =
  // TODO:
  // - (+/-) infinity
  // - NaN
  // - huge numbers
  // - negative numbers
  // - other notation
  Builtin.AltJson.serializeToken (JT.Number 0.0) = "0" // TODO: any reason we need to make this `0.0`?
  Builtin.AltJson.parseToken "0" = tokenParsedOk (JT.Number 0.0)


module String =
  // TODO:
  // - `hi` (without quotes) -> err
  // - strings with quotes in them
  // - ' instead of "
  Builtin.AltJson.serializeToken (JT.String "hi") = "\"hi\""
  Builtin.AltJson.parseToken "\"hi\"" = tokenParsedOk (JT.String "hi")
  Builtin.AltJson.parseToken "hi" = tokenParseError TokenParseError.NotJson


module Array =
  // TODO:
  // - nested
  // - huge
  // - inconsistent types
  Builtin.AltJson.serializeToken (JT.Array []) = "[]"
  Builtin.AltJson.parseToken "[]" = tokenParsedOk (JT.Array [])

  Builtin.AltJson.serializeToken (JT.Array [ JT.Null ]) = "[null]"
  Builtin.AltJson.parseToken "[ null ]" = tokenParsedOk (JT.Array [ JT.Null ])


module Object =
  // TODO:
  // - empty
  // - dupe keys
  // - blank keys
  // - keys with newlines
  // - keys that are generally the same, but not by case
  // - keys not in quotes
  // - keys in single quotes
  // - non-string keys
  Builtin.AltJson.serializeToken (JT.Object [ ("n", JT.Null) ]) = """{"n":null}"""

  Builtin.AltJson.parseToken """{ "n": null }""" = tokenParsedOk (
    JT.Object[("n", JT.Null)]
  )