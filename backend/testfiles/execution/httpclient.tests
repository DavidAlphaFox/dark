// Most of the httpclient tests are in testfiles/httpclient.

// -----------------------
// Tests that don't use the internet
// -----------------------

HttpClient.formContentType_v0 = Dict {``Content-Type`` = "application/x-www-form-urlencoded"}

HttpClient.jsonContentType_v0 = Dict {``Content-Type`` = "application/json; charset=utf-8"}

HttpClient.plainTextContentType_v0 = Dict {``Content-Type`` = "text/plain; charset=utf-8"}

HttpClient.htmlContentType_v0 = Dict {``Content-Type`` = "text/html; charset=utf-8" }

HttpClient.bearerToken "YWxhZGRpbjpvcGVuc2VzYW1l" = Dict { Authorization = "Bearer YWxhZGRpbjpvcGVuc2VzYW1l"}

HttpClient.basicAuth "username" "password" = Dict { Authorization = "Basic dXNlcm5hbWU6cGFzc3dvcmQ=" }
HttpClient.basicAuth "" "" = Dict { Authorization = "Basic Og==" }
HttpClient.basicAuth "-" "" = Test.typeError_v0 "Username cannot contain a hyphen"
HttpClient.basicAuth "" "-" = Dict { Authorization = "Basic Oi0=" }
HttpClient.basicAuth ":" "" = Dict { Authorization = "Basic Ojo=" }
HttpClient.basicAuth "" ":" = Dict { Authorization = "Basic Ojo=" }


// Tests that try to make requests to the internet

// type errors for bad `headers` are OK
HttpClient.request "get" "https://darklang.com" [1] Bytes.empty = Test.typeError_v0 "Expected request headers to be a `List<String*String>`, but got: 1"
HttpClient.request "get" "https://darklang.com" [("", "")] Bytes.empty = Error "Empty request header key provided"

// type errors for bad `method` are OK
HttpClient.request "" "https://darklang.com" [] Bytes.empty = Error "Expected valid HTTP method (e.g. 'get' or 'POST')"
HttpClient.request " get " "https://darklang.com" [] Bytes.empty = Error "Expected valid HTTP method (e.g. 'get' or 'POST')"
HttpClient.request "ðŸ‡µðŸ‡·" "https://darklang.com" [] Bytes.empty = Error "Expected valid HTTP method (e.g. 'get' or 'POST')"

// unsupported protocols
HttpClient.request "get" "ftp://darklang.com" [] Bytes.empty = Error "Bad URL: Unsupported Protocol"
HttpClient.request "put" "file:///etc/passwd" [] Bytes.empty = Error"Bad URL: Unsupported Protocol"
HttpClient.request "put" "/just-a-path" [] Bytes.empty = Error "Bad URL: Unsupported Protocol"

// totally bogus URLs
HttpClient.request "get" "" [] Bytes.empty = Error "Bad URL: Invalid URI"
HttpClient.request "post" "{ ] nonsense ^#( :" [] Bytes.empty = Error "Bad URL: Invalid URI"

// basic requests work
((HttpClient.request "get" "https://example.com" [] Bytes.empty) |> Result.map (fun response -> response.statusCode)) = Ok 200
((HttpClient.request "get" "http://example.com" [] Bytes.empty) |> Result.map (fun response -> response.statusCode)) = Ok 200

// URLs we can't actually communicate with
HttpClient.request "get" "http://google.com:79" [] Bytes.empty = Error "Request timed out"

// Check for banned urls in the host name
HttpClient.request "get" "http://localhost" [] Bytes.empty = Error
  "Bad URL: Invalid host"

// TODO : check ipv6

HttpClient.request "get" "localhost" [] Bytes.empty = Error "Bad URL: Invalid URI"

HttpClient.request "get" "http://0.0.0.0" [] Bytes.empty =
  Error "Bad URL: Invalid host"
HttpClient.request "get" "http://localhost" [] Bytes.empty =
  Error "Bad URL: Invalid host"
HttpClient.request "get" "http://0" [] Bytes.empty =
  Error "Bad URL: Invalid host"

HttpClient.request "get" "http://169.254.169.254" [] Bytes.empty =
  Error "Bad URL: Invalid host"

HttpClient.request "get" "http://metadata.google.internal" [] Bytes.empty =
  Error "Bad URL: Invalid host"

// Check for sneaky banned urls - blocked via connection callback
// 127.0.0.1
HttpClient.request "get" "http://localtest.me" [] Bytes.empty = Error "Connection refused (localtest.me:80) Connection refused"
// 0.0.0.0
HttpClient.request "get" "http://c.cx" [] Bytes.empty = Error "Connection refused (c.cx:80) Connection refused"

// bad ssl
HttpClient.request "get" "http://thenonexistingurlforsure.com" [] Bytes.empty = Error "Name or service not known (thenonexistingurlforsure.com:80) Name or service not known"
HttpClient.request "get" "https://self-signed.badssl.com" [] Bytes.empty = Error "The SSL connection could not be established, see inner exception. The remote certificate is invalid because of errors in the certificate chain: UntrustedRoot"

// invalid headers
HttpClient.request "get" "http://google.com" [("Metadata-Flavor", "Google") ] Bytes.empty = Error
  "Bad URL: Invalid request"
HttpClient.request "get" "http://google.com" [("metadata-flavor", "Google") ] Bytes.empty = Error
  "Bad URL: Invalid request"
HttpClient.request "get" "http://google.com" [("Metadata-Flavor", " Google ") ] Bytes.empty = Error
  "Bad URL: Invalid request"

// Basic request works including headers
(let response = (HttpClient.request "get" "https://httpbin.org/status/200" [] Bytes.empty) |> Test.unwrap
 let respHeaders = response.headers |> List.filter(fun h -> Tuple2.first h != "date")
 Record.set_v0 response "headers" respHeaders) =
   HttpClient.Response
    { statusCode = 200
      headers =
        [
          ("server", "gunicorn/19.9.0")
          ("access-control-allow-origin", "*")
          ("access-control-allow-credentials", "true")
          ("content-type", "text/html; charset=utf-8")
          ("content-length", "0")
        ]
      body = Bytes.empty }

// TODO: http2, http3