// ---------------------------
// Basic interpreter execution
// ---------------------------

module Float =
  Test.nan != Test.nan = true
  Float.multiply -0.0 -1.0 = 0.0
  Float.multiply 6.02e22 -10.0 = -6.02e23

module Let =
  (let x = Test.typeError_v0 "a" in 5) = Test.typeError "a"
  (let x = Test.typeError_v0 "a" in Test.typeError_v0 "b") = Test.typeError_v0 "a"
  (let x = 5 in x) = 5
  (let x = 5 in let x = 6 in x) = 6

  (let (a, b) = (1, 2) in 2) = 2
  (let (a, b) = (1, 2) in b) = 2
  (let (a, b) = (1, 2) in (b, a)) = (2, 1)
  (let (d, d) = (2, 1) in d) = 1
  (let (_, _) = (1, 2) in 2) = 2

  (let (a, b, c) = (1, 2, 3) in b) = 2
  (let (a, b, c) = (1, 2, 3) in (b, a)) = (2, 1)
  (let (d, d, d) = (2, 1, 3) in d) = 3
  (let (_, _, _) = (1, 2, 3) in 2) = 2

  (let (_, _, _) = (1, 2, Test.typeError_v0 "test") in 2) = Test.typeError_v0 "test"
  (let (_, _, _) = (Test.typeError_v0 "test1", 2, Test.typeError_v0 "test2") in 2) = Test.typeError_v0 "test1"

  // With multiple levels of nested destructuring
  (let ((a, ((b, (c, d)), e)), f) = ((1, ((2, (3, 4)), 5)), 6) in c) =3
  (let ((a, ((b, cd), e)), f) = ((1, ((2, (3, 4)), 5)), 6) in cd) = (3, 4)


module Lists =
  [] = []
  [1] = [1]
  [1; 2] = [1; 2]
  [ 5; Int.add_v0 1 5; 0 ] = [5; 6; 0]
  [ 5; Test.typeError_v0 "test"; 0 ] = Test.typeError_v0 "test"
  [ 5; Test.typeError_v0 "1"; Test.typeError_v0 "2" ] = Test.typeError_v0 "1"

module Tuple =
  (1,2) = (1,2)
  (1,2,3) = (1,2,3)
  (1, 2+3, 4) = (1, 5, 4)
  // note: there is no upper limit set on Tuple size
  (1, 2, 3, 4, 5, 6, 7, 8, 9) = (1, 2, 3, 4, 5, 6, 7, 8, 9)
  (1, Test.typeError_v0 "test", 3) = Test.typeError_v0 "test"
  (1, Test.typeError_v0 "error1", Test.typeError_v0 "error2") = Test.typeError_v0 "error1"


module Records =
  type Cols1 = { col1 : Int }
  type Cols2 = { col1 : Int; col2 : Int }
  type AnEnum = | A | B | C

  Cols1 { col1 = 1 ; col1 = 2 } = Cols1 { col1 = 2 }
  Cols2 { col1 = 1 ; col2 = 3 } = Cols2 { col1 = 1 ; col2 = 3 }
  Cols2 { col1 = 2 ; col2 = Test.typeError_v0 "test" } = Test.typeError_v0 "test"

  // Invalid column contents
  Cols2 { col1 = 2 ; ___ = 3 } = Test.typeError "Unexpected field `` in Cols2_v0"
  Cols2 { col1 = 2 } = Test.typeError "Missing key `col2` in Cols2_v0"
  Cols2 { col1 = 2; other = 3 } = Test.typeError "Unexpected field `other` in Cols2_v0"
  Cols2 { col1 = 2; col2 = 3; col3 = 4 } = Test.typeError "Unexpected field `col3` in Cols2_v0"
  Cols1 { col1 = "" } = Test.typeError "Expected a value of type `Int` but got a `String`"

  // Invalid type
  MyNonExistantType { col1 = 2 } = Test.typeError "There is no type named `MyNonExistantType_v0`"
  AnEnum { col1 = 2 } = Test.typeError "Expected a record but AnEnum_v0 is an enum"

  module Polymorphism =
    type MyRecord<'a> = { col1 : 'a; col2 : Int }
    (MyRecord { col1 = (); col2 = 1 }).col2 = 1
    (MyRecord { col1 = Just(Ok 1); col2 = 1 }).col1 = Just(Ok 1)

  module Nested =
    type NestedRecordA = { col1 : Int }
    type NestedRecordB = { col1 : NestedRecordA }
    (NestedRecordB { col1 = NestedRecordA { col1 = 1 } }).col1.col1 = 1



module Enums =
  Nothing = Nothing
  ((List.head []) == Nothing) = true
  (List.head []) = Nothing
  Ok (Test.typeError_v0 "err") = Test.typeError_v0 "err"
  Just (Test.typeError_v0 "err") = Test.typeError_v0 "err"
  Error (Test.typeError_v0 "err") = Test.typeError_v0 "err"

  module Errors =
    module Builtins =
      Nothing 5 = Test.typeError "Option.Nothing expects 0 arguments but got 1"
      Just(5,6) = Test.typeError "Option.Just expects 1 argument but got 2"
      Ok(5,6) = Test.typeError "Result.Ok expects 1 argument but got 2"
      Error(5,6) = Test.typeError "Result.Error expects 1 argument but got 2"

    module User =
      type MyEnum = | A | B | C of String
      MyEnum.D = Test.typeError "There is no case named `D` in MyEnum_v0"
      MyEnum.C = Test.typeError "Case `C` expected 1 fields but got 0"
      MyEnum.B 5 = Test.typeError "Case `B` expected 0 fields but got 1"
      (match MyEnum.C "test" with | C v -> v) = "test"
      // TYPESCLEANUP
      // (match MyEnum.C "test" with | C -> v) = Test.typeError "TODO"
      // (match MyEnum.C "test" with | D -> "ok" | C _ -> v) = Test.typeError "TODO"
      // (match MyEnum.C "test" with | 5 -> "ok" | C _ -> v) = Test.typeError "TODO"
      (MyEnum.C 5) = Test.typeError "Expected a value of type `String` but got a `Int`"


  module Simple =
    type AorB = A | B

    (let a = AorB.A
     let b = AorB.B
     a == b) = false

    (let a1 = AorB.A
     let a2 = AorB.A
     a1 == a2) = true

    (AorB.A == AorB.A) = true
    (AorB.A == AorB.B) = false
    List.unique_v0 [AorB.A; AorB.B; AorB.A; AorB.A; AorB.B] = [AorB.A; AorB.B]

    module EnumReference =
      type CorD = | C of Int | D of AorB
      (CorD.C 5 != CorD.D(AorB.B)) = true
      (CorD.D(AorB.A) == CorD.D(AorB.A)) = true

  module MixedCases =
    type EnumOfMixedCases =
      | W | X of String | Y of i: Int | Z of c: String * i: Int

    (EnumOfMixedCases.W == (EnumOfMixedCases.Y 1)) = false
    (EnumOfMixedCases.Y 1 == EnumOfMixedCases.Y 1) = true

    EnumOfMixedCases.X 1 = Test.typeError "Expected a value of type `String` but got a `Int`"
    EnumOfMixedCases.Y "test" = Test.typeError "Expected a value of type `Int` but got a `String`"
    EnumOfMixedCases.Z 1 = Test.typeError "Case `Z` expected 2 fields but got 1"

    (let values = [EnumOfMixedCases.W;
                   EnumOfMixedCases.X "testX";
                   EnumOfMixedCases.Y(5);
                   EnumOfMixedCases.Z("testZ", 2)]
    match List.getAt_v1 values 3 with
    | Just z -> Ok z
    | Nothing -> Error "Failure") = Ok (EnumOfMixedCases.Z ("testZ", 2))

    ([EnumOfMixedCases.W; EnumOfMixedCases.X "testX"; EnumOfMixedCases.Y(5); EnumOfMixedCases.Z("testZ", 2)]
     |> List.map_v0(fun v ->
      match v with
      | EnumOfMixedCases.X s -> "X " ++ s
      | EnumOfMixedCases.Z (s, _i) -> "Z " ++ s
      | EnumOfMixedCases.Y y -> "Y " ++ (Int.toString_v0 y)
      | EnumOfMixedCases.W -> "a simple W")
    ) = ["a simple W"; "X testX"; "Y 5"; "Z testZ"]

  module TuplesVsNonTuples =
    type Tuples = NotTuple of String * Int | Tuple of (String * Int)

    (match Tuples.NotTuple("printer broke", 7) with
    | NotTuple(reason, 7) -> reason) = "printer broke"
    (Tuples.NotTuple(("printer broke", 7))) = Test.typeError "Case `NotTuple` expected 2 fields but got 1"

    (match Tuples.Tuple(("printer broke", 7)) with
    | Tuple((reason, 7)) -> reason) = "printer broke"

    Tuples.Tuple("printer broke", 7) = Test.typeError "Case `Tuple` expected 1 fields but got 2"


  module Recursive =
    type Tree = | Leaf | Node of Tree * Tree
    Tree.Node(Tree.Leaf, Tree.Leaf) = Tree.Node(Tree.Leaf, Tree.Leaf)
    (Tree.Node(Tree.Leaf, Tree.Leaf) == Tree.Node(Tree.Leaf, Tree.Node(Tree.Leaf, Tree.Leaf))) = false

  module Polymorphism =
    // Define a red-black tree
    type Color = | Red | Black
    type RBTree<'a> =
      | Empty
      | Node of color: Color * left: RBTree<'a> * value: 'a * right: RBTree<'a>

    let singleton (value: 'a) : RBTree<'a> =
      RBTree.Node(Color.Red, RBTree.Empty, value, RBTree.Empty)

    let insert' (tree: RBTree<'a>) (value: 'a) (cmp : ('a * 'a) -> Int) : RBTree<'a> =
      match tree with
      | RBTree.Empty -> singleton value
      | RBTree.Node(color, left, v, right) ->
        // CLEANUP we should allow cmp to call two arguments, and not use a weird
        // tuple-pipe thing
        let c = (value, v) |> cmp
        if c < 0 then
          RBTree.Node(color, insert' left value cmp, v, right)
        elif c > 0 then
          RBTree.Node(color, left, v, insert' right value cmp)
        else
          RBTree.Node(color, left, value, right)

    let insert (tree: RBTree<'a>) (value: 'a) (cmp : ('a * 'a) -> Int) : RBTree<'a> =
      insert' tree value cmp

    let ofList (values: List<'a>) (cmp : ('a * 'a) -> Int) : RBTree<'a> =
      List.fold_v0 values RBTree.Empty (fun tree value -> insert tree value cmp)

    let toList' (tree: RBTree<'a>) (acc: List<'a>) : List<'a> =
      match tree with
      | RBTree.Empty -> acc
      | RBTree.Node(_, left, value, right) -> toList' left (List.push (toList' right acc) value)

    let toList (tree: RBTree<'a>) : List<'a> =
      toList' tree []

    // CLEANUP: tuples should allow destructuring
    (let intCmp = fun pair ->
                    let (x, y) = pair
                    if x < y then -1
                    elif x > y then 1
                    else 0

     ([1;-2;5;3] |> ofList intCmp |> toList) ==
      ([3;5;-2;1] |> ofList intCmp |> toList)) = true


module FieldAccess =
  type MyRecord = { col1: Int }

  (let x = MyRecord { col1 = 1 } in x.col1) = 1
  (let x = MyRecord { col1 = 1 } in x.___) = Test.typeError "Field name is empty"
  (let x = MyRecord { col1 = 1 } in x.fieldName) = Test.typeError "No field named fieldName in record"
  (Test.typeError_v0 "error").fieldName = Test.typeError_v0 "error"
  (let x = 6 in x.fieldName) = Test.typeError_v0 "Attempting to access a field of something that isn't a record or dict, (it's a Int)."

module Variable =
  myvar = Test.typeError_v0 "There is no variable named: myvar"
  (let x = 5 in x) = 5

module Dict =
  ((Dict { a = 5 }) |> Dict.get_v2 "a") = Just 5
  ((Dict { ___ = 5 }) |> Dict.get_v2 "") = Just 5
  ((Dict { a = 5 }) |> Dict.get_v2 "b") = Nothing


module InterpolatedString =
  $"""test {"1"}""" = "test 1"
  (let one = "1" in  $"test {one}") = "test 1"
  (let one = 1.0 in  $"test {one}") = Test.typeError_v0 "Expected string, got 1.0"
  (let one = 1 in  $"test {one}") = Test.typeError_v0 "Expected string, got 1"
  (let name = "John" in let age = "30" in $"Name: {name}, Age: {age} years old.") = "Name: John, Age: 30 years old."
  (let two = 2 in "test 1" == $"test {one}") = Test.typeError_v0 "There is no variable named: one"

module FnCall =
  5 + 3 = 8
  5 + (Test.typeError_v0 "error") = Test.typeError_v0 "error"
  (Test.typeError_v0 "error") + 5 = Test.typeError_v0 "error"
  (Test.typeError_v0 "one") + (Test.typeError_v0 "two") = Test.typeError_v0 "one" // CLEANUP
  "xx" ++ "yy" = "xxyy"
  (5 + (3)) = 8
  Int.add_v0 5 3 = 8


module If =
  (if true then "correct" else 0) = "correct"
  (if true then Test.typeError_v0 "a" else 0) = Test.typeError_v0 "a"
  (if false then 0 else Test.typeError_v0 "a") = Test.typeError_v0 "a"
  (if false then Test.typeError_v0 "a" else 0) = 0
  (if true then 0 else Test.typeError_v0 "a") = 0
  (if false then "" else "correct") = "correct"
  (if () then "" else "") = Test.typeError_v0 "If only supports Booleans"
  (if Test.typeError_v0 "msg" then "" else "") = Test.typeError_v0 "msg"
  (if 5 then "" else "") = Test.typeError_v0 "If only supports Booleans"

module And =
  (true && true) = true
  (true && false) = false
  (false && true) = false
  (false && false) = false
  (true && Test.typeError_v0 "msg") = Test.typeError_v0 "msg"
  (true && 5) = Test.typeError_v0 "&& only supports Booleans"
  (false && Test.typeError_v0 "msg") = false
  (false && 5) = false
  (Test.typeError_v0 "msg" && Test.typeError_v0 "msg") = Test.typeError_v0 "msg"
  (5 && true) = Test.typeError_v0 "&& only supports Booleans"
  (true |> (&&) true) = true
  (true |> (&&) false) = false
  (false |> (&&) true) = false
  (false |> (&&) false) = false


module Or =
  (true || true) = true
  (true || false) = true
  (false || true) = true
  (false || false) = false
  (true || Test.typeError_v0 "msg") = true
  (true || 5) = true
  (false || Test.typeError_v0 "msg") = Test.typeError_v0 "msg"
  (false || 5) = Test.typeError_v0 "|| only supports Booleans"
  (Test.typeError_v0 "msg1" || Test.typeError_v0 "msg2") = Test.typeError_v0 "msg1"
  (5 || true) = Test.typeError_v0 "|| only supports Booleans"
  (true |> (||) true) = true
  (true |> (||) false) = true
  (false |> (||) true) = true
  (false |> (||) false) = false


module Lambdas =
  List.push_v0 [] (fun x -> -4.611686018e+18) = [(fun x -> -4.611686018e+18)]
  (let y = (fun x ___ -> x + 1) in List.map_v0 [1;2;3;4] y) = [ 2; 3; 4; 5 ]
  (let y = (fun x -> x + 1) in List.map_v0 [1;2;3;4] y) = [ 2; 3; 4; 5 ]
  (let y = (fun msg -> Test.typeError msg) in List.map_v0 ["1";"2";"3";"4"] y) = Test.typeError "1"
  (let y = (fun msg -> Test.typeError msg) in List.map_v0 [] y) = []
  // (let y = (fun a b -> a + b) in y 2 3) = 5 // TODO: allow
  (let y = (fun a b -> a * b) in List.fold_v0 [1; 2; 3; 4] 1 y) = 24
  (List.fold_v0 [4] 1 5) = Test.typeError_v0 "List.fold was expected to be called with a `Function` in fn, but was actually called with 5."
  (List.fold_v0 [4] 1 (Test.typeError "test")) = Test.typeError "test"

  (let x = 5 in
  let y = (fun c -> x + c) in
  let x = 6 in
  [1; 2; 3; 4] |> List.map_v0 y) = [ 6; 7; 8; 9 ]

  (String.join_v0
    (List.map_v0
      (String.toList_v1 "some string")
      (fun var -> String.toUppercase_v1 (String.fromChar_v1 var))) "") = "SOME STRING"

  (let y = (fun c -> if c > 2 then Test.typeError_v0 "err" else 18) in
   [1; 2; 3; 4] |> List.map_v0 y) = Test.typeError_v0 "err"


module Pipes =
  let userFn () : Int = 6

  ([] |> List.push_v0 2) = [2]
  ([] |> List.push_v0 (Test.typeError_v0 "err")) = Test.typeError_v0 "err"
  // ([] |> List.push_v0 2 |> (Test.typeError_v0 "err")) = Test.typeError_v0 "err" // CLEANUP
  // ([] |> (Test.typeError_v0 "err")) = Test.typeError_v0 "err" // CLEANUP
  ((Test.typeError_v0 "err") |> []) = Test.typeError_v0 "Expected a function value, got something else: []"
  // ((Test.typeError_v0 "one") |> (Test.typeError_v0 "two")) = Test.typeError_v0 "one"

  ([5]
  |> List.head
  |> Test.unwrap
  |> Int.add_v0 1
  |> (+) 3
  |> (fun x -> if (x + 4) > 1 then x else (1 + x))) = 9

  // variable
  (let x = fun a -> a + 1 in
  (5
  |> x
  |> x
  |> (+) 3)) = 10

  // function
  (() |> userFn) = 6


module Match =
  (match 6 with | 5 -> "fail" | 6 -> "pass" | var -> "fail") = "pass"
  (match "x" with | "y" -> "fail" | "x" -> "pass" | var -> "fail") = "pass"
  (match true with | false -> "fail" | true -> "pass" | var -> "fail") = "pass"
  (match 2.0 with | 1.0 -> "fail" | 2.0 -> "pass" | var -> "fail") = "pass"
  (match () with | () -> "pass" | var -> "fail") = "pass"
  (match 999999999999999I with | 0 -> "fail" | 999999999999999I -> "pass") = "pass"
  (match [] with | [i] -> "fail" | [] -> "pass" | [i;j] -> "fail") = "pass"
  (match [1] with | [] -> "fail" | [i] -> "pass" | [i;j] -> "fail") = "pass"
  (match [1;2] with | [] -> "fail" | [i;j] -> "pass" | [i] -> "fail") = "pass"

  // Errors
  (match "nothing matches" with | "not this" -> "fail") = Test.typeError "No match"
  (match Test.typeError_v0 "cond is error" with | 5 -> "fail" | 6 -> "pass" | var -> "fail") = Test.typeError_v0 "cond is error"
  (match Test.typeError_v0 "cond is error, wildcard" with | 5 -> 5 | _ -> 6) = Test.typeError_v0 "cond is error, wildcard"
  (match 1 with | 1 -> Test.typeError_v0 "a" | 6 -> "pass" | var -> "fail") = Test.typeError_v0 "a"
  (match 1 with | 2 -> Test.typeError_v0 "a" | 1 -> "pass" | var -> "fail") = "pass"
  (match 1 with | 1 -> "pass" | 6 -> Test.typeError_v0 "a" | var -> "fail") = "pass"
  (match 1 with | 2 -> "pass" | 1 -> Test.typeError_v0 "a" | var -> "fail") = Test.typeError_v0 "a"
  (match 3 with | 2 -> "pass" | 1 -> Test.typeError_v0 "a" | var -> "pass") = "pass"

  // int
  (match 5 with
  | 5.6 -> "float"
  | false -> "bool"
  | "myStr" -> "string"
  | () -> "()"
  | Ok x -> "ok: " ++ x
  | Nothing -> "constructor nothing"
  | 5 -> "int"
  | (1, 2) -> "1 and 2"
  | [i] -> "list:" ++ i
  | name -> name ++ "var") = "int"

  // float
  (match 5.6 with
  | 5 -> "int"
  | false -> "bool"
  | "myStr" -> "string"
  | () -> "()"
  | Ok x -> "ok: " ++ x
  | Nothing -> "constructor nothing"
  | 5.6 -> "float"
  | (1, 2) -> "1 and 2"
  | [i] -> "list:" ++ i
  | name -> name ++ "var") = "float"

  // float 2
  (match 1.1 with
  | 5 -> "int"
  | false -> "bool"
  | "myStr" -> "string"
  | () -> "()"
  | Ok x -> "ok: " ++ x
  | Nothing -> "constructor nothing"
  | 1.1 -> "float"
  | (1, 2) -> "1 and 2"
  | [i] -> "list:" ++ i
  | name -> name ++ "var") = "float"

  // bool
  (match false with
  | 5 -> "int"
  | 5.6 -> "float"
  | "myStr" -> "string"
  | () -> "()"
  | Ok x -> "ok: " ++ x
  | Nothing -> "constructor nothing"
  | false -> "bool"
  | (1, 2) -> "1 and 2"
  | [i] -> "list:" ++ i
  | name -> name ++ "var") = "bool"

  // string
  (match "myStr" with
  | 5 -> "int"
  | 5.6 -> "float"
  | false -> "bool"
  | () -> "()"
  | Ok x -> "ok: " ++ x
  | Nothing -> "constructor nothing"
  | "myStr" -> "string"
  | (1, 2) -> "1 and 2"
  | [i] -> "list:" ++ i
  | name -> name ++ "var") = "string"

  // string 2string 2string 2string 2
  (match "otherStr" with
  | 5 -> "int"
  | 5.6 -> "float"
  | false -> "bool"
  | "myStr" -> "string"
  | () -> "()"
  | Ok x -> "ok: " ++ x
  | Nothing -> "constructor nothing"
  | (1, 2) -> "1 and 2"
  | [i] -> "list:" ++ i
  | name -> name ++ "var") = "otherStrvar"

  // ()
  (match () with
  | 5 -> "int"
  | 5.6 -> "float"
  | false -> "bool"
  | "myStr" -> "string"
  | Ok x -> "ok: " ++ x
  | Nothing -> "constructor nothing"
  | () -> "()"
  | (1, 2) -> "1 and 2"
  | [i] -> "list:" ++ i
  | name -> name ++ "var") = "()"

  // constructor with arg
  (match Ok "x" with
  | 5 -> "int"
  | 5.6 -> "float"
  | false -> "bool"
  | "myStr" -> "string"
  | () -> "()"
  | Nothing -> "constructor nothing"
  | Ok x -> "ok: " ++ x
  | (1, 2) -> "1 and 2"
  | [i] -> "list:" ++ i
  | name -> name ++ "var") = "ok: x"

  // simple tuple
  (let tpl = (1, 2) in
  match tpl with
  | 5 -> "int"
  | 5.6 -> "float"
  | false -> "bool"
  | "myStr" -> "string"
  | () -> "()"
  | Nothing -> "constructor nothing"
  | [i] -> "list:" ++ i
  | (1, 1) -> "1 and 1"
  | (1, 2) -> "1 and 2"
  | (2, 2) -> "2 and 2"
  | name -> name ++ "var") = "1 and 2"

  // nested tuple
  (let tpl = (1, 2, (Ok 1, "four"), 5) in
  match tpl with
  | 5 -> "int"
  | 5.6 -> "float"
  | false -> "bool"
  | "myStr" -> "string"
  | () -> "()"
  | Nothing -> "constructor nothing"
  | [i] -> "list:" ++ i
  | (1, 1) -> "1 and 1"
  | (1, 2, (Ok "one", "four"), 5) -> "non-matching pattern chosen"
  | (1, 2, (Ok 1, "four"), 5) -> "correct pattern matched"
  | (1, 2, (Ok 1, x), 5) -> "wrong matching pattern chosen"
  | (2, 2) -> "2 and 2"
  | name -> name ++ "var") = "correct pattern matched"

  // nested list
  (let lst = [[1; 2]; [3; 4]; [5]] in
   match lst with
   | 5 -> "int"
   | 5.6 -> "float"
   | false -> "bool"
   | "myStr" -> "string"
   | () -> "()"
   | Nothing -> "constructor nothing"
   | [i] -> "list:" ++ i
   | [[1; 2]; [3; 4]; [5]] -> "correct pattern matched"
   | [[1; 2]; [3; 4]; [5; 6]] -> "wrong matching pattern chosen"
   | name -> name ++ "var") = "correct pattern matched"


  // duplicate tuple variables
  (let tpl = (1, 2, (3, 4), 5) in
  match tpl with
  | (a, b, (a, b), a) -> (a, b)
  | name -> name ++ "var") = (5, 4)

  // duplicate list variables
  (match [1; 2; 5] with
   | [a; a; a] -> a
   | name -> name ++ "var") = 5

  // empty constructor
  (match Nothing with
  | 5 -> "int"
  | 5.6 -> "float"
  | false -> "bool"
  | "myStr" -> "string"
  | () -> "()"
  | Ok x -> "ok: " ++ x
  | Nothing -> "constructor nothing"
  | [i] -> "list:" ++ i
  | (1, 2) -> "1 and 2"
  | name -> name ++ "var") = "constructor nothing"

  // wildcard match
  (match "not matched: " with
  | 5 -> "int"
  | 5.6 -> "float"
  | false -> "bool"
  | "myStr" -> "string"
  | () -> "()"
  | Ok x -> "ok: " ++ x
  | Nothing -> "constructor nothing"
  | [i] -> "list:" ++ i
  | (1, 2) -> "1 and 2"
  | name -> name ++ "var") = "not matched: var"

  (match "not matched: " with
  | 5 -> "int"
  | 5.6 -> "float"
  | false -> "bool"
  | "myStr" -> "string"
  | () -> "()"
  | Ok x -> "ok: " ++ x
  | [i] -> "list:" ++ i
  | (1, 2) -> "1 and 2"
  | Nothing -> "constructor nothing") = Test.typeError "No match"



module Error =
  List.map_v0 [1;2;3;4;5] (fun x y -> x) = Test.typeError_v0 "Expected 2 arguments, got 1"
  Option.map2_v0 (Just 10) "not an option" (fun (a,b) -> "1") = Test.typeError_v0 "Option.map2 was expected to be called with a `Option<'b>` in option2, but was actually called with \"not an option\"."

module ErrorPropagation =
  type EPRec = { i: Int; m: Int; j: Int; n: Int }
  List.head (Test.typeError_v0 "test") = Test.typeError_v0 "test"
  (if Test.typeError_v0 "test" then 5 else 6) = Test.typeError_v0 "test"
  (List.head (Test.typeError_v0 "test")).field = Test.typeError_v0 "test"
  [ 5; 6; List.head (Test.typeError_v0 "test") ] = Test.typeError_v0 "test"
  [ 5; 6; Test.typeError_v0 "test"] = Test.typeError_v0 "test"
  EPRec { i = Test.typeError_v0 "1"; m = 5; j = List.head (Test.typeError_v0 "2"); n = 6 } = Test.typeError_v0 "1"
  5 |> (+) (Test.typeError_v0 "test") |> (+) 3564 = Test.typeError_v0 "test"
  5 |> (+) (Test.typeError_v0 "test") = Test.typeError_v0 "test"
  ("test" |> Test.typeError_v0) = Test.typeError_v0 "test"
  Just (Test.typeError_v0 "test") = Test.typeError_v0 "test"
  Error (Test.typeError_v0 "test") = Test.typeError_v0 "test"
  Ok (Test.typeError_v0 "test") = Test.typeError_v0 "test"


  // pipe into error
  ("test" |> Test.typeError_v0 |> (++) "3") = Test.typeError "test"


// ---------------------------
// Shadowing
// ---------------------------
module Shadowing =
  (let x = 5 in let x = 6 in x) = 6
  (let x = 35 in (match 6 with | x -> x)) = 6
  (let x = 35 in (match Ok 6 with | Ok x -> x)) = 6
  (let x = 35 in List.map_v0 [1;2;3;4] (fun x -> x + 2)) = [ 3; 4; 5; 6 ]
  (let x = 35 in (match Ok 6 with | Ok x -> (List.map_v0 [1; 2; 3; 4] (fun x -> x + 2)))) = [ 3; 4; 5; 6]
  (List.map_v0 [1;2;3;4] (fun x -> (let x = 35 in (match Ok 6 with | Ok x -> x + 2)))) = [ 8; 8; 8; 8 ]
  (List.map_v0 [1;2;3;4] (fun x -> (match Ok 6 with | Ok x -> let x = 9 in x + 2))) = [ 11; 11; 11; 11 ]
  (List.map_v0 [1;2;3;4] (fun x -> (match Ok (Ok 6) with | Ok (Ok x) -> let x = 9 in x + 2))) = [ 11; 11; 11; 11 ]


// ---------------------------
// DarkInternal tests are internal
// ---------------------------
module Darkinternal =
 (let _ = Test.setExpectedExceptionCount 1 in
  DarkInternal.Infra.SchedulingRule.list) = Test.typeError_v0 "Unknown error"

// ---------------------------
// Equality
// ---------------------------

module Equality =
  type ERec = { x: Int; y: Int }
  type EEnum = | E1 | E2 | E3 of Int
  (5 == 5) = true
  (5 != 6) = true
  (5.6 == 5.6) = true
  (-55555555555555555555555555555.5 == -55555555555555555555555555555.5) = true
  (5.6 != 5.7) = true
  (5.7 != 6) = Test.typeError_v0 "Both values must be the same type"
  (5.7 != 5) = Test.typeError_v0 "Both values must be the same type"
  (Test.typeError_v0 "test" != Test.typeError_v0 "different msg") = Test.typeError_v0 "test"
  (true == true) = true
  (false == false) = true
  (true != false) = true
  (() == ()) = true
  (() != Nothing) = Test.typeError_v0 "Both values must be the same type"
  (() != false) = Test.typeError_v0 "Both values must be the same type"
  (() != 0) = Test.typeError_v0 "Both values must be the same type"
  (() != 0.0) = Test.typeError_v0 "Both values must be the same type"
  ([ 1; 2; 3 ] == [ 1; 2; 3 ]) = true
  ([ 1; 2; 3 ] != [ 3; 2; 1 ]) = true
  (ERec { x = 6; y = 7 } == ERec { x = 6; y = 7 }) = true
  (ERec { x = 6; y = 7 } == ERec { y = 7; x = 6 }) = true
  (ERec { x = 6; y = 7 } != ERec { x = 7; y = 6 }) = true
  ("asd" == "asd") = true
  ("asd" != "sad") = true
  ((DateTime.parse_v2 "2019-07-28T22:42:36Z") == (DateTime.parse_v2 "2019-07-28T22:42:36Z")) = true
  ((DateTime.parse_v2 "2019-07-28T22:42:37Z") != (DateTime.parse_v2 "2019-07-28T22:42:36Z")) = true
  (Uuid.parse_v0 "3700adbc-7a46-4ff4-81d3-45afb03f6e2d" == Uuid.parse_v0 "3700adbc-7a46-4ff4-81d3-45afb03f6e2d") = true
  (Uuid.parse_v0 "3700adbc-7a46-4ff4-81d3-45afb03f6e2e" != Uuid.parse_v0 "3700adbc-7a46-4ff4-81d3-45afb03f6e2d") = true
  (Nothing == Nothing) = true
  (Nothing != Just Nothing) = true
  (Just 5 == Just 5) = true
  (Just 5 != Just 6) = true
  (Just (Just 0) != Just (Just 1)) = true
  (Just (Just 0) == Just (Just 0)) = true
  (Error 0 == Error 0) = true
  (Ok 0 == Ok 0) = true
  (Ok 0 != Error 0) = true
  ((String.toBytes_v0 "🧑🏽‍🦰🧑🏼‍💻🧑🏻‍🍼") == (String.toBytes_v0 "🧑🏽‍🦰🧑🏼‍💻🧑🏻‍🍼")) = true
  (fun x -> y) = (fun x -> y)
  ((fun x -> let y = 1 in y) != (fun x -> let y = 2 in x)) = true
  (EEnum.E1 == EEnum.E1) = true
  (EEnum.E1 != EEnum.E2) = true
  (EEnum.E3 5 == EEnum.E3 5) = true
  (EEnum.E3 5 != EEnum.E3 6) = true

  type MyDBType = { x : String; y: String }
  [<DB>] type MyDB = MyDBType
  (MyDB == MyDB) = true
  (MyDB != 5) = Test.typeError_v0 "Both values must be the same type"


// ---------------------------
// User-defined Functions
// ---------------------------
let stringFn (key:String) : String =
  key ++ " appended string"

let fnWithTypeArgAndOneParam<'a> (arg: 'a) : 'a =
  arg

let twoStringFn (str1: String) (str2: String) : String =
  str1 ++ " appended " ++ str2

let returnsInt () : Int =
  5

let returnsString () : String =
  "string"

let returnsOptionJust () : Option<Int> =
  Just 5

let returnsOptionNothing () : Option<Int> =
  Nothing

let returnsResultOk () : Result<Int, 'err> =
  Ok 5

let returnsResultError () : Result<String, Bool> =
  Error false

let throwsException () : 'a =
  Test.raiseException "throwsException message"

let derrorFn (msg:String) : String =
  msg ++ Test.typeError_v0 msg

module FunctionCalls =
  stringFn "string" = "string appended string"
  twoStringFn "str1" "str2" = "str1 appended str2"
  returnsInt () = 5
  returnsString () = "string"
  returnsOptionJust () = Just 5
  (returnsOptionJust ()) |> Test.unwrap = 5
  returnsOptionNothing () = Nothing
  returnsResultOk () = Ok 5
  (returnsResultOk ()) |> Test.unwrap = 5
  fnWithTypeArgAndOneParam<Int> 1 = 1

module InvalidFnCalls =
  functionWhichDoesntExist 6 = Test.typeError "Function functionWhichDoesntExist is not found"
  stringFn 5 = Test.typeError "Type error(s) in function parameters: Expected a value of type `String` but got a `Int`"
  stringFn "str1" "str2" = Test.typeError "stringFn has 0 type parameters and 1 parameters, but here was called with 0 type arguments and 2 arguments."

  fnWithTypeArgAndOneParam 1 = Test.typeError "fnWithTypeArgAndOneParam has 1 type parameters and 1 parameters, but here was called with 0 type arguments and 1 arguments."
  fnWithTypeArgAndOneParam<Int> 1 "str2" = Test.typeError "fnWithTypeArgAndOneParam has 1 type parameters and 1 parameters, but here was called with 1 type arguments and 2 arguments."
  fnWithTypeArgAndOneParam<Int, String> 1 = Test.typeError "fnWithTypeArgAndOneParam has 1 type parameters and 1 parameters, but here was called with 2 type arguments and 1 arguments."
  fnWithTypeArgAndOneParam<Int, String> 1 "str" = Test.typeError "fnWithTypeArgAndOneParam has 1 type parameters and 1 parameters, but here was called with 2 type arguments and 2 arguments."
  //TODO: fnWithTypeArgAndOneParam<Int> "str2" = Test.typeError "type arg doesn't match arg."

  (let _ = Test.setExpectedExceptionCount 1 in
   throwsException ()) = Test.typeError "Unknown error"
  derrorFn "msg" = Test.typeError "msg"


let myUserFunction_v2 (str:String) : Int =
  6

// user function with _v2 in it
(myUserFunction_v2 "x") = 6

// ---------------------------
// Package manager function calls
// ---------------------------
[<Package("test", "test", "Test")>]
module Packages =
  let stringFn (key:String) : String =
    key ++ " appended string"

  let fnWithTypeArgAndOneParam<'a> (arg: 'a) : 'a =
    JSON.parse<'a> arg

  let twoStringFn (str1: String) (str2: String) : String =
    str1 ++ " appended " ++ str2

  let returnsInt () : Int =
    5

  let returnsString () : String =
    "string"

  let returnsOptionJust () : Option<Int> =
    Just 5

  let returnsOptionNothing () : Option<'a> =
    Nothing

  let returnsResultOk () : Result<Int, String> =
    Ok 5

  let returnsResultError () : Result<Char, Bool> =
    Error false

  let throwsException () : DateTime =
    Test.raiseException "throwsException message"

  let derrorFn (msg:String) : String =
    msg ++ Test.typeError_v0 msg

  Test.Test.Test.stringFn "string" = "string appended string"
  Test.Test.Test.twoStringFn "str1" "str2" = "str1 appended str2"
  Test.Test.Test.returnsInt () = 5
  Test.Test.Test.returnsString () = "string"
  Test.Test.Test.returnsOptionJust () = Just 5
  (Test.Test.Test.returnsOptionJust ()) |> Test.unwrap = 5
  Test.Test.Test.returnsOptionNothing () = Nothing
  Test.Test.Test.returnsResultOk () = Ok 5
  (Test.Test.Test.returnsResultOk ()) |> Test.unwrap = 5
  Test.Test.Test.returnsResultError () = Error false

  module Invalid =
    Test.Test.Test.stringFn 5 = Test.typeError "Type error(s) in function parameters: Expected a value of type `String` but got a `Int`"
    Test.Test.Test.stringFn "str1" "str2" = Test.typeError "test.test.Test.stringFn_v0 has 0 type parameters and 1 parameters, but here was called with 0 type arguments and 2 arguments."
    Test.Test.Test.derrorFn "test" = Test.typeError "test"

    (let _ = Test.setExpectedExceptionCount 1 in
     Test.Test.Test.throwsException ()) = Test.typeError "Unknown error"

    fnWithTypeArgAndOneParam 1 = Test.typeError "fnWithTypeArgAndOneParam has 1 type parameters and 1 parameters, but here was called with 0 type arguments and 1 arguments."
    fnWithTypeArgAndOneParam<Int> 1 "str2" = Test.typeError "fnWithTypeArgAndOneParam has 1 type parameters and 1 parameters, but here was called with 1 type arguments and 2 arguments."
    fnWithTypeArgAndOneParam<Int, String> 1 = Test.typeError "fnWithTypeArgAndOneParam has 1 type parameters and 1 parameters, but here was called with 2 type arguments and 1 arguments."
    fnWithTypeArgAndOneParam<Int, String> 1 "str" = Test.typeError "fnWithTypeArgAndOneParam has 1 type parameters and 1 parameters, but here was called with 2 type arguments and 2 arguments."
