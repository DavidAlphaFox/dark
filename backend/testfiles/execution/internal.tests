// ---------------
// Misc
// ---------------
module Documentation =
  // allFunctions has many functions
  (List.length_v0 DarkInternal.allFunctions_v0 > 290) = true


module Infra =

  // correct number of tables
  Dict.size_v0 DarkInternal.getAndLogTableSizes_v0 = 16

  // server build hash
  (match DarkInternal.serverBuildHash_v0 with
  // in local dev, the value is "dev"
  | "dev" -> true
  // in ci, "circleci"
  | "circleci" -> true
  // otherwise it's the first 7 chars of the git hash
  | hash -> (String.length hash) == 7) = true

// Test creating a new canvas - just check it we can call `owner` on it
(let owner = Test.getCanvasID |> DarkInternal.Canvas.owner
 let newID = DarkInternal.Canvas.create owner "test"
 DarkInternal.Canvas.owner newID == owner) = true


module Domains =
  module Roundtrip =
    ((DarkInternal.domainsForCanvasID Test.getCanvasID)
     |> List.head
     |> Test.unwrap
     |> DarkInternal.canvasIDForDomain) = Ok Test.getCanvasID

  module Errors =
    DarkInternal.domainsForCanvasID ((Uuid.parse_v0 "7d9e5495-b068-4364-a2cc-3633ab4d13e6") |> Test.unwrap) = []
    DarkInternal.canvasIDForDomain "not-a-real-domain" = Error "Canvas not found"




module Secrets =

  // getSecrets empty
  DarkInternal.getSecrets Test.getCanvasID = []

  // insertSecret
  (let _ = (DarkInternal.insertSecret Test.getCanvasID "SECRET" "VALUE" 0)
  DarkInternal.getSecrets Test.getCanvasID) = [("SECRET", "VALUE", 0)]

  // insertSecret twice
  (let _ = DarkInternal.insertSecret Test.getCanvasID "SECRET" "VALUE" 1
  // Does not work
  DarkInternal.insertSecret Test.getCanvasID "SECRET" "OTHERVALUE" 1) = Error "Error inserting secret"

  // deleteSecret
  DarkInternal.deleteSecret Test.getCanvasID "SECRET" 2 = ()

  // deleteSecret
  (let _ = DarkInternal.insertSecret Test.getCanvasID "SECRET" "VALUE" 3
   let _ = DarkInternal.deleteSecret Test.getCanvasID "SECRET" 3
   DarkInternal.getSecrets Test.getCanvasID) = []


module F404s =
  DarkInternal.getRecent404s Test.getCanvasID = []
  DarkInternal.delete404 Test.getCanvasID "" "" "" = ()


module Toplevels =
  module WithDB =
    type X = { x : String }
    [<DB>] type XDB = X
    (DarkInternal.Canvas.DB.list Test.getCanvasID) |> List.length = 1

  module NoDB =
    DarkInternal.Canvas.DB.list Test.getCanvasID = []

    DarkInternal.Canvas.deleteToplevelForever Test.getCanvasID 1 = false


module UnlockedDB =
  // none
  DarkInternal.Canvas.DB.unlocked Test.getCanvasID = []

  module WithDB =
    type X = { x : String }
    [<DB>] type XDB = X
    // one
    (DarkInternal.Canvas.DB.unlocked Test.getCanvasID) |> List.length = 1

    // one but locked
    (let _ = DB.set_v1 (X { x = "str" }) "test" XDB in
    DarkInternal.Canvas.DB.unlocked Test.getCanvasID) = []


module Ops =
  // getOpsForToplevel returns empty list for nonexistant TL
  DarkInternal.Canvas.getOpsForToplevel_v0 Test.getCanvasID 0 = []
