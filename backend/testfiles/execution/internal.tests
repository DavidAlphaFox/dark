// ---------------
// Misc
// ---------------
module Misc =

  // correct number of tables
  Dict.size_v0 DarkInternal.getAndLogTableSizes_v0 = 18

  // allFunctions has many functions
  (List.length_v0 DarkInternal.allFunctions_v0 > 290) = true

  // server build hash
  (match DarkInternal.serverBuildHash_v0 with
  // in local dev, the value is "dev"
  | "dev" -> true
  // in ci, "circleci"
  | "circleci" -> true
  // otherwise it's the first 7 chars of the git hash
  | hash -> (String.length hash) == 7) = true


// ---------------
// canvasID
// ---------------
module CanvasIDOfCanvasName =
  DarkInternal.canvasIDOfCanvasName_v0 Test.getCanvasName = Ok (Test.getCanvasID)
  DarkInternal.canvasIDOfCanvasName_v0 "invalid name" = Error "Invalid username 'invalid name' - must be 2-20 lowercase characters, and must start with a letter."
  DarkInternal.canvasIDOfCanvasName_v0 "not-a-real-canvas" = Error "Canvas not found"

module CanvasNameOfCanvasID =
  DarkInternal.canvasNameOfCanvasID_v0 (Test.getCanvasID) = Ok (Test.getCanvasName)
  DarkInternal.canvasNameOfCanvasID_v0 ((Uuid.parse_v0 "7d9e5495-b068-4364-a2cc-3633ab4d13e6") |> Test.unwrap) = Error "Canvas not found"


module Secrets =

  // getSecrets empty
  DarkInternal.getSecrets Test.getCanvasID = {}

  // insertSecret
  (let _ = (DarkInternal.insertSecret Test.getCanvasID "SECRET" "VALUE")
  DarkInternal.getSecrets Test.getCanvasID) = { SECRET = "VALUE" }

  // insertSecret twice
  (let _ = DarkInternal.insertSecret Test.getCanvasID "SECRET" "VALUE"
  // Does not work
  DarkInternal.insertSecret Test.getCanvasID "SECRET" "OTHERVALUE") = Error "Error inserting secret"

  // deleteSecret
  DarkInternal.deleteSecret (Test.getCanvasID) "SECRET" = ()

  // deleteSecret
  (let _ = DarkInternal.insertSecret Test.getCanvasID "SECRET" "VALUE"
   let _ = DarkInternal.deleteSecret Test.getCanvasID "SECRET"
   DarkInternal.getSecrets Test.getCanvasID) = Dict.empty


// ---------------
// 404s
// ---------------
module F404s =
  DarkInternal.getRecent404s Test.getCanvasID = []
  DarkInternal.delete404 Test.getCanvasID "" "" "" = ()


module Toplevels =
  module WithDB =
    [<DB>] type X = { x : string }
    (DarkInternal.dbs Test.getCanvasName) |> List.length = 1

  module NoDB =
    DarkInternal.dbs Test.getCanvasName = []

    DarkInternal.deleteToplevelForever Test.getCanvasID 1 = false


module UnlockedDB =
  // none
  DarkInternal.unlockedDBs Test.getCanvasID = []

  module WithDB =
    [<DB>] type X = { x : string }
    // one
    (DarkInternal.unlockedDBs Test.getCanvasID) |> List.length = 1

    // one but locked
    (let _ = DB.set_v1 { x = "str" } "test" X in
     DarkInternal.unlockedDBs Test.getCanvasID) = []


module Ops =
  // getOpsForToplevel returns empty list for nonexistant TL
  DarkInternal.getOpsForToplevel_v0 Test.getCanvasID 0 = []