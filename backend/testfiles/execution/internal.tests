// ---------------
// Misc
// ---------------
module Documentation =
  (List.length_v0 (DarkInternal.Documentation.list ()) > 100) = true

  ((DarkInternal.Documentation.list_v0 ())
   |> List.map (fun f -> (f.name, f))
   |> Dict.fromList_v0
   |> unwrap
   |> Dict.get "Int.add"
   |> unwrap
   |> (fun f -> f.parameters)) = [ DarkInternal.Documentation.Parameter
                                     { name = "a"; ``type`` = "Int" }
                                   DarkInternal.Documentation.Parameter
                                     { name = "b"; ``type`` = "Int" } ]


module Infra =

  // correct number of tables
  Dict.size_v0 (DarkInternal.Infra.getAndLogTableSizes_v0 ()) = 17

  // server build hash
  (match DarkInternal.Infra.serverBuildHash_v0 () with
   // in local dev, the value is "dev"
   | "dev" -> true
   // in ci, "circleci"
   | "circleci" -> true
   // otherwise it's the first 7 chars of the git hash
   | hash -> (String.length hash) == 7) = true

module Canvas =
  // Test creating a new canvas - just check it we can call `owner` on it
  (let owner = (Test.getCanvasID ()) |> DarkInternal.Canvas.owner
   let newID = DarkInternal.Canvas.create owner "test"
   DarkInternal.Canvas.owner newID == owner) = true

module Domains =
  module Roundtrip =
    ((Test.getCanvasID ())
     |> DarkInternal.Canvas.Domain.get
     |> List.head
     |> unwrap
     |> DarkInternal.Canvas.Domain.toCanvasID) = PACKAGE.Darklang.Stdlib.Result.Result.Ok(Test.getCanvasID ())

  module Errors =
    DarkInternal.Canvas.Domain.get (
      (Uuid.parse_v0 "7d9e5495-b068-4364-a2cc-3633ab4d13e6") |> unwrap
    ) = []

    DarkInternal.Canvas.Domain.toCanvasID "not-a-real-domain" = PACKAGE.Darklang.Stdlib.Result.Result.Error
      "Canvas not found"

module Secrets =

  // getAll empty
  (Test.getCanvasID ()) |> DarkInternal.Canvas.Secret.getAll = []

  // insert
  (let _ =
    (Test.getCanvasID ()) |> DarkInternal.Canvas.Secret.insert "SECRET" "VALUE" 0

   (Test.getCanvasID ()) |> DarkInternal.Canvas.Secret.getAll) = [ DarkInternal.Canvas.Secret.Secret
                                                                     { name =
                                                                         "SECRET"
                                                                       value =
                                                                         "VALUE"
                                                                       version = 0 } ]

  // insert twice
  (let _ =
    (Test.getCanvasID ()) |> DarkInternal.Canvas.Secret.insert "SECRET" "VALUE" 1
   // Does not work
   DarkInternal.Canvas.Secret.insert (Test.getCanvasID ()) "SECRET" "OTHERVALUE" 1) = PACKAGE.Darklang.Stdlib.Result.Result.Error
    "Error inserting secret"

  // delete
  DarkInternal.Canvas.Secret.delete (Test.getCanvasID ()) "SECRET" 2 = ()

  // delete
  (let canvasID = Test.getCanvasID ()
   let _ = DarkInternal.Canvas.Secret.insert canvasID "SECRET" "VALUE" 3
   let _ = DarkInternal.Canvas.Secret.delete canvasID "SECRET" 3
   DarkInternal.Canvas.Secret.getAll canvasID) = []


module F404s =
  1 = 1
// DarkInternal.Canvas.F404.recent (Test.getCanvasID ()) = []
// DarkInternal.Canvas.F404.delete (Test.getCanvasID ()) "" "" "" = ()


module Toplevels =
  module WithDB =
    type X = { x: String }

    [<DB>]
    type XDB = X

    (Test.getCanvasID ()) |> DarkInternal.Canvas.DB.unlocked |> List.length = 1

  module NoDB =
    (Test.getCanvasID ()) |> DarkInternal.Canvas.DB.unlocked = []

    (Test.getCanvasID ()) |> DarkInternal.Canvas.deleteToplevelForever 1 = false


module UnlockedDB =
  // none
  (Test.getCanvasID ()) |> DarkInternal.Canvas.DB.unlocked = []

  module WithDB =
    type X = { x: String }

    [<DB>]
    type XDB = X
    // one
    (Test.getCanvasID ()) |> DarkInternal.Canvas.DB.unlocked |> List.length = 1

    // one but locked
    (let _ = DB.set (X { x = "str" }) "test" XDB in
     (Test.getCanvasID ()) |> DarkInternal.Canvas.DB.unlocked) = []

module Queue =
  // TODO: DarkInternal.Canvas.Queue.count
  // TODO: DarkInternal.Canvas.Queue.SchedulingRule.list
  // TODO: DarkInternal.Infra.SchedulingRule.Block.insert
  // TODO: DarkInternal.Infra.SchedulingRule.Block.delete
  // TODO: DarkInternal.Infra.SchedulingRule.list
  [] = []