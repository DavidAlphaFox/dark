//----------------------
// <auto-generated>
//   Generated by ./scripts/generate_tree-sitter_bindings.py
// </auto-generated>
//----------------------

#nullable enable

using System.Linq;

namespace LibTreeSitter.Darklang.Nodes {
    public abstract class DarklangLanguageNode
    {
        public static DarklangLanguageNode FromNode(LibTreeSitter.Node node) {
            if (node is null) throw new System.ArgumentNullException(nameof(node));
            if (!node.IsNamed) return new DarklangLanguageNodeTerminalNode(node);
            switch (node.Kind) {
                case "fn_param_def": return new FnParamDef(node);
                case "let_expression": return new LetExpression(node);
                case "unit": return new Unit(node);
                case "type": return new Type(node);
                case "identifier": return new Identifier(node);
                case "fn_def": return new FnDef(node);
                case "fn_params_def": return new FnParamsDef(node);
                case "infix_operation": return new InfixOperation(node);
                case "string_literal": return new StringLiteral(node);
                case "source_file": return new SourceFile(node);
                case "expression": return new Expression(node);
                case "infix_operator": return new InfixOperator(node);
                case "ERROR": return new ErrorNode(node);
                default: throw new System.ArgumentException("unknown node type: " + node.Kind, nameof(node));
            }
        }


        public string Kind { get; set; }

        protected DarklangLanguageNode(LibTreeSitter.Node node)
        {
            Kind = node.Kind;
        }
    }

    public class DarklangLanguageNodeTerminalNode : DarklangLanguageNode
    {
        public DarklangLanguageNodeTerminalNode(LibTreeSitter.Node node) : base(node) { }
    }

    public class ErrorNode : DarklangLanguageNode
    {
        public ErrorNode(LibTreeSitter.Node node) : base(node) { }
    }

    public class Expression : DarklangLanguageNode
    {
        public System.Collections.Generic.List<DarklangLanguageNode> Children { get; set; }
        public Expression(LibTreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "expression");

            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (DarklangLanguageNode) DarklangLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class FnDef : DarklangLanguageNode
    {
        public Expression Body { get; set; }
        public Identifier Name { get; set; }
        public FnParamsDef Params { get; set; }
        public Type ReturnType { get; set; }
        public FnDef(LibTreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "fn_def");

            this.Body = new Expression(node.ChildByFieldName("body"));
            this.Name = new Identifier(node.ChildByFieldName("name"));
            this.Params = new FnParamsDef(node.ChildByFieldName("params"));
            this.ReturnType = new Type(node.ChildByFieldName("return_type"));
        }
    }

    public class FnParamDef : DarklangLanguageNode
    {
        public Identifier? Identifier { get; set; }
        public Type? Typ { get; set; }
        public System.Collections.Generic.List<Unit> Children { get; set; }
        public FnParamDef(LibTreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "fn_param_def");

            {
                var tmp = node.ChildByFieldName("identifier");
                this.Identifier = tmp is null ? null : new Identifier(tmp);
            }
            {
                var tmp = node.ChildByFieldName("typ");
                this.Typ = tmp is null ? null : new Type(tmp);
            }
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Unit(x)).ToList();
        }
    }

    public class FnParamsDef : DarklangLanguageNode
    {
        public System.Collections.Generic.List<FnParamDef> Additional { get; set; }
        public FnParamDef First { get; set; }
        public FnParamsDef(LibTreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "fn_params_def");

            this.Additional = node.ChildrenByFieldName("additional").Select(x => new FnParamDef(x)).ToList();
            this.First = new FnParamDef(node.ChildByFieldName("first"));
        }
    }

    public class InfixOperation : DarklangLanguageNode
    {
        public Expression Left { get; set; }
        public InfixOperator Operator { get; set; }
        public Expression Right { get; set; }
        public InfixOperation(LibTreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "infix_operation");

            this.Left = new Expression(node.ChildByFieldName("left"));
            this.Operator = new InfixOperator(node.ChildByFieldName("operator"));
            this.Right = new Expression(node.ChildByFieldName("right"));
        }
    }

    public class InfixOperator : DarklangLanguageNode
    {
        public InfixOperator(LibTreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "infix_operator");

        }
    }

    public class LetExpression : DarklangLanguageNode
    {
        public Expression Body { get; set; }
        public Expression Expr { get; set; }
        public Identifier Identifier { get; set; }
        public LetExpression(LibTreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "let_expression");

            this.Body = new Expression(node.ChildByFieldName("body"));
            this.Expr = new Expression(node.ChildByFieldName("expr"));
            this.Identifier = new Identifier(node.ChildByFieldName("identifier"));
        }
    }

    public class SourceFile : DarklangLanguageNode
    {
        public System.Collections.Generic.List<FnDef> Children { get; set; }
        public SourceFile(LibTreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "source_file");

            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new FnDef(x)).ToList();
        }
    }

    public class StringLiteral : DarklangLanguageNode
    {
        public StringLiteral(LibTreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "string_literal");

        }
    }

    public class Type : DarklangLanguageNode
    {
        public Type(LibTreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "type");

        }
    }

    public class Identifier : DarklangLanguageNode
    {
        public Identifier(LibTreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "identifier");

        }
    }

    public class Unit : DarklangLanguageNode
    {
        public Unit(LibTreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "unit");

        }
    }
}