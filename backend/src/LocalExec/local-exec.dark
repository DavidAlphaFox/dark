let listDirectoryRecursive (dir: String) : List<String> =
  let contents = Directory.list dir
  let (files, dirs) = contents |> List.partition (fun x -> File.isNormal x)
  let nested = dirs |> List.map (fun d -> listDirectoryRecursive d) |> List.flatten
  dirs |> List.append files |> List.append nested


// Packages
let listPackageFilesOnDisk (dir: String) : List<String> =
  dir
  |> listDirectoryRecursive
  |> List.filter (fun x -> x |> String.endsWith ".dark")

let loadPackageFile (filename: String) : Unit =
  filename
  |> File.read
  |> unwrap
  |> String.fromBytes
  |> LocalExec.Packages.parseAndSave filename
  |> unwrap

let printPackageFunction (p: LocalExec.Packages.Function) : Unit =
  let modules = p.modules |> String.join "."

  print
    $"Package Function {p.owner}.{modules}.{p.name}_v{Int.toString_v0 p.version}"

let printPackageType (p: LocalExec.Packages.Type) : Unit =
  let modules = p.modules |> String.join "."
  print $"Package Type {p.owner}.{modules}.{p.name}_v{Int.toString_v0 p.version}"

let printAllPackages () : Unit =
  let functions = LocalExec.Packages.listFunctions ()
  functions |> List.iter (fun p -> printPackageFunction p)

  let types = LocalExec.Packages.listTypes ()
  types |> List.iter (fun p -> printPackageType p)


// Running scripts
let runScript (path: String) (args: List<String>) : Int =
  let script = (File.read path) |> unwrap |> String.fromBytes
  let result = (LocalExec.parseAndExecuteScript path script args) |> unwrap
  result


// parse args and execute
type CliOptions =
  | Help
  | LoadPackages
  | ListPackages
  | RunScript of path: String * args: List<String>

let usage () : String =
  "Usage: LocalExec [options]

    Options:
      -h, --help     Show this help message and exit
      load-packages  Load packages from packages
      list-packages  List packages
      run-script     Parse and run .dark script
  "

let parseArgs (args: List<String>) : Result<CliOptions, String> =
  match args with
  | [] -> Ok CliOptions.Help
  | [ "-h" ] -> Ok CliOptions.Help
  | [ "--help" ] -> Ok CliOptions.Help

  | [ "list-packages" ] -> Ok CliOptions.ListPackages
  | [ "load-packages" ] -> Ok CliOptions.LoadPackages

  | [ "run-script" ] -> Error "Missing path to script after `run-script`"
  | "run-script" :: path :: args -> Ok(CliOptions.RunScript (path, args))

  | _ -> Error "Invalid arguments"


let main (args: List<String>) : Int =
  match parseArgs args with
  | Ok Help ->
    print (usage ())
    0

  | Ok ListPackages ->
    printAllPackages ()
    0

  | Ok LoadPackages ->
    LocalExec.Packages.clear ()
    let files = listPackageFilesOnDisk "/home/dark/app/packages"

    do // can we get rid of this do?
      List.iter files (fun f ->
        print $"Loading {f}"
        loadPackageFile f)

    print "Done loading packages"
    printAllPackages ()
    0

  | Ok(RunScript(path, args)) ->
    print $"Running script with LocalExec: {path}"
    runScript path args

  | Ok _ ->
    print "Parsed args but not implemented yet"
    1

  | Error msg ->
    print (usage ())
    print ("Error: " ++ msg)
    1

main args