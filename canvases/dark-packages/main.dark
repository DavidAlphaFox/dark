[<HttpHandler("GET", "/ping")>]
let _handler _req =
  Stdlib.Http.response (Stdlib.String.toBytes "pong") 200L


// expose some metadata to quickly check if things seem to be working and populated
[<HttpHandler("GET", "/stats")>]
let _handler _req =
  let stats = Builtin.packageManagerGetStats ()

  let body =
    $"Package stats:
- types: {stats.types |> Builtin.int64ToString}
- fns: {stats.fns |> Builtin.int64ToString}
- constants: {stats.constants |> Builtin.int64ToString}"
    |> Stdlib.String.toBytes

  Stdlib.Http.response body 200L



// fetch types
// (JSON representation of PT.PackageType)
[<HttpHandler("GET", "/type/find/:name")>]
let _handler _req =
  match Builtin.packageManagerFindType name with
  | Some foundID ->
    let json = $"\"{Stdlib.Uuid.toString foundID}\""
    Stdlib.Http.response (Stdlib.String.toBytes json) 200L
  | None -> Stdlib.Http.response (Stdlib.String.toBytes "not found") 404L

[<HttpHandler("GET", "/type/get/:id")>]
let _handler _req =
  let id = (Stdlib.Uuid.parse id) |> Builtin.unwrap

  match Builtin.packageManagerGetType id with
  | Some f ->
    let json =
      Builtin.jsonSerialize<LanguageTools.ProgramTypes.PackageType.PackageType> f

    Stdlib.Http.response (Stdlib.String.toBytes json) 200L
  | None -> Stdlib.Http.response (Stdlib.String.toBytes "not found") 404L


// fetch constants
// (JSON representation of PT.PackageConstant)
[<HttpHandler("GET", "/constant/find/:name")>]
let _handler _req =
  match Builtin.packageManagerFindConstant name with
  | Some foundID ->
    let json = $"\"{Stdlib.Uuid.toString foundID}\""
    Stdlib.Http.response (Stdlib.String.toBytes json) 200L
  | None -> Stdlib.Http.response (Stdlib.String.toBytes "not found") 404L

[<HttpHandler("GET", "/constant/get/:id")>]
let _handler _req =
  let id = (Stdlib.Uuid.parse id) |> Builtin.unwrap

  match Builtin.packageManagerGetConstant id with
  | Some f ->
    let json =
      Builtin.jsonSerialize<LanguageTools.ProgramTypes.PackageConstant.PackageConstant>
        f

    Stdlib.Http.response (Stdlib.String.toBytes json) 200L
  | None -> Stdlib.Http.response (Stdlib.String.toBytes "not found") 404L


// fetch functions
// (JSON representation of PT.PackageFn)
[<HttpHandler("GET", "/function/find/:name")>]
let _handler _req =
  match Builtin.packageManagerFindFn name with
  | Some foundID ->
    let json = $"\"{Stdlib.Uuid.toString foundID}\""
    Stdlib.Http.response (Stdlib.String.toBytes json) 200L
  | None -> Stdlib.Http.response (Stdlib.String.toBytes "not found") 404L

[<HttpHandler("GET", "/function/get/:id")>]
let _handler _req =
  let id = (Stdlib.Uuid.parse id) |> Builtin.unwrap

  match Builtin.packageManagerGetFn id with
  | Some f ->
    let json =
      Builtin.jsonSerialize<LanguageTools.ProgramTypes.PackageFn.PackageFn> f

    Stdlib.Http.response (Stdlib.String.toBytes json) 200L
  | None -> Stdlib.Http.response (Stdlib.String.toBytes "not found") 404L


[<HttpHandler("GET", "/function/get/all")>]
let _handler _req =
  let fns = Builtin.packageManagerGetAllFns ()
  Stdlib.Http.response (Stdlib.String.toBytes (fns |> Stdlib.String.join "\n")) 200L