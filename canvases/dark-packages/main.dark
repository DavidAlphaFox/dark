type PackageItem =
  | Fn of PACKAGE.Darklang.LanguageTools.ProgramTypes.PackageFn.PackageFn
  | Type of PACKAGE.Darklang.LanguageTools.ProgramTypes.PackageType
  | Constant of PACKAGE.Darklang.LanguageTools.ProgramTypes.PackageConstant

type Category =
  | Fn
  | Type
  | Constant

type GenericName =
  { owner: String
    modules: List<String>
    name: String
    version: Int64 }

type Entry =
  { name: GenericName
    package: PackageItem
    category: Category }

[<DB>]
type PackagesDB = Entry


let isAuthorized
  (headers: List<(String * String)>)
  : PACKAGE.Darklang.Stdlib.Option.Option<Bool> =
  headers
  |> PACKAGE.Darklang.Stdlib.List.findFirst (fun (k, v) -> k == "authorization")
  |> PACKAGE.Darklang.Stdlib.Option.map PACKAGE.Darklang.Stdlib.Tuple2.second
  |> PACKAGE.Darklang.Stdlib.Option.map (fun x ->
    PACKAGE.Darklang.Stdlib.String.split x " ")
  |> PACKAGE.Darklang.Stdlib.Option.andThen PACKAGE.Darklang.Stdlib.List.last
  |> PACKAGE.Darklang.Stdlib.Option.map PACKAGE.Darklang.Stdlib.String.trim
  |> PACKAGE.Darklang.Stdlib.Option.map (fun s -> s == AUTH_PASSWORD)


let checkAuthorization
  (headers: List<(String * String)>)
  (f: Unit -> PACKAGE.Darklang.Stdlib.Http.Response)
  : PACKAGE.Darklang.Stdlib.Http.Response =
  match isAuthorized headers with
  | None ->
    PACKAGE.Darklang.Stdlib.Http.response
      (PACKAGE.Darklang.Stdlib.String.toBytes "Authorization required")
      400L
  | Some false ->
    PACKAGE.Darklang.Stdlib.Http.response
      (PACKAGE.Darklang.Stdlib.String.toBytes "not authorized")
      401L
  | Some true -> f ()

[<HttpHandler("POST", "/types")>]
let _handler request =
  checkAuthorization request.headers (fun () ->
    let value =
      request.body
      |> PACKAGE.Darklang.Stdlib.String.fromBytesWithReplacement
      |> Builtin.Json.parse<PACKAGE.Darklang.LanguageTools.ProgramTypes.PackageType>
      |> Builtin.unwrap

    let item =
      Entry
        { name =
            GenericName
              { name =
                  value.name.name
                  |> PACKAGE.Darklang.PrettyPrinter.ProgramTypes.TypeName.name
                modules = value.name.modules
                owner = value.name.owner
                version = value.name.version }
          package = PackageItem.Type value
          category = Category.Type }

    let key = Builtin.DB.generateKey_v0 ()
    Builtin.DB.set item key PackagesDB

    PACKAGE.Darklang.Stdlib.Http.response
      (PACKAGE.Darklang.Stdlib.String.toBytes "added")
      200L)




[<HttpHandler("POST", "/functions")>]
let _handler request =
  checkAuthorization request.headers (fun () ->
    let value =
      request.body
      |> PACKAGE.Darklang.Stdlib.String.fromBytesWithReplacement
      |> Builtin.Json.parse<PACKAGE.Darklang.LanguageTools.ProgramTypes.PackageFn.PackageFn>
      |> Builtin.unwrap

    let item =
      Entry
        { name =
            GenericName
              { name =
                  value.name.name
                  |> PACKAGE.Darklang.PrettyPrinter.ProgramTypes.FnName.name
                modules = value.name.modules
                owner = value.name.owner
                version = value.name.version }
          package = PackageItem.Fn value
          category = Category.Fn }

    let key = Builtin.DB.generateKey_v0 ()
    Builtin.DB.set item key PackagesDB

    PACKAGE.Darklang.Stdlib.Http.response
      (PACKAGE.Darklang.Stdlib.String.toBytes "added")
      200L)

[<HttpHandler("POST", "/constants")>]
let _handler request =
  checkAuthorization request.headers (fun () ->
    let value =
      request.body
      |> PACKAGE.Darklang.Stdlib.String.fromBytesWithReplacement
      |> Builtin.Json.parse<PACKAGE.Darklang.LanguageTools.ProgramTypes.PackageConstant>
      |> Builtin.unwrap

    let item =
      Entry
        { name =
            GenericName
              { name =
                  value.name.name
                  |> PACKAGE.Darklang.PrettyPrinter.ProgramTypes.ConstantName.name
                modules = value.name.modules
                owner = value.name.owner
                version = value.name.version }
          package = PackageItem.Constant value
          category = Category.Constant }

    let key = Builtin.DB.generateKey_v0 ()
    Builtin.DB.set item key PackagesDB

    PACKAGE.Darklang.Stdlib.Http.response
      (PACKAGE.Darklang.Stdlib.String.toBytes "added")
      200L)



[<HttpHandler("GET", "/stats")>]
let _handler _req =
  let types =
    Builtin.DB.queryCount PackagesDB (fun entry -> entry.category == Category.Type)

  let fns =
    Builtin.DB.queryCount PackagesDB (fun entry -> entry.category == Category.Fn)

  let constants =
    Builtin.DB.queryCount PackagesDB (fun entry ->
      entry.category == Category.Constant)

  let items = Builtin.DB.count PackagesDB

  let body =
    $"Package stats:\ntypes: {Builtin.Int64.toString types}, fns: {Builtin.Int64.toString fns}, constants: {Builtin.Int64.toString constants}\n\ntotal items in DB: {Builtin.Int64.toString items}\n"
    |> PACKAGE.Darklang.Stdlib.String.toBytes

  PACKAGE.Darklang.Stdlib.Http.response body 200L

let parseVersion (name: String) : (String * Int64) =
  let parts = PACKAGE.Darklang.Stdlib.String.split name "_v"
  let name = (PACKAGE.Darklang.Stdlib.List.head parts) |> Builtin.unwrap

  let version =
    (PACKAGE.Darklang.Stdlib.List.last parts)
    |> Builtin.unwrap
    |> Builtin.Int64.parse
    |> Builtin.unwrap

  (name, version)


let parseName (name: String) : GenericName =
  let parts = PACKAGE.Darklang.Stdlib.String.split name "."
  let owner = (PACKAGE.Darklang.Stdlib.List.head parts) |> Builtin.unwrap
  let name = (PACKAGE.Darklang.Stdlib.List.last parts) |> Builtin.unwrap

  let modules =
    parts
    |> PACKAGE.Darklang.Stdlib.List.tail
    |> Builtin.unwrap
    |> PACKAGE.Darklang.Stdlib.List.dropLast

  let (name, version) = parseVersion name

  GenericName
    { owner = owner
      modules = modules
      name = name
      version = version }

let fetchByName
  (name: String)
  (category: Category)
  : PACKAGE.Darklang.Stdlib.Http.Response =
  let name = parseName name

  let found =
    Builtin.DB.queryOne PackagesDB (fun v ->
      v.name == name && v.category == category)

  match found with
  | None ->
    PACKAGE.Darklang.Stdlib.Http.response
      (PACKAGE.Darklang.Stdlib.String.toBytes "not found")
      404L
  | Some entry ->
    let json =
      match entry.package with
      | Fn fn ->
        Builtin.Json.serialize<PACKAGE.Darklang.LanguageTools.ProgramTypes.PackageFn.PackageFn>
          fn
      | Constant const' ->
        Builtin.Json.serialize<PACKAGE.Darklang.LanguageTools.ProgramTypes.PackageConstant>
          const'
      | Type typ ->
        Builtin.Json.serialize<PACKAGE.Darklang.LanguageTools.ProgramTypes.PackageType>
          typ

    let respBody = json |> PACKAGE.Darklang.Stdlib.String.toBytes

    PACKAGE.Darklang.Stdlib.Http.response respBody 200L



[<HttpHandler("GET", "/type/by-name/:name")>]
let _handler _req = fetchByName name Category.Type

[<HttpHandler("GET", "/constant/by-name/:name")>]
let _handler _req = fetchByName name Category.Constant

[<HttpHandler("GET", "/function/by-name/:name")>]
let _handler _req = fetchByName name Category.Fn

[<HttpHandler("GET", "/owner/:owner")>]
let _handler _req =
  let allItems =
    (Builtin.DB.query PackagesDB (fun v -> v.name.owner == owner))
    |> PACKAGE.Darklang.Stdlib.List.map (fun i ->
      (i.owner, i.modules |> PACKAGE.Darklang.Stdlib.String.join ".", i.name))
    |> PACKAGE.Darklang.Stdlib.List.map (fun m ->
      let (owner, modules, name) = m
      $"{owner}.{modules}.{name}")
    |> PACKAGE.Darklang.Stdlib.List.sort
    |> PACKAGE.Darklang.Stdlib.String.join "\n"

  let respBody =
    if allItems == "" then
      ($"owner {owner} not found") |> PACKAGE.Darklang.Stdlib.String.toBytes
    else
      allItems |> PACKAGE.Darklang.Stdlib.String.toBytes

  PACKAGE.Darklang.Stdlib.Http.response respBody 200L


[<HttpHandler("GET", "/modules/:name")>]
let _handler _req =
  let owner =
    name
    |> PACKAGE.Darklang.Stdlib.String.split "."
    |> PACKAGE.Darklang.Stdlib.List.head
    |> Builtin.unwrap

  let modules =
    name
    |> PACKAGE.Darklang.Stdlib.String.split "."
    |> PACKAGE.Darklang.Stdlib.List.drop 1L

  let fns =
    Builtin.DB.query PackagesDB (fun v ->
      v.name.owner == owner
      && v.name.modules == modules
      && v.category == Category.Fn)

  let types =
    Builtin.DB.query PackagesDB (fun v ->
      v.name.owner == owner
      && v.name.modules == modules
      && v.category == Category.Type)

  let constants =
    Builtin.DB.query PackagesDB (fun v ->
      v.name.owner == owner
      && v.name.modules == modules
      && v.category == Category.Constant)

  let respBody =
    (PACKAGE.Darklang.Stdlib.Packages
      { types = types
        fns = fns
        constants = constants })
    |> Builtin.Json.serialize<PACKAGE.Darklang.Stdlib.Packages>
    |> PACKAGE.Darklang.Stdlib.String.toBytes

  PACKAGE.Darklang.Stdlib.Http.response respBody 200L