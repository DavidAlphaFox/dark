type PackageFns =
  { tlid: PACKAGE.Darklang.Stdlib.TLID
    id: Uuid
    name: PACKAGE.Darklang.Stdlib.ProgramTypes.FnName.Package
    body: PACKAGE.Darklang.Stdlib.ProgramTypes.Expr
    typeParams: List<String>
    parameters: List<PACKAGE.Darklang.Stdlib.ProgramTypes.PackageFn.Parameter>
    returnType: PACKAGE.Darklang.Stdlib.ProgramTypes.TypeReference
    description: String
    deprecated:
      PACKAGE.Darklang.Stdlib.ProgramTypes.Deprecation<PACKAGE.Darklang.Stdlib.ProgramTypes.FnName.T> }

[<DB>]
type PackageFnsDB = PackageFns

[<HttpHandler("POST", "/functions")>]
let _handler _req =
  let fn = request.body |> String.fromBytes |> Json.parse<PackageFns> |> unwrap

  let fnToSave =
    PackageFns
      { tlid = fn.tlid
        id = fn.id
        name = fn.name
        body = fn.body
        typeParams = fn.typeParams
        parameters = fn.parameters
        returnType = fn.returnType
        description = fn.description
        deprecated = fn.deprecated }

  let key = DB.generateKey_v0 () //TODO: use id instead
  DB.set fnToSave key PackageFnsDB

  PACKAGE.Darklang.Stdlib.Http.response (String.toBytes "added") 200

[<HttpHandler("GET", "/all-functions")>]
let _handler _req =
  let count = (DB.count PackageFnsDB) |> Int.toString

  let allFns =
    (DB.getAll PackageFnsDB)
    |> List.map (fun x -> (Json.serialize<PackageFns> x) |> unwrap)
    |> String.join "\n"

  PACKAGE.Darklang.Stdlib.Http.response (String.toBytes allFns) 200


type PackageTypes =
  { tlid: PACKAGE.Darklang.Stdlib.TLID
    id: Uuid
    name: PACKAGE.Darklang.Stdlib.ProgramTypes.TypeName.Package
    declaration: PACKAGE.Darklang.Stdlib.ProgramTypes.TypeDeclaration.T
    description: String
    deprecated:
      PACKAGE.Darklang.Stdlib.ProgramTypes.Deprecation<PACKAGE.Darklang.Stdlib.ProgramTypes.TypeName.T> }

[<DB>]
type PackageTypesDB = PackageTypes

[<HttpHandler("POST", "/types")>]
let _handler _req =
  let typ = request.body |> String.fromBytes |> Json.parse<PackageTypes> |> unwrap

  let typeToSave =
    PackageTypes
      { tlid = typ.tlid
        id = typ.id
        name = typ.name
        declaration = typ.declaration
        description = typ.description
        deprecated = typ.deprecated }

  let key = DB.generateKey_v0 () //TODO: use id instead
  DB.set typeToSave key PackageTypesDB

  PACKAGE.Darklang.Stdlib.Http.response (String.toBytes "added") 200

[<HttpHandler("GET", "/all-types")>]
let _handler _req =
  let count = (DB.count PackageTypesDB) |> Int.toString

  let allTypes =
    (DB.getAll PackageTypesDB)
    |> List.map (fun x -> (Json.serialize<PackageTypes> x) |> unwrap)
    |> String.join "\n"

  PACKAGE.Darklang.Stdlib.Http.response (String.toBytes allTypes) 200