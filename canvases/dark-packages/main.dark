// CLEANUP : reference package types directly
type PackageType = PACKAGE.Darklang.LanguageTools.ProgramTypes.PackageType.T
type PackageFn = PACKAGE.Darklang.LanguageTools.ProgramTypes.PackageFn.T
type PackageConstant = PACKAGE.Darklang.LanguageTools.ProgramTypes.PackageConstant.T

[<DB>]
type PackageTypeDB = PackageType

[<DB>]
type PackageFnDB = PackageFn

[<DB>]
type PackageConstantDB = PackageConstant

[<HttpHandler("POST", "/types")>]
let _handler _req =
  let typ = request.body |> String.fromBytes |> Json.parse<PackageType> |> unwrap

  let typeToSave =
    PackageType
      { tlid = typ.tlid
        id = typ.id
        name = typ.name
        declaration = typ.declaration
        description = typ.description
        deprecated = typ.deprecated }

  let key = DB.generateKey_v0 () // TODO: use id instead
  DB.set typeToSave key PackageTypeDB

  PACKAGE.Darklang.Stdlib.Http.response (String.toBytes "added") 200


[<HttpHandler("POST", "/functions")>]
let _handler _req =
  let fn = request.body |> String.fromBytes |> Json.parse<PackageFn> |> unwrap

  let fnToSave =
    PackageFn
      { tlid = fn.tlid
        id = fn.id
        name = fn.name
        body = fn.body
        typeParams = fn.typeParams
        parameters = fn.parameters
        returnType = fn.returnType
        description = fn.description
        deprecated = fn.deprecated }

  let key = DB.generateKey_v0 () // TODO: use id instead
  DB.set fnToSave key PackageFnDB

  PACKAGE.Darklang.Stdlib.Http.response (String.toBytes "added") 200

[<HttpHandler("POST", "/constants")>]
let _handler _req =
  let c = request.body |> String.fromBytes |> Json.parse<PackageConstant> |> unwrap

  let constantToSave =
    PackageConstant
      { tlid = c.tlid
        id = c.id
        name = c.name
        body = c.body
        description = fn.description
        deprecated = fn.deprecated }

  let key = DB.generateKey_v0 () // TODO: use id instead
  DB.set constantToSave key PackageConstantDB

  PACKAGE.Darklang.Stdlib.Http.response (String.toBytes "added") 200


[<HttpHandler("GET", "/stats")>]
let _handler _req =
  let stats =
    [ ("types", (DB.getAll PackageTypeDB) |> List.length)
      ("fns", (DB.getAll PackageFnDB) |> List.length) ]
    |> Dict.fromListOverwritingDuplicates_v0

  let body = (Json.serialize<Dict<Int>> stats) |> unwrap |> String.toBytes

  PACKAGE.Darklang.Stdlib.Http.response body 200

[<HttpHandler("GET", "/types")>]
let _handler _req =
  let allTypes =
    (DB.getAll PackageTypeDB) |> Json.serialize<List<PackageType>> |> unwrap

  PACKAGE.Darklang.Stdlib.Http.response (String.toBytes allTypes) 200

[<HttpHandler("GET", "/functions")>]
let _handler _req =
  let allFns = (DB.getAll PackageFnDB) |> Json.serialize<List<PackageFn>> |> unwrap

  PACKAGE.Darklang.Stdlib.Http.response (String.toBytes allFns) 200