// TODO migrate more of this to package space

// Note: this is filled in via underground DB.sets in LocalExec.fs
[<DB>]
type PackageEntriesDB = PACKAGE.Darklang.DarkPackages.Entry



[<HttpHandler("GET", "/ping")>]
let _handler _req =
  let body = "pong" |> PACKAGE.Darklang.Stdlib.String.toBytes

  PACKAGE.Darklang.Stdlib.Http.response body 200L


// expose some metadata to quickly check if things seem to be working
[<HttpHandler("GET", "/stats")>]
let _handler _req =
  let types =
    Builtin.dbQueryCount PackageEntriesDB (fun e ->
      e.category == PACKAGE.Darklang.DarkPackages.Category.Type)

  let fns =
    Builtin.dbQueryCount PackageEntriesDB (fun e ->
      e.category == PACKAGE.Darklang.DarkPackages.Category.Fn)

  let constants =
    Builtin.dbQueryCount PackageEntriesDB (fun e ->
      e.category == PACKAGE.Darklang.DarkPackages.Category.Constant)

  let items = Builtin.dbCount PackageEntriesDB

  let body =
    $"Package stats:\ntypes: {Builtin.int64ToString types}, fns: {Builtin.int64ToString fns}, constants: {Builtin.int64ToString constants}\n\ntotal items in DB: {Builtin.int64ToString items}\n"
    |> PACKAGE.Darklang.Stdlib.String.toBytes

  PACKAGE.Darklang.Stdlib.Http.response body 200L



let fetchByName
  (category: PACKAGE.Darklang.DarkPackages.Category)
  (name: String)
  : PACKAGE.Darklang.Stdlib.Http.Response =
  let name = PACKAGE.Darklang.DarkPackages.parseName name

  let foundMaybe =
    Builtin.dbQueryOne PackageEntriesDB (fun v ->
      v.category == category && v.name == name)

  PACKAGE.Darklang.DarkPackages.makeResponseForEntryMaybe foundMaybe


let fetchByTlid
  (category: PACKAGE.Darklang.DarkPackages.Category)
  (tlid: String)
  : PACKAGE.Darklang.Stdlib.Http.Response =
  let tlid = (PACKAGE.Darklang.Stdlib.UInt64.parse tlid) |> Builtin.unwrap

  let entriesInCategory =
    Builtin.dbQuery PackageEntriesDB (fun v -> v.category == category)

  let foundMaybe =
    entriesInCategory
    |> PACKAGE.Darklang.Stdlib.List.findFirst (fun entry ->
      match entry.item with
      | Fn fn -> fn.id == id
      | Constant c -> c.id == id
      | Type typ -> typ.id == id)

  PACKAGE.Darklang.DarkPackages.makeResponseForEntryMaybe foundMaybe



// fetch types
[<HttpHandler("GET", "/type/by-name/:name")>]
let _handler _req =
  fetchByName PACKAGE.Darklang.DarkPackages.Category.Type name

[<HttpHandler("GET", "/type/by-tlid/:tlid")>]
let _handler _req =
  fetchByTlid PACKAGE.Darklang.DarkPackages.Category.Type tlid

// fetch constants
[<HttpHandler("GET", "/constant/by-name/:name")>]
let _handler _req =
  fetchByName PACKAGE.Darklang.DarkPackages.Category.Constant name

[<HttpHandler("GET", "/constant/by-tlid/:tlid")>]
let _handler _req =
  fetchByTlid PACKAGE.Darklang.DarkPackages.Category.Constant tlid

// fetch functions
[<HttpHandler("GET", "/function/by-name/:name")>]
let _handler _req =
  fetchByName PACKAGE.Darklang.DarkPackages.Category.Fn name

[<HttpHandler("GET", "/function/by-tlid/:tlid")>]
let _handler _req =
  fetchByTlid PACKAGE.Darklang.DarkPackages.Category.Fn tlid


[<HttpHandler("GET", "/owner/:owner")>]
let _handler _req =
  let allItems =
    (Builtin.dbQuery PackageEntriesDB (fun entry -> entry.name.owner == owner))
    |> PACKAGE.Darklang.Stdlib.List.map (fun entry ->
      let typeOfItem =
        match entry.item with
        | Fn _ -> "fn"
        | Type _ -> "type"
        | Constant _ -> "const"

      let modules = PACKAGE.Darklang.Stdlib.String.join entry.name.modules "."
      $"{typeOfItem} {entry.name.owner}.{modules}.{entry.name.name}")
    |> PACKAGE.Darklang.Stdlib.List.sort
    |> PACKAGE.Darklang.Stdlib.String.join "\n"

  let respBody =
    if allItems == "" then
      ($"owner {owner} not found") |> PACKAGE.Darklang.Stdlib.String.toBytes
    else
      allItems |> PACKAGE.Darklang.Stdlib.String.toBytes

  PACKAGE.Darklang.Stdlib.Http.response respBody 200L


[<HttpHandler("GET", "/modules/:name")>]
let _handler _req =
  // names are in the form of Owner.Module.Module.Module
  let names = PACKAGE.Darklang.Stdlib.String.split name "."
  let owner = names |> PACKAGE.Darklang.Stdlib.List.head |> Builtin.unwrap
  let modules = names |> PACKAGE.Darklang.Stdlib.List.drop 1L

  let fns =
    (Builtin.dbQuery PackageEntriesDB (fun v ->
      v.name.owner == owner
      && v.category == PACKAGE.Darklang.DarkPackages.Category.Fn))
    |> PACKAGE.Darklang.Stdlib.List.filter (fun v -> v.name.modules == modules)
    |> PACKAGE.Darklang.Stdlib.List.filterMap (fun v ->
      match v.item with
      | Fn f -> PACKAGE.Darklang.Stdlib.Option.Option.Some f
      | _ -> PACKAGE.Darklang.Stdlib.Option.Option.None)

  let types =
    (Builtin.dbQuery PackageEntriesDB (fun v ->
      v.name.owner == owner
      && v.category == PACKAGE.Darklang.DarkPackages.Category.Type))
    |> PACKAGE.Darklang.Stdlib.List.filter (fun v -> v.name.modules == modules)
    |> PACKAGE.Darklang.Stdlib.List.filterMap (fun v ->
      match v.item with
      | Type t -> PACKAGE.Darklang.Stdlib.Option.Option.Some t
      | _ -> PACKAGE.Darklang.Stdlib.Option.Option.None)

  let constants =
    (Builtin.dbQuery PackageEntriesDB (fun v ->
      v.name.owner == owner
      && v.category == PACKAGE.Darklang.DarkPackages.Category.Constant))
    |> PACKAGE.Darklang.Stdlib.List.filter (fun v -> v.name.modules == modules)
    |> PACKAGE.Darklang.Stdlib.List.filterMap (fun v ->
      match v.package with
      | Const c -> PACKAGE.Darklang.Stdlib.Option.Option.Some c
      | _ -> PACKAGE.Darklang.Stdlib.Option.Option.None)

  let respBody =
    (PACKAGE.Darklang.LanguageTools.ProgramTypes.Packages
      { types = types
        fns = fns
        constants = constants })
    |> Builtin.jsonSerialize<PACKAGE.Darklang.LanguageTools.ProgramTypes.Packages>
    |> PACKAGE.Darklang.Stdlib.String.toBytes

  PACKAGE.Darklang.Stdlib.Http.response respBody 200L