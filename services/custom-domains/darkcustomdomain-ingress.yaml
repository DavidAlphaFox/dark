# DO NOT `kubectl apply` THIS FILE WITHOUT EXTREME CAUTION.
#
# This ingress is `kubectl patch`'d any time we want to add a new custom
# domain; `kubectl apply` would remove those hosts. If you need to update this
# file, you'll need a migration plan.
#
# Example migration plan:
#
#   For converting to the v1 apiVersion, we are pulling the data using:
#
#     kubectl get ingress darkcustomdomaon-l4-ingress -o yaml > local.yaml
#
#   then updating it based on the changes in
#   https://kubernetes.io/docs/reference/using-api/deprecation-guide/#ingress-v122,
#   then setting it using
#
#     kubectl apply -f local.yaml
#
#   The code below represents the updated version, even though this has never
#   been directly applied.


# Handles darkcustomdomain, for which we (not google) do TLS termination
#
# See docs/custom-domains.md for more detail.
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: darkcustomdomain-l4-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/ingress.global-static-ip-name: darkcustomdomain-ip
    # I believe this is necessary to allow ACME to work, but we'll see!
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    cert-manager.io/issuer: letsencrypt-prod
spec:
  tls:
    # This entry is a placeholder, to ensure we have a .spec.tls array to append
    # to using kubectl patch
    - secretName: 'ops-placeholder.darkcustomdomain.com'
      hosts:
        - 'ops-placeholder.darkcustomdomain.com'
  defaultBackend:
    service:
      name: bwd-nodeport
      port:
        number: 80
  rules:
    # This entry is a placeholder, to ensure we have a .spec.rules array to
    # append to using kubectl patch
    - host: ops-placeholder.darkcustomdomain.com
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: bwd-nodeport
                port:
                  number: 80
