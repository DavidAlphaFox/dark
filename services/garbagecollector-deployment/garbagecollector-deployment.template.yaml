apiVersion: apps/v1
kind: Deployment
metadata:
  name: garbagecollector-deployment
  annotations:
    kubernetes.io/change-cause: "{ARG:CHANGE_CAUSE}"
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: garbagecollector
  replicas: 1
  template:
    metadata:
      labels:
        app: garbagecollector
    spec:
      containers:
        - name: garbagecollector-ctr
          image: "gcr.io/balmy-ground-195100/gcp-garbagecollector:{IMAGEID:gcp-garbagecollector}"
          # Resource request intentionally less than resource limit, to ensure
          # this pod is a 'Burstable' pod, ref:
          #  https://medium.com/google-cloud/quality-of-service-class-qos-in-kubernetes-bb76a89eb2c6
          resources:
            requests:
              memory: "600Mi"
              cpu: "250m"
            limits:
              memory: "1200Mi"
              cpu: "400m"
          envFrom:
            - configMapRef:
                name: "{VERSIONED-CONFIGMAP:app-config}"
          env:
            - name: DARK_CONFIG_RUNNING_IN_GKE
              value: "true"
            - name: DARK_CONFIG_PUSHER_KEY
              # We don't need pusher in the garbage collector
              value: "none"
            - name: DARK_CONFIG_ROLLBAR_POST_SERVER_ITEM
              valueFrom:
                secretKeyRef:
                  name: rollbar
                  key: post_token
            # connect to sql proxy in the same pod
            - name: DARK_CONFIG_DB_HOST
              value: 127.0.0.1
            - name: DARK_CONFIG_DB_USER
              valueFrom:
                secretKeyRef:
                  name: cloudsql-db-credentials
                  key: username
            - name: DARK_CONFIG_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: cloudsql-db-credentials
                  key: password
        #########################
        # Postgres proxy config
        # To connect to postgres from kubernetes, we need to add a proxy. See
        # https://cloud.google.com/sql/docs/postgres/connect-kubernetes-engine.
        # Note in particular that we needed to create a service account and a
        # set of GKE secrets, listed below, to manage this.
        #########################
        - name: cloudsql-proxy
          image: "gcr.io/cloudsql-docker/gce-proxy:1.11"
          resources:
            requests:
              memory: "70Mi"
              cpu: "100m"
            limits:
              memory: "150Mi"
              cpu: "125m"
          command: ["/bin/sh",
                    "-c",
                    "/cloud_sql_proxy -dir=/cloudsql -instances={BUILTIN:CLOUDSQL_INSTANCE_NAME}=tcp:5432 -credential_file=/secrets/cloudsql/credentials.json"]
          volumeMounts:
            - name: cloudsql-instance-credentials
              mountPath: /secrets/cloudsql
              readOnly: true

      volumes:
        - name: cloudsql-instance-credentials
          secret:
            secretName: cloudsql-instance-credentials
