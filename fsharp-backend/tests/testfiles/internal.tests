Dict.size_v0 DarkInternal.getAndLogTableSizes_v0 = 23
(List.length_v0 DarkInternal.allFunctions_v0 > 290) = true

[tests.grants]

[test.empty grants FSHARPONLY]
(let _ = Test.deleteUser_v0 "empty_grants"
 let _ = DarkInternal.insertUser_v2_ster "empty_grants" "a@eg.com" "test user" {}
 DarkInternal.orgsFor "empty_grants") = {}

[test.grants and orgs FSHARPONLY]
(let _ = DarkInternal.insertUser_v2_ster "gao_org" "gao-test-org@darklang.com" "gao test org" {}
 let _ = DarkInternal.insertUser_v2_ster "gao_user" "gao-test-user@darklang.com" "gao test user" {}
 let _ = DarkInternal.grant_v0_ster "gao_user" "gao_org" "rw" in
 DarkInternal.orgsFor "gao_user") = { ``gao_org`` = "rw" }

[test.grants and grants]
(let _ = DarkInternal.grant "test" "dark" "rw" in
 let result = DarkInternal.grantsFor "dark"
 let _ = DarkInternal.grant "test" "dark" "" in
 result) = { test = "rw" }

[tests.sessions]

// It allows these, just puts them in the DB
// [test.newSessionForUsername_v0 invalid user]
// (DarkInternal.newSessionForUsername_v0 "not a user") = Error "No user 'not a user'"

// It allows these, just puts them in the DB
// [test.newSessionForUsername_v1 invalid user]
// (DarkInternal.newSessionForUsername_v1 "not a user") = Error "No user 'not a user'"

[test.newSessionForUsername_v0 real user]
(let session = DarkInternal.newSessionForUsername_v0_ster "test" in
 DarkInternal.sessionKeyToUsername_v0 session) = Ok "test"

[test.newSessionForUsername_v1 real user]
(let session = DarkInternal.newSessionForUsername_v1_ster "test" in
 DarkInternal.sessionKeyToUsername session.sessionKey) = Ok "test"

[test.deleteSession]
(let session1 = DarkInternal.newSessionForUsername_v1_ster "test" in
 DarkInternal.deleteSession_v0 session1.sessionKey) = 1

[tests.users]
DarkInternal.getUser_v1 "test" = Just { admin = false; email = "test@darklang.com"; name = "Dark Backend Tests"; username = "test"}
DarkInternal.getUserByEmail_v0 "test@darklang.com" = Just { admin = false; email = "test@darklang.com"; name = "Dark Backend Tests"; username = "test"}
DarkInternal.usernameToUserInfo_v0 "test" = Just { admin = false; email = "test@darklang.com"; name = "Dark Backend Tests"; username = "test"}
DarkInternal.insertUser_v2 "name with space" "valid@email.com" "accidentalusername" {} = Error "Invalid username 'name with space', can only contain lowercase roman letters and digits, or '_'"

[tests.canvases]
DarkInternal.canvasIdOfCanvasName_v0 "not-a-canvas" = Nothing

[test.checkPermission with none]
(let user1 = ("cpn_user1_" ++ (String.random 5)) |> String.toLowercase_v1
 let user2 = ("cpn_user2_" ++ (String.random 5)) |> String.toLowercase_v1
 let user1Email = user1 ++ "-test@darklang.com"
 let user2Email = user2 ++ "-test@darklang.com"
 let _ = DarkInternal.insertUser_v2_ster user1 user1Email "cpn test user1" {}
 let _ = DarkInternal.insertUser_v2_ster user2 user2Email "cpn test user2" {}
 let startingPermission = DarkInternal.checkPermission_v0 user1 user2
 let _ = DarkInternal.grant_v0_ster user1 user2 "" in
 [DarkInternal.checkPermission_v0 user1 user2; startingPermission] ) = ["" ; ""]

[test.checkPermission with r]
(let user1 = ("cpr_user1_" ++ (String.random 5)) |> String.toLowercase_v1
 let user2 = ("cpr_user2_" ++ (String.random 5)) |> String.toLowercase_v1
 let user1Email = user1 ++ "-test@darklang.com"
 let user2Email = user2 ++ "-test@darklang.com"
 let _ = DarkInternal.insertUser_v2_ster user1 user1Email "cpr test user1" {}
 let _ = DarkInternal.insertUser_v2_ster user2 user2Email "cpr test user2" {}
 let startingPermission = DarkInternal.checkPermission_v0 user1 user2
 let _ = DarkInternal.grant_v0_ster user1 user2 "r" in
 [DarkInternal.checkPermission_v0 user1 user2; startingPermission] ) = ["r" ; ""]

[test.checkPermission with r]
(let user1 = ("cprw_user1_" ++ (String.random 5)) |> String.toLowercase_v1
 let user2 = ("cprw_user2_" ++ (String.random 5)) |> String.toLowercase_v1
 let user1Email = user1 ++ "-test@darklang.com"
 let user2Email = user2 ++ "-test@darklang.com"
 let _ = DarkInternal.insertUser_v2_ster user1 user1Email "cprw test user1" {}
 let _ = DarkInternal.insertUser_v2_ster user2 user2Email "cprw test user2" {}
 let startingPermission = DarkInternal.checkPermission_v0 user1 user2
 let _ = DarkInternal.grant_v0_ster user1 user2 "rw" in
 [DarkInternal.checkPermission_v0 user1 user2; startingPermission] ) = ["rw" ; ""]


[test.canvasId length]
(let _ = DarkInternal.clearStaticAssets "test-canvas-id-of-canvas-name"  // get the canvas created
 DarkInternal.canvasIdOfCanvasName_v0 "test-canvas-id-of-canvas-name") |> Option.map_v1 (fun x -> String.length_v1 x) = Just 36
