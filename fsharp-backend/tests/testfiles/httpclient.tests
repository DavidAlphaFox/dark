// Most of the httpclient tests are in tests/httpclienttestfiles.

// -----------------------
// Tests that don't use the internet
// -----------------------

HttpClient.formContentType_v0 = {``Content-Type`` = "application/x-www-form-urlencoded"}

HttpClient.jsonContentType_v0 = {``Content-Type`` = "application/json; charset=utf-8"}

HttpClient.plainTextContentType_v0 = {``Content-Type`` = "text/plain; charset=utf-8"}

HttpClient.htmlContentType_v0 = {``Content-Type`` = "text/html; charset=utf-8" }

HttpClient.bearerToken_v0 "YWxhZGRpbjpvcGVuc2VzYW1l" = { Authorization = "Bearer YWxhZGRpbjpvcGVuc2VzYW1l"}

HttpClient.bearerToken_v1 "YWxhZGRpbjpvcGVuc2VzYW1l" = { Authorization = "Bearer YWxhZGRpbjpvcGVuc2VzYW1l"}

HttpClient.basicAuth_v0 "username" "password" = { Authorization = "Basic dXNlcm5hbWU6cGFzc3dvcmQ=" }
HttpClient.basicAuth_v0 "" "" = { Authorization = "Basic Og==" }
HttpClient.basicAuth_v0 "-" "" = Test.typeError_v0 "Username cannot contain a colon"
HttpClient.basicAuth_v0 "" "-" = { Authorization = "Basic Oi0=" }
HttpClient.basicAuth_v0 ":" "" = { Authorization = "Basic Ojo=" }
HttpClient.basicAuth_v0 "" ":" = { Authorization = "Basic Ojo=" }

HttpClient.basicAuth_v1 "username" "password" = { Authorization = "Basic dXNlcm5hbWU6cGFzc3dvcmQ=" }
HttpClient.basicAuth_v1 "" "" = { Authorization = "Basic Og==" }
HttpClient.basicAuth_v1 "-" "" = Test.typeError_v0 "Username cannot contain a colon"
HttpClient.basicAuth_v1 "" "-" = { Authorization = "Basic Oi0=" }
HttpClient.basicAuth_v1 ":" "" = { Authorization = "Basic Ojo=" }
HttpClient.basicAuth_v1 "" ":" = { Authorization = "Basic Ojo=" }

HttpClient.get_v5 "{ ] nonsense ^#( :" {} {} = Error "Couldn't resolve host name" // OCAMLONLY
HttpClient.get_v5 "{ ] nonsense ^#( :" {} {} = Error "Invalid URI" // FSHARPONLY

// -----------------------
// Tests which should try to hit the actual internet
// -----------------------

// FSTODO: add these tests for all versions
HttpClient.get_v5 "http://thenonexistingurlforsure.com" {} {} = Error "Couldn't resolve host name" // OCAMLONLY
HttpClient.get_v5 "http://thenonexistingurlforsure.com" {} {} = Error "The request was aborted." // FSHARPONLY

HttpClient.get_v5 "https://self-signed.badssl.com" {} {} = Error "SSL peer certificate or SSH remote key was not OK" // OCAMLONLY
HttpClient.get_v5 "https://self-signed.badssl.com" {} {} = Error "The SSL connection could not be established, see inner exception." // FSHARPONLY

// -----------------------
// Tests for invalid URLs which shouldnt try the internet at all
// -----------------------
HttpClient.get_v5 "/just-a-path" {} {} = Error "URL using bad/illegal format or missing URL" // OCAMLONLY
HttpClient.get_v5 "/just-a-path" {} {} = Error "Unsupported protocol" // FSHARPONLY

// No F# version as these work in F#
HttpClient.get_v5 "http://us👨‍👩‍👧‍👦er@google.com" {} {} = Error "Couldn't resolve host name" // OCAMLONLY
HttpClient.get_v5 "http://:pa👨‍👩‍👧‍👦ss@google.com" {} {} = Error "URL using bad/illegal format or missing URL" // OCAMLONLY

(match HttpClient.get_v5 "http://localhost" {} {} with | Error e -> e.body) = "Service not ready"
(match HttpClient.get_v5 "http://127.0.0.1" {} {} with | Error e -> e.body) = "Service not ready"
(match HttpClient.get_v5 "http://0" {} {} with | Error e -> e.body) = "Service not ready"
(match HttpClient.get_v5 "http://0.0.0.0" {} {} with | Error e -> e.body) = "Service not ready"
HttpClient.get_v5 "ftp://speedtest.tele2.net/1KB.zip" {} {} = Error "Unsupported protocol"
HttpClient.get_v5 "file:///etc/passwd" {} {} = Error "Unsupported protocol"

// Before we limited the protocols for curl, .info.error was "",
// since Httpclient.http_call checked for a 2xx HTTP code. But the file
// contents ended up in the error message. Now we've restricted the URL
// protocols, so we get CURLE_UNSUPPORTED_PROTOCOL before a request
// is even sent.
HttpClient.get_v0 "file://localhost//etc/passwd" {} {} {} = Test.typeError_v0 "Internal HTTP-stack exception: Unsupported protocol" // OCAMLONLY
HttpClient.get_v5 "file://localhost//etc/passwd" {} {} = Error "Unsupported protocol"

// FSTODO add test for empty content (the None value to http_call) in get_v0

[test.http2]
(let response = HttpClient.get_v5_ster "https://httpbin.org/status/200" {} {} in
 let respHeaders = response.headers |> Dict.remove_v0 "date" in
 Dict.set_v0 response "headers" respHeaders) =
   { body = ""
     code = 200
     error = ""
     headers =
      {
        ``HTTP/2 200`` = ""
        ``access-control-allow-credentials`` = "true"
        ``access-control-allow-origin`` = "*"
        ``content-length`` = "0"
        ``content-type`` = "text/html; charset=utf-8"
        server = "gunicorn/19.9.0"
      }
     raw = ""}

