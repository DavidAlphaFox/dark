// only remaining things to port are the events for opentelemetry/honeycomb
let respond_or_redirect (parent : Span.t) (params : response_or_redirect_params)
    =
  match params with
  | Redirect {uri; headers} ->
      Span.set_attr parent "response.status" (`Int 302) ;
      S.respond_redirect ?headers ~uri ()
  | Respond {resp_headers; execution_id; status; body} ->
      let resp_headers =
        Header.add_list
          resp_headers
          [(Libshared.Header.execution_id, Types.string_of_id execution_id)]
      in
      (* add Content-Length if missing, e.g. when function is called directly
       * and not from `respond_or_redirect_empty_body`
       *)
      let resp_headers =
        if Header.get resp_headers "Content-Length" = None
        then
          Header.add
            resp_headers
            "Content-Length"
            (string_of_int (String.length body))
        else resp_headers
      in
      Span.set_attrs
        parent
        [ ("response.status", `Int (Cohttp.Code.code_of_status status))
        ; ("response.content_length", `Int (String.length body)) ] ;
      ( match Header.get resp_headers "content-type" with
      | Some ct ->
          Span.set_attr parent "response.content_type" (`String ct)
      | None ->
          () ) ;
      S.respond_string ~status ~body ~headers:resp_headers ()


(* NB: canvas in the DB is a string, not a uuid, because we do routing by canvas
 * name, not canvas_id (see the host_route type above).
 *
 * In addition:
 * - there are other place we use canvas_name as an fk; it's not great, but it's
 *   tech debt we can't solve today (for instance, iirc event queues do this)
 * - the external id will be part of a CNAME target - that is,
 *   some.customdomain.com -> ismith-foo.darkcustomdomain.com. Thus, if you were
 *   able to change your canvas' name (see previous bullet, you currently cannot),
 *   and we used canvas_id, now you'd have a CNAME pointing at the old
 *   canvas_name, but the custom_domains record would point to the new
 *   canvas_name (via JOIN canvases as c ON c.id = canvas_id). So that's not
 *   awesome either!
 *)




let canvas_handler
    ~(execution_id : Types.id)
    ~(canvas : string)
    ~(ip : string)
    ~(uri : Uri.t)
    ~(body : string)
    (parent : Span.t)
    (req : CRequest.t) : (Cohttp.Response.t * Cl.Body.t) Lwt.t =
  let verb = req |> CRequest.meth in
  match Account.for_host canvas with
  | None ->
      respond ~execution_id parent `Not_found "user not found"
  | Some owner ->
      let canvas_id = Serialize.fetch_canvas_id owner canvas in
      (* TODO make sure this resolves before returning *)
      let%lwt resp, body =
            user_page_handler
              ~execution_id
              ~canvas
              ~canvas_id
              ~ip
              ~uri
              ~body
              ~owner
              req
            |> respond_or_redirect parent
      in
      Lwt.async (fun () ->
          Stroller.heapio_track
            ~canvas_id
            ~canvas
            ~execution_id
            ~user_id:owner
            ~event:"canvas_traffic"
            Track
            (`Assoc
              [ ("verb", `String (verb |> Cohttp.Code.string_of_method))
              ; ("path", `String (uri |> Uri.path))
              ; ( "useragent"
                , `String
                    ( req
                    |> CRequest.headers
                    |> fun hs ->
                    Cohttp.Header.get hs Cohttp.Header.user_agent
                    |> Option.value ~default:"" ) )
              ; ("ip", `String ip)
              ; ( "status"
                , `Int
                    ( resp
                    |> Cohttp.Response.status
                    |> Cohttp.Code.code_of_status ) ) ])) ;

      Lwt.return (resp, body)


let callback
    ~k8s_callback
    (parent : Span.t)
    (ip : string)
    (req : CRequest.t)
    (body : string)
    (execution_id : Types.id) : (CResponse.t * Cl.Body.t) Lwt.t =
  let req = canonicalize_request req in
  let uri = CRequest.uri req in
  let handle_error ~(include_internals : bool) (e : exn) =
    try
      let bt = Exception.get_backtrace () in
      let%lwt _ =
        match e with
        | Exception.DarkException e when e.tipe = EndUser ->
            Lwt.return `Disabled
        | _ ->
            Rollbar.report_lwt
              e
              bt
              (Remote (request_to_rollbar body req))
              (Types.show_id execution_id)
      in
      let real_err =
        try
          match e with
          | Pageable.PageableExn (Exception.DarkException e)
          | Exception.DarkException e ->
              e
              |> Exception.exception_data_to_yojson
              |> Yojson.Safe.pretty_to_string
          | Yojson.Json_error msg ->
              "Not a valid JSON value: '" ^ msg ^ "'"
          | _ ->
              "Dark Internal Error: " ^ Exn.to_string e
        with _ -> "UNHANDLED ERROR: real_err"
      in
      let real_err =
        real_err
        (* Commented out because API handlers need to be JSON decoded *)
        (* ^ (Exception.get_backtrace () *)
        (*             |> Exception.backtrace_to_string) *)
      in
      Log.erroR
        real_err
        ~bt
        ~params:[("execution_id", Types.string_of_id execution_id)] ;
      match e with
      | Exception.DarkException e when e.tipe = EndUser ->
          respond ~execution_id parent `Bad_request e.short
      | Exception.DarkException e when e.tipe = DarkClient ->
          respond ~execution_id parent `Bad_request real_err
      | _ ->
          let body =
            if include_internals || Config.show_stacktrace
            then real_err
            else
              "Dark Internal Error: Dark - the service running this application - encountered an error. This problem is a bug in Dark, we're sorry! Our automated systems have noted this error and we are working to resolve it. The author of this application can post in our slack (darkcommunity.slack.com) for more information."
          in
          respond ~execution_id parent `Internal_server_error body
    with e ->
      let bt = Exception.get_backtrace () in
      Rollbar.last_ditch e ~bt "handle_error" (Types.show_id execution_id) ;
      respond ~execution_id parent `Internal_server_error "unhandled error"
  in
  try
    canvas_handler ~execution_id ~canvas ~ip ~uri ~body parent req
  with e -> handle_error ~include_internals:false e

