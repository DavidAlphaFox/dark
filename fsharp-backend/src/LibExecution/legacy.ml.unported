open Core_kernel
open Types
open Types.RuntimeT

module PrettyRequestJsonV0 = struct
  (* Returns the string within string-ish values, without adornment. *)
  let as_string (dv : dval) : string =
    match dv with
    | DInt i ->
        Dint.to_string i
    | DBool true ->
        "true"
    | DBool false ->
        "false"
    | DStr s ->
        Unicode_string.to_string s
    | DFloat f ->
        string_of_float f
    | DCharacter c ->
        Unicode_string.Character.to_string c
    | DNull ->
        "null"
    | DDate d ->
        Util.isostring_of_date d
    | DDB dbname ->
        dbname
    | DError (_, msg) ->
        msg
    | DUuid uuid ->
        Uuidm.to_string uuid
    | _ ->
        "<" ^ (dv |> Dval.tipename) ^ ">"


  let as_literal (dv : dval) : string =
    match dv with
    | DStr s ->
        "\"" ^ Unicode_string.to_string s ^ "\""
    | DCharacter c ->
        "'" ^ Unicode_string.Character.to_string c ^ "'"
    | _ ->
        as_string dv


  let is_primitive (dv : dval) : bool =
    match dv with
    | DInt _ | DFloat _ | DBool _ | DNull | DCharacter _ | DStr _ ->
        true
    | _ ->
        false


  let is_stringable (dv : dval) : bool =
    match dv with
    | DBlock _
    | DIncomplete _
    | DError _
    | DDate _
    | DPassword _
    | DDB _
    | DUuid _ ->
        true
    | _ ->
        is_primitive dv


  (* A simple representation, showing primitives as their expected literal
   * syntax, and odd types get type info in a readable format. Compund
   * types are listed as their type only *)
  let to_simple_repr ?(open_ = "<") ?(close_ = ">") (dv : dval) : string =
    let wrap value = open_ ^ (dv |> Dval.tipename) ^ ": " ^ value ^ close_ in
    match dv with
    | dv when is_primitive dv ->
        as_literal dv
    | dv when is_stringable dv ->
        wrap (as_string dv)
    | _ ->
        open_ ^ (dv |> Dval.tipename) ^ close_


  let dhttp_to_formatted_string (d : dhttp) : string =
    match d with
    | Redirect url ->
        "302 " ^ url
    | Response (c, hs) ->
        let string_of_headers hs =
          hs
          |> List.map ~f:(fun (k, v) -> k ^ ": " ^ v)
          |> String.concat ~sep:","
          |> fun s -> "{ " ^ s ^ " }"
        in
        string_of_int c ^ " " ^ string_of_headers hs


  (* A full representation, building on to_simple_repr, but including
 * lists and objects. *)
  let rec to_pretty_request_json_v0 (dv : dval) : string =
    let pp = true in
    let open_ = "<" in
    let close_ = ">" in
    let reprfn = to_simple_repr ~open_ ~close_ in
    let rec to_repr_ (indent : int) (pp : bool) (dv : dval) : string =
      let nl = if pp then "\n" ^ String.make indent ' ' else " " in
      let inl = if pp then "\n" ^ String.make (indent + 2) ' ' else "" in
      let indent = indent + 2 in
      match dv with
      | dv when is_stringable dv ->
          reprfn dv
      | DResp (h, hdv) ->
          dhttp_to_formatted_string h ^ nl ^ to_repr_ indent pp hdv
      | DList l ->
          if List.is_empty l
          then "[]"
          else
            "[ "
            ^ inl
            ^ String.concat ~sep:", " (List.map ~f:(to_repr_ indent pp) l)
            ^ nl
            ^ "]"
      | DObj o ->
          if DvalMap.is_empty o
          then "{}"
          else
            let strs =
              DvalMap.foldl o ~init:[] ~f:(fun ~key ~value l ->
                  (key ^ ": " ^ to_repr_ indent pp value) :: l)
            in
            "{ " ^ inl ^ String.concat ~sep:("," ^ inl) strs ^ nl ^ "}"
      | DOption OptNothing ->
          "Nothing"
      | DOption (OptJust dv) ->
          "Just " ^ to_repr_ indent pp dv
      | DErrorRail dv ->
          "ErrorRail: " ^ to_repr_ indent pp dv
      | _ ->
          failwith ("printing an unprintable value:" ^ to_simple_repr dv)
    in
    to_repr_ 0 pp dv
end
