==================
fn decl with single param
==================

let helloWorld (i: Int64): String = "Hello world"

---

(source_file
  (fn_decl
    (keyword)
    (fn_identifier)
    (fn_decl_params
      (fn_decl_param
        (symbol)
        (variable_identifier)
        (symbol)
        (type_reference (builtin_type))
        (symbol)
      )
    )
    (symbol)
    (type_reference (builtin_type))
    (symbol)
    (simple_expression (string_literal (symbol) (string_content) (symbol)))
  )
)


==================
fn decl with single unit param
==================

let emptyString (): String = ""

---

(source_file
  (fn_decl
    (keyword)
    (fn_identifier)
    (fn_decl_params (unit))
    (symbol)
    (type_reference (builtin_type))
    (symbol)
    (simple_expression (string_literal (symbol) (symbol)))
  )
)


==================
fn decl with multiple params
==================

let isHigher (a: Int64) (b: Int64): Bool =
  Int64.isGreaterThan a b

---

(source_file
  (fn_decl
    (keyword)
    (fn_identifier)
    (fn_decl_params
      (fn_decl_param (symbol) (variable_identifier) (symbol) (type_reference (builtin_type)) (symbol))
      (fn_decl_param (symbol) (variable_identifier) (symbol) (type_reference (builtin_type)) (symbol))
    )
    (symbol)
    (type_reference (builtin_type))
    (symbol)
    (indent)
    (expression
      (apply
        (qualified_fn_name (module_identifier) (symbol) (fn_identifier))
        (simple_expression (variable_identifier))
        (simple_expression (variable_identifier))
      )
    )
    (dedent)
  )
)


==================
fn decl with type parameters
==================

let myFn<'a> (param: 'a): Unit = ()

---

(source_file
  (fn_decl
    (keyword)
    (fn_identifier)
    (type_params (symbol) (type_params_items (variable_type_reference (symbol) (variable_identifier))) (symbol))
    (fn_decl_params
      (fn_decl_param
        (symbol)
        (variable_identifier)
        (symbol)
        (type_reference
          (builtin_type (variable_type_reference  (symbol) (variable_identifier)))
        )
        (symbol)
      )
    )
    (symbol)
    (type_reference (builtin_type))
    (symbol)
    (simple_expression (unit))))


==================
fn decl with two type parameters
==================

let myFn<'a, 'b> (param: 'a): 'b = param

---
(source_file
  (fn_decl
    (keyword) (fn_identifier)
    (type_params
      (symbol)
      (type_params_items (variable_type_reference (symbol) (variable_identifier))
      (symbol)
      (variable_type_reference (symbol) (variable_identifier)))
      (symbol))
    (fn_decl_params
      (fn_decl_param
        (symbol)
        (variable_identifier)
        (symbol)
        (type_reference (builtin_type (variable_type_reference (symbol) (variable_identifier))))
        (symbol)
      )
    )
    (symbol)
    (type_reference (builtin_type (variable_type_reference (symbol) (variable_identifier))))
    (symbol)
    (simple_expression (variable_identifier))
  )
)



==================
fn decl - with printLine call
==================

let helloworld () : Int64 =
  let _ = Builtin.printLine ("Hello, World!")
  0L

---

(source_file
  (fn_decl
    (keyword) (fn_identifier) (fn_decl_params (unit)) (symbol)
    (type_reference (builtin_type)) (symbol)
    (indent)
    (expression
      (let_expression
        (keyword)
        (variable_identifier)
        (symbol)
        (expression
          (apply
            (qualified_fn_name (module_identifier) (symbol) (fn_identifier))
            (paren_expression
              (symbol)
              (expression (simple_expression (string_literal (symbol) (string_content) (symbol))))
              (symbol)
            )
          )
        )
        (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol)))))
      )
    (dedent)
  )
)

