
==================
basic script with type decl, fn decl, and some exprs
==================

type MyInt = Int64

let myFn (): String = "hello"

"test"

let x = 1L + 2L

Builtin.printLine (myFn ())

---

(source_file
  (type_decl (keyword) (type_identifier) (symbol) (type_decl_def (type_decl_def_alias (type_reference (builtin_type)))))
  (fn_decl
    (keyword)
    (fn_identifier)
    (fn_decl_params (unit))
    (symbol)
    (type_reference (builtin_type))
    (symbol)
    (expression (simple_expression (string_segment (string_literal (symbol) (string_content) (symbol)))))
  )
  (expression (simple_expression (string_segment (string_literal (symbol) (string_content) (symbol)))))
  (expression
    (let_expression
      (keyword)
      (let_pattern (variable_identifier))
      (symbol)
      (expression
        (infix_operation
          (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
          (operator)
          (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
        )
      )
      (expression
        (apply
          (qualified_fn_name
            (module_identifier)
            (symbol)
            (fn_identifier))
          (paren_expression
            (symbol)
            (expression
              (apply
                (qualified_fn_name (fn_identifier))
                (simple_expression (unit))))
            (symbol)
          )
          (newline)
        )
      )
    )
  )
)


==================
script with fn decl and a function call
==================

let helloworld () : Int64 =
  let _ = Builtin.printLine ("Hello, World!")
  0L

helloworld ()

---

(source_file
  (fn_decl
    (keyword) (fn_identifier) (fn_decl_params (unit)) (symbol)
    (type_reference (builtin_type)) (symbol)
    (indent)
    (expression
      (let_expression
        (keyword)
        (let_pattern (variable_identifier))
        (symbol)
        (expression
          (apply
            (qualified_fn_name (module_identifier) (symbol) (fn_identifier))
            (paren_expression
              (symbol)
              (expression (simple_expression (string_segment (string_literal (symbol) (string_content) (symbol)))))
              (symbol)
            )
          )
        )
      (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol)))))
    )
    (dedent)
  )

  (expression
    (apply (qualified_fn_name (fn_identifier)) (simple_expression (unit)) (newline))
  )
)