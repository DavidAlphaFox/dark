==================
basic infix operation parsing
==================

a + b

---

(source_file
  (expression
    (infix_operation
      (expression (variable_identifier))
      (operator)
      (expression (variable_identifier))
    )
  )
)


==================
infix + is left associative
i.e. `a + b + c` should be parsed as `(a + b) + c`
==================

a + b + c

---

(source_file
  (expression
    (infix_operation
      (expression
        (infix_operation
          (expression (variable_identifier))
          (operator)
          (expression (variable_identifier))
        )
      )
      (operator)
      (expression (variable_identifier))
    )
  )
)


==================
infix * has higher precedence than infix +
i.e `a + b * c` should be parsed as `a + (b * c)`
==================

a + b * c

---

(source_file
  (expression
    (infix_operation
      (expression (variable_identifier))
      (operator)
      (expression
        (infix_operation
          (expression (variable_identifier))
          (operator)
          (expression (variable_identifier))
        )
      )
    )
  )
)


==================
infix ^ has higher precedence than infix *
i.e. `a * b ^ c` should be parsed as `a * (b ^ c)`
==================
a * b ^ c

---

(source_file
  (expression
    (infix_operation
      (expression (variable_identifier))
      (operator)
      (expression
        (infix_operation
          (expression (variable_identifier))
          (operator)
          (expression (variable_identifier))
        )
      )
    )
  )
)



==================
comparison operator >
==================

a > b

---

(source_file
  (expression
    (infix_operation
      (expression (variable_identifier))
      (operator)
      (expression (variable_identifier))
    )
  )
)


==================
comparison operator <
==================

a < b

---

(source_file
  (expression
    (infix_operation
      (expression (variable_identifier))
      (operator)
      (expression (variable_identifier))
    )
  )
)


==================
comparison operator >=
==================

a >= b

---

(source_file
  (expression
    (infix_operation
      (expression (variable_identifier))
      (operator)
      (expression (variable_identifier))
    )
  )
)


==================
comparison operator <=
==================

a <= b

---

(source_file
  (expression
    (infix_operation
      (expression (variable_identifier))
      (operator)
      (expression (variable_identifier))
    )
  )
)


==================
comparison operator ==
==================

a == b

---

(source_file
  (expression
    (infix_operation
      (expression (variable_identifier))
      (operator)
      (expression (variable_identifier))
    )
  )
)


==================
comparison operator !=
==================

a != b

---

(source_file
  (expression
    (infix_operation
      (expression (variable_identifier))
      (operator)
      (expression (variable_identifier))
    )
  )
)


==================
exponent operator ^
==================

a ^ b

---

(source_file
  (expression
    (infix_operation
      (expression (variable_identifier))
      (operator)
      (expression (variable_identifier))
    )
  )
)

==================
string concatenation operator ++
==================

a ++ b

---

(source_file
  (expression
    (infix_operation
      (expression (variable_identifier))
      (operator)
      (expression (variable_identifier))
    )
  )
)


==================
basic function call (hacky)
==================

Bool.and (true) (false)

---

(source_file
  (expression
    (function_call
      (qualified_fn_name (module_identifier) (symbol) (fn_identifier))
      (paren_expression (symbol) (expression (bool_literal)) (symbol))
      (paren_expression (symbol) (expression (bool_literal)) (symbol))
    )
  )
)

==================
how function calls _should_ work (broken)
==================

Bool.and (true) (false)

---

(source_file
  (expression
    (function_call
      (qualified_fn_name (module_identifier) (symbol) (fn_identifier))
      (paren_expression (symbol) (expression (bool_literal)) (symbol))
      (paren_expression (symbol) (expression (bool_literal)) (symbol))
    )
  )
)