==================
basic infix operation parsing
==================

a + b

---

(source_file
  (expression
    (infix_operation
      (expression (simple_expression (variable_identifier)))
      (operator)
      (expression (simple_expression (variable_identifier)))
    )
  )
)


==================
infix + is left associative
i.e. `a + b + c` should be parsed as `(a + b) + c`
==================

a + b + c

---

(source_file
  (expression
    (infix_operation
      (expression
        (infix_operation
          (expression (simple_expression (variable_identifier)))
          (operator)
          (expression (simple_expression (variable_identifier)))
        )
      )
      (operator)
      (expression (simple_expression (variable_identifier)))
    )
  )
)


==================
infix * has higher precedence than infix +
i.e `a + b * c` should be parsed as `a + (b * c)`
==================

a + b * c

---

(source_file
  (expression
    (infix_operation
      (expression (simple_expression (variable_identifier)))
      (operator)
      (expression
        (infix_operation
          (expression (simple_expression (variable_identifier)))
          (operator)
          (expression (simple_expression (variable_identifier)))
        )
      )
    )
  )
)


==================
infix ^ has higher precedence than infix *
i.e. `a * b ^ c` should be parsed as `a * (b ^ c)`
==================

a * b ^ c

---

(source_file
  (expression
    (infix_operation
      (expression (simple_expression (variable_identifier)))
      (operator)
      (expression
        (infix_operation
          (expression (simple_expression (variable_identifier)))
          (operator)
          (expression (simple_expression (variable_identifier)))
        )
      )
    )
  )
)



==================
comparison operator >
==================

a > b

---

(source_file
  (expression
    (infix_operation
      (expression (simple_expression (variable_identifier)))
      (operator)
      (expression (simple_expression (variable_identifier)))
    )
  )
)


==================
comparison operator <
==================

a < b

---

(source_file
  (expression
    (infix_operation
      (expression (simple_expression (variable_identifier)))
      (operator)
      (expression (simple_expression (variable_identifier)))
    )
  )
)


==================
comparison operator >=
==================

a >= b

---

(source_file
  (expression
    (infix_operation
      (expression (simple_expression (variable_identifier)))
      (operator)
      (expression (simple_expression (variable_identifier)))
    )
  )
)


==================
comparison operator <=
==================

a <= b

---

(source_file
  (expression
    (infix_operation
      (expression (simple_expression (variable_identifier)))
      (operator)
      (expression (simple_expression (variable_identifier)))
    )
  )
)


==================
comparison operator ==
==================

a == b

---

(source_file
  (expression
    (infix_operation
      (expression (simple_expression (variable_identifier)))
      (operator)
      (expression (simple_expression (variable_identifier)))
    )
  )
)


==================
comparison operator !=
==================

a != b

---

(source_file
  (expression
    (infix_operation
      (expression (simple_expression (variable_identifier)))
      (operator)
      (expression (simple_expression (variable_identifier)))
    )
  )
)


==================
exponent operator ^
==================

a ^ b

---

(source_file
  (expression
    (infix_operation
      (expression (simple_expression (variable_identifier)))
      (operator)
      (expression (simple_expression (variable_identifier)))
    )
  )
)

==================
string concatenation operator ++
==================

a ++ b

---

(source_file
  (expression
    (infix_operation
      (expression (simple_expression (variable_identifier)))
      (operator)
      (expression (simple_expression (variable_identifier)))
    )
  )
)


==================
basic function call
==================

Bool.and true false

---

(source_file
  (expression
    (apply
      (qualified_fn_name (module_identifier) (symbol) (fn_identifier))
      (simple_expression (bool_literal))
      (simple_expression (bool_literal))
      (newline)
    )
  )
)


==================
function call with function call as argument
==================

Bool.and (Bool.and true false) false

---

(source_file
  (expression
    (apply
      (qualified_fn_name (module_identifier) (symbol) (fn_identifier))
      (paren_expression
        (symbol)
        (expression
          (apply
            (qualified_fn_name (module_identifier) (symbol) (fn_identifier))
            (simple_expression (bool_literal))
            (simple_expression (bool_literal))
          )
        )
        (symbol)
      )
      (simple_expression (bool_literal))
      (newline)
    )
  )
)


==================
function call test
==================

Builtin.printLine (getTitle curiousGeorgeBookId)

0L

---

(source_file
  (expression
    (apply
      (qualified_fn_name (module_identifier) (symbol) (fn_identifier))
      (paren_expression
        (symbol)
        (expression
          (apply (qualified_fn_name (fn_identifier)) (simple_expression (variable_identifier))))
        (symbol)
      )
      (newline)
    )
  )
  (expression
    (simple_expression
      (int64_literal
        (digits
          (positive_digits))
        (symbol)))))