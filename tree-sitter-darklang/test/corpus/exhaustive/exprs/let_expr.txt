==================
simple let_expression
==================

let x = 1L
x

---

(source_file
  (expression
    (let_expression
      (keyword) (let_pattern (variable_identifier)) (symbol)
      (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
      (expression (simple_expression (variable_identifier)))
    )
  )
)


==================
simple let_expression -with indent
==================

let x =
  1L
x

---

(source_file
  (expression
    (let_expression
      (keyword) (let_pattern (variable_identifier)) (symbol)
      (indent)
      (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
      (dedent)
      (expression (simple_expression (variable_identifier)))
    )
  )
)



==================
let expression with pipes -inline
==================

let x =
  1L |> Stdlib.Option.Option.Some
x

---

(source_file
  (expression
    (let_expression
      (keyword) (let_pattern (variable_identifier)) (symbol)
      (indent)
      (expression
        (pipe_expression
          (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
          (pipe_exprs
            (symbol)
            (pipe_expr
              (pipe_enum
                (qualified_type_name (module_identifier) (symbol) (module_identifier) (symbol) (type_identifier))
                (symbol) (enum_case_identifier)
              )
            )
          )
        )
      )
      (dedent)
      (expression (simple_expression (variable_identifier)))
    )
  )
)


==================
let expression with one pipe -indented
==================

let x =
  1L
  |> Stdlib.Option.Option.Some
x

---

(source_file
  (expression
    (let_expression
      (keyword) (let_pattern (variable_identifier)) (symbol)
      (indent)
      (expression
        (pipe_expression
          (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
          (pipe_exprs
            (symbol)
            (pipe_expr
              (pipe_enum
                (qualified_type_name (module_identifier) (symbol) (module_identifier) (symbol) (type_identifier))
                (symbol) (enum_case_identifier)
              )
            )
          )
        )
      )
      (dedent)
      (expression (simple_expression (variable_identifier)))
    )
  )
)


==================
let expression with multiple pipes -indented
==================

let wtTest =
  testSource
  |> LanguageTools.Parser.TestParsing.initialParse
  |> Test.parseTest
  |> Builtin.unwrap
wtTest

---

(source_file
  (expression
    (let_expression
      (keyword)
      (let_pattern (variable_identifier))
      (symbol)
      (indent)
      (expression
        (pipe_expression
          (expression
            (pipe_expression
              (expression
                (pipe_expression
                  (expression (simple_expression (variable_identifier)))
                  (pipe_exprs
                    (symbol)
                    (pipe_expr
                      (pipe_fn_call
                        (qualified_fn_name (module_identifier) (symbol) (module_identifier) (symbol) (module_identifier) (symbol) (fn_identifier))
                      )
                    )
                  )
                )
              )
              (pipe_exprs
                (symbol)
                (pipe_expr (pipe_fn_call (qualified_fn_name (module_identifier) (symbol) (fn_identifier))))
              )
            )
          )
          (pipe_exprs
            (symbol)
            (pipe_expr
              (pipe_fn_call (qualified_fn_name (module_identifier) (symbol) (fn_identifier)))
            )
          )
        )
      )
      (dedent)
      (expression (simple_expression (variable_identifier)))
    )
  )
)


==================
lp_tuple
==================

let (tokensSoFar, startOfLastToken) = acc
(tokensSoFar, startOfLastToken)

---

(source_file
  (expression
    (let_expression
      (keyword)
      (let_pattern
        (lp_tuple
          (symbol)
          (let_pattern (variable_identifier))
          (symbol)
          (let_pattern (variable_identifier))
          (symbol)
        )
      )
      (symbol)
      (expression (simple_expression (variable_identifier)))
      (expression
        (simple_expression
          (tuple_literal
            (symbol)
            (expression (simple_expression (variable_identifier)))
            (symbol)
            (expression (simple_expression (variable_identifier)))
            (symbol)
          )
        )
      )
    )
  )
)


==================
let expression with fn_call
==================

let x = Stdlib.Int64.add 1L 2L
x

---

(source_file
  (expression
    (let_expression
      (keyword) (let_pattern (variable_identifier)) (symbol)
      (expression
        (apply
          (qualified_fn_name (module_identifier) (symbol) (module_identifier) (symbol) (fn_identifier))
          (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
          (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
        )
      )
      (expression (simple_expression (variable_identifier)))
    )
  )
)


==================
let expression with fn_call -indented
==================

let x =
  Stdlib.Int64.add
    1L
    2L
x

---
(source_file
  (expression
    (let_expression
      (keyword) (let_pattern (variable_identifier)) (symbol)
      (indent)
      (expression
        (apply
          (qualified_fn_name (module_identifier) (symbol) (module_identifier) (symbol) (fn_identifier))
          (indent)
          (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
          (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
          (dedent)
        )
      )
      (dedent)
      (expression (simple_expression (variable_identifier)))
    )
  )
)


==================
let expression with if expression
==================

let x = if true then 1L else Stdlib.Int64.add 1L 2L
x
---

(source_file
  (expression
    (let_expression
      (keyword) (let_pattern (variable_identifier)) (symbol)
      (expression
        (if_expression
          (keyword)
          (expression (simple_expression (bool_literal)))
          (keyword)
          (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
          (keyword)
          (expression
            (apply (qualified_fn_name (module_identifier) (symbol) (module_identifier) (symbol) (fn_identifier))
              (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
              (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
            )
          )
        )
      )
      (expression (simple_expression (variable_identifier)))
    )
  )
)