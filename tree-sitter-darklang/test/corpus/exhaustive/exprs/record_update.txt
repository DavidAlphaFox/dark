==================
record update - single field
==================

{ RecordForUpdate { x = 4L; y = 1L } with y = 2L }

---

(source_file
  (expression
    (simple_expression
      (record_update
        (symbol)
        (expression
          (simple_expression (record_literal
            (qualified_type_name (type_identifier))
            (symbol)
            (record_content
              (record_pair
                (variable_identifier)
                (symbol)
                (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
              )
              (symbol)
              (record_pair
                (variable_identifier)
                (symbol)
                (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
              )
            )
            (symbol)
          ))
        )
        (keyword)
        (record_update_fields
          (record_update_field
            (variable_identifier)
            (symbol)
            (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
          )
        )
        (symbol)
      )
    )
  )
)


==================
record update - record as a variable
==================

let myRec = RecordForUpdate { x = 4L; y = 1L }
{ myRec with y = 2L }

---

(source_file
  (expression
    (let_expression
      (keyword)
      (let_pattern (variable_identifier))
      (symbol)
      (simple_expression (record_literal
        (qualified_type_name (type_identifier))
        (symbol)
        (record_content
          (record_pair
            (variable_identifier)
            (symbol)
            (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
          )
          (symbol)
          (record_pair
            (variable_identifier)
            (symbol)
            (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
          )
        )
        (symbol)
      ))
      (expression
        (simple_expression
          (record_update
            (symbol)
            (expression (simple_expression (variable_identifier)))
            (keyword)
            (record_update_fields
              (record_update_field
                (variable_identifier)
                (symbol)
                (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
              )
            )
            (symbol)
          )
        )
      )
    )
  )
)


==================
record update - multiple fields
==================

let myRec = RecordForUpdateMultipe { x = 4L; y = 1L; z = 0L }
{ myRec with y = 2L; z = 42L }

---

(source_file
  (expression
    (let_expression
      (keyword)
      (let_pattern (variable_identifier))
      (symbol)
      (simple_expression (record_literal
        (qualified_type_name (type_identifier))
        (symbol)
        (record_content
          (record_pair
            (variable_identifier)
            (symbol)
            (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
          )
          (symbol)
          (record_pair
            (variable_identifier)
            (symbol)
            (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
          )
          (symbol)
          (record_pair
            (variable_identifier)
            (symbol)
            (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
          )
        )
        (symbol))
      )
      (expression
        (simple_expression
          (record_update
            (symbol)
            (expression (simple_expression (variable_identifier)))
            (keyword)
            (record_update_fields
              (record_update_field
                (variable_identifier)
                (symbol)
                (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
              )
              (symbol)
              (record_update_field
                (variable_identifier)
                (symbol)
                (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
              )
            )
            (symbol)
          )
        )
      )
    )
  )
)


==================
record update - multiple fields, indented and on newlines
==================

(let myRec = RecordForUpdateMultipe { x = 4L; y = 1L; z = 0L }
  { myRec with
      z = 3L
      x = 42L
      y = 11L })

---
(source_file
  (expression
    (simple_expression
      (paren_expression
        (symbol)
        (expression
          (let_expression
            (keyword) (let_pattern (variable_identifier)) (symbol)
            (simple_expression
              (record_literal
                (qualified_type_name (type_identifier))
                (symbol)
                (record_content
                  (record_pair
                    (variable_identifier)
                    (symbol)
                    (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
                    )
                  (symbol)
                  (record_pair
                    (variable_identifier)
                    (symbol)
                    (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
                  )
                  (symbol)
                  (record_pair
                    (variable_identifier)
                    (symbol)
                    (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
                  )
                )
                (symbol)))
            (expression
              (simple_expression
                (record_update
                  (symbol)
                  (expression (simple_expression (variable_identifier)))
                  (keyword)
                  (record_update_fields
                    (indent)
                    (record_update_field
                      (variable_identifier)
                      (symbol)
                      (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                    )
                    (newline)
                    (record_update_field
                      (variable_identifier)
                      (symbol)
                      (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                    )
                    (newline)
                    (record_update_field
                      (variable_identifier)
                      (symbol)
                      (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                    )
                  )
                  (symbol)
                )
              )
            )
          )
        )
        (symbol)
      )
    )
  )
)


==================
record_update - apply
==================

{record with
  x = Stdlib.Int64.List.push [1L] 2L
  y = Stdlib.Int64.add 1L 2L
  z = Stdlib.Tuple.first (1L, 2L)
}

---

(source_file
  (expression
    (simple_expression
      (record_update
        (symbol)
        (expression (simple_expression (variable_identifier)))
        (keyword)
        (record_update_fields
          (indent)
          (record_update_field
            (variable_identifier)
            (symbol)
            (expression
              (apply
                (qualified_fn_name (module_identifier) (symbol) (module_identifier) (symbol) (module_identifier) (symbol) (fn_identifier))
                (simple_expression
                  (list_literal
                    (symbol)
                    (list_content (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol)))))
                    (symbol)
                  )
                )
                (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
              )
            )
          )
          (newline)

          (record_update_field
            (variable_identifier)
            (symbol)
            (expression
              (apply
                (qualified_fn_name (module_identifier) (symbol) (module_identifier) (symbol) (fn_identifier))
                (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
                (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
              )
            )
          )
          (newline)

          (record_update_field
            (variable_identifier)
            (symbol)
            (expression
              (apply
                (qualified_fn_name (module_identifier) (symbol) (module_identifier) (symbol) (fn_identifier))
                (simple_expression
                  (tuple_literal
                    (symbol)
                    (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                    (symbol)
                    (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                    (symbol)
                  )
                )
              )
            )
          )
          (dedent)
        )
        (symbol)
      )
    )
  )
)

==================
record_update - mix
==================

{record with
  x = MyEnum.A(1L, 2L)
  y = Stdlib.Int64.add 1L 2L
  z = 1L
}

---

(source_file
  (expression
    (simple_expression
      (record_update
        (symbol)
        (expression (simple_expression (variable_identifier)))
        (keyword)
        (record_update_fields
          (indent)

          (record_update_field
            (variable_identifier)
            (symbol)
            (expression
              (simple_expression
                (enum_literal
                  (qualified_type_name (type_identifier))
                  (symbol)
                  (enum_case_identifier)
                  (symbol)
                  (enum_fields
                    (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                    (symbol)
                    (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                  )
                  (symbol))
                )
              )
            )
          (newline)

          (record_update_field
            (variable_identifier)
            (symbol)
            (expression
              (apply
                (qualified_fn_name (module_identifier) (symbol) (module_identifier) (symbol) (fn_identifier))
                (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
                (simple_expression (int64_literal (digits (positive_digits)) (symbol)))
              )
            )
          )
          (newline)

          (record_update_field
            (variable_identifier)
            (symbol)
            (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
          )
          (dedent))
        (symbol)
      )
    )
  )
)


==================
record_update - apply
==================

{record with
  x =
    Stdlib.Int64.List.push
      [1L]
      2L
  y = 1L
}

---

(source_file
  (expression
    (simple_expression
      (record_update
        (symbol)
        (expression (simple_expression (variable_identifier)))
        (keyword)
        (record_update_fields
          (indent)
          (record_update_field
            (variable_identifier)
            (symbol)
            (indent)
            (expression
              (apply
                (qualified_fn_name (module_identifier) (symbol) (module_identifier) (symbol) (module_identifier) (symbol) (fn_identifier))
                (indent)
                (expression
                  (simple_expression
                    (list_literal
                      (symbol)
                      (list_content (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol)))))
                      (symbol)
                    )
                  )
                )
                (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
                (dedent)
              )
            )
            (dedent)
          )
          (record_update_field
            (variable_identifier)
            (symbol)
            (expression (simple_expression (int64_literal (digits (positive_digits)) (symbol))))
          )
          (dedent)
        )
        (symbol)
      )
    )
  )
)