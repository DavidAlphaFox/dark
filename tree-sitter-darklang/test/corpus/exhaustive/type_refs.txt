==================
all builtin type references
==================

type MyUnit = Unit
type MyBool = Bool
type MyInt8 = Int8
type MyInt16 = Int16
type MyInt32 = Int32
type MyInt64 = Int64
type MyInt128 = Int128
type MyUInt8 = UInt8
type MyUInt16 = UInt16
type MyUInt32 = UInt32
type MyUInt64 = UInt64
type MyUInt128 = UInt128
type MyFloat = Float
type MyChar = Char
type MyString = String
type MyList = List<String>
type MyTuple2 = (Int64 * String)
type MyTuple3 = (Int64 * String * Bool)
type MyTuple = (Int64 * String * Bool * Float * Char * Unit)

---

(source_file
  (type_decl (keyword) (type_identifier) (symbol) (type_reference (builtin_type)))
  (type_decl (keyword) (type_identifier) (symbol) (type_reference (builtin_type)))
  (type_decl (keyword) (type_identifier) (symbol) (type_reference (builtin_type)))
  (type_decl (keyword) (type_identifier) (symbol) (type_reference (builtin_type)))
  (type_decl (keyword) (type_identifier) (symbol) (type_reference (builtin_type)))
  (type_decl (keyword) (type_identifier) (symbol) (type_reference (builtin_type)))
  (type_decl (keyword) (type_identifier) (symbol) (type_reference (builtin_type)))
  (type_decl (keyword) (type_identifier) (symbol) (type_reference (builtin_type)))
  (type_decl (keyword) (type_identifier) (symbol) (type_reference (builtin_type)))
  (type_decl (keyword) (type_identifier) (symbol) (type_reference (builtin_type)))
  (type_decl (keyword) (type_identifier) (symbol) (type_reference (builtin_type)))
  (type_decl (keyword) (type_identifier) (symbol) (type_reference (builtin_type)))
  (type_decl (keyword) (type_identifier) (symbol) (type_reference (builtin_type)))
  (type_decl (keyword) (type_identifier) (symbol) (type_reference (builtin_type)))
  (type_decl (keyword) (type_identifier) (symbol) (type_reference (builtin_type)))
  (type_decl (keyword) (type_identifier) (symbol) (type_reference (builtin_type (list_type_reference (keyword) (symbol) (type_reference (builtin_type)) (symbol)))))
  (type_decl
    (keyword)
    (type_identifier)
    (symbol)
    (type_reference
      (builtin_type
        (tuple_type_reference
          (symbol)
          (type_reference
            (builtin_type))
          (symbol)
          (type_reference
            (builtin_type))
          (symbol)))))
  (type_decl
    (keyword)
    (type_identifier)
    (symbol)
    (type_reference
      (builtin_type
        (tuple_type_reference
          (symbol)
          (type_reference
            (builtin_type))
          (symbol)
          (type_reference
            (builtin_type))
          (type_reference_tuple_the_rest
            (symbol)
            (type_reference
              (builtin_type)))
          (symbol)))))
  (type_decl
    (keyword)
    (type_identifier)
    (symbol)
    (type_reference
      (builtin_type
        (tuple_type_reference
          (symbol)
          (type_reference
            (builtin_type))
          (symbol)
          (type_reference
            (builtin_type))
          (type_reference_tuple_the_rest
            (symbol)
            (type_reference
              (builtin_type))
            (symbol)
            (type_reference
              (builtin_type))
            (symbol)
            (type_reference
              (builtin_type))
            (symbol)
            (type_reference
              (builtin_type)))
          (symbol)))))
)


==================
(simple) qualified type identifier
==================

type ID = Test

---

(source_file
  (type_decl
    (keyword)
    (type_identifier)
    (symbol)
    (type_reference (qualified_type_name (type_identifier)))
  )
)

==================
multi-part qualified type identifier
==================

type ID = PACKAGE.Darklang.Stdlib.Option.Option

---

(source_file
  (type_decl
    (keyword)
    (type_identifier)
    (symbol)
    (type_reference
      (qualified_type_name
        (module_identifier)
        (symbol)
        (module_identifier)
        (symbol)
        (module_identifier)
        (symbol)
        (module_identifier)
        (symbol)
        (type_identifier)
      )
    )
  )
)