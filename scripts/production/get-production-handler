#!/usr/bin/env python3

# Script to do fetch data from production postgres

import psycopg2
import subprocess
import json
import base64
import sys

# Get the username and password
command = ["kubectl", "get", "secrets", "cloudsql-db-credentials", "-o", "json"]
creds = subprocess.check_output(command)
creds = json.loads(creds)["data"]
username = base64.b64decode(creds["username"]).decode("utf-8")
password = base64.b64decode(creds["password"]).decode("utf-8")

canvas_name = sys.argv[1]
tlid = sys.argv[2]
local_canvas_name = sys.argv[3]

print(
    f"Fetching from {canvas_name}, tlid {tlid}, and slotting it into {local_canvas_name}"
)

# Connect to production DB
prod = psycopg2.connect(dbname="postgres",
                        port=2346,
                        host="localhost",
                        user=username,
                        password=password,
                        options='-c statement_timeout=2000')

# Connect to local DB
local = psycopg2.connect(dbname="devdb", port=5432, user="dark", password="dark")

# Fetch the canvas ID
pcur = prod.cursor()
pcur.execute("SELECT id FROM canvases WHERE name=%s", (canvas_name, ))
(prod_canvas_id) = pcur.fetchone()
print("Got production id", prod_canvas_id)

# Fetch the data from prod
pcur = prod.cursor()
pcur.execute(
    "SELECT\
      digest, tipe, name, module, modifier, data, rendered_oplist_cache,\
      deleted, pos, oplist, oplist_cache\
     FROM toplevel_oplists\
     WHERE canvas_id=%s\
       AND tlid=%s\
     LIMIT 1", (prod_canvas_id, tlid))
(digest, tipe, name, module, modifier, data, rendered_oplist_cache, deleted, pos,
 oplist, oplist_cache) = pcur.fetchone()
print("row", name, module, modifier, name, tipe, digest, len(data), pos, deleted)
prod = None  # Kill it so we can't do anything by accident

# Fetch the local ID
lcur = local.cursor()
lcur.execute("SELECT id, account_id FROM canvases WHERE name=%s",
             (local_canvas_name, ))
(local_canvas_id, local_account_id) = lcur.fetchone()
print("Got local ids", local_canvas_id, local_account_id)

lcur = local.cursor()
lcur.execute("""
  INSERT INTO toplevel_oplists
    (canvas_id, account_id, tlid, digest, tipe, name, module, modifier, data,
     rendered_oplist_cache, deleted, pos, oplist, oplist_cache)
  VALUES
    (%s, %s, %s, %s, %s, %s, %s, %s,%s, %s,%s, %s, %s, %s)
  """,\
  (local_canvas_id, local_account_id, tlid, digest, tipe, name, module, modifier, data,\
    rendered_oplist_cache, deleted, json.dumps(pos), oplist, oplist_cache))
local.commit()
print("Done")
