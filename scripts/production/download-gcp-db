#!/usr/bin/env bash
. ./scripts/devcontainer/_assert-in-container "$0" "$@"

set -euo pipefail

# Exports are created directly by https://darklang.com/a/ops-gcpdb
DB=prodclone

# get list | drop last file | drop all columns except filename | sort to get latest | get first | trim whitespace
GSFILENAME="$(gcloud storage ls -l gs://download-gcp-db/sqldump_*.gz | head -n-1 | cut -d" " -f5- | sort -r | head -n1 | awk '{$1=$1;print}')"
echo "Using latest DB export: ${GSFILENAME}"

FILENAME="${GSFILENAME//gs:\/\/download-gcp-db\//}"
LOGFILE="${FILENAME}.log"

###########################
echo "Downloading $GSFILENAME contents"
###########################
gcloud storage cp "$GSFILENAME" "$FILENAME"

###########################
echo "Dropping existing DB $DB (killing existing connections)"
###########################
killall psql || true
killall server.exe || true
killall queue_worker.exe || true
killall cron_checker.exe || true
killall Tests.exe || true
killall ApiServer.exe || true
killall BwdServer.exe || true
killall QueueWorker.exe || true
killall CronChecker.exe || true
dropdb --if-exists $DB
createdb "$DB"

###########################
echo "Applying $DB (logging to $LOGFILE)"
###########################
# There are some permission statements for cloudsql that are not relevant
cat "$FILENAME" | gunzip --keep --stdout | grep -v cloudsql | pv | psql -d "$DB" > "$LOGFILE"

echo "Done"
