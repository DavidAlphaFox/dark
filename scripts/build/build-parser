#!/usr/bin/env bash
. ./scripts/devcontainer/_assert-in-container "$0" "$@"

set -euo pipefail

# install dependencies
cd parser/tree-sitter-darklang
npm i

# build the parser and generate the bindings
npm run build-parser
npm run build-wasm-bindings


# make parser binaries for the current platform
zig cc -o tree-sitter-darklang.so -shared src/parser.c -Isrc -O3 -fPIC


# Optionally cross-compile to other platforms
if [[ "$#" -gt 0 && "$1" == "--cross-compile" ]]; then
  rm -rf xplat-builds
  mkdir xplat-builds

  declare -A targets=(
    # TODO it seems i386 targets aren't working - commented out for now

    ["x86_64-windows-gnu"]="tree-sitter-darklang-windows-x86_64.dll"
    #["i386-windows-gnu"]="tree-sitter-darklang-windows-i386.dll"

    ["x86_64-linux-gnu"]="tree-sitter-darklang-linux-x86_64.so"
    #["i386-linux-gnu"]="tree-sitter-darklang-linux-i386.so"
    ["aarch64-linux-gnu"]="tree-sitter-darklang-linux-aarch64.so"
    ["arm-linux-gnueabi"]="tree-sitter-darklang-linux-arm.so"

    ["x86_64-macos"]="tree-sitter-darklang-macOS-x86_64.dylib"
    ["aarch64-macos"]="tree-sitter-darklang-macOS-aarch64.dylib"
  )
  for target in "${!targets[@]}"; do
    zig cc -target $target -o "xplat-builds/${targets[$target]}" -shared src/parser.c -Isrc -O3
  done

  echo "Compilation completed successfully for all targets."
fi

cd ../..

# copy the WASM bindings to vscode-extension/static
# , so the .wasm file can be used for syntax highlighting, etc.
mkdir -p vscode-extension/static/tree-sitter
cp parser/tree-sitter-darklang/bindings/tree-sitter-darklang.wasm vscode-extension/static/tree-sitter/


# copy `tree-sitter-darklang.so` to `backend/src/LibTreeSitter.Darklang`
# , so it can be referenced via P/Invoke
cp parser/tree-sitter-darklang/tree-sitter-darklang.so backend/src/LibTreeSitter.Darklang

python3 ./scripts/generate_tree-sitter_bindings.py