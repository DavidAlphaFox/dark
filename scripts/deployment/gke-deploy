#!/usr/bin/env bash
. ./scripts/devcontainer/_assert-in-container "$0" "$@"

set -euo pipefail

# Deploy Dark to production

MANIFEST=""

HELP="$(cat <<EOF
Usage: $0 [OPTIONS]

Deployment script for CI

Options:
  --manifest=...
  --help            Display this menu.
EOF
)"

for i in "$@"
do
  case "${i}" in
    --manifest=*)
      MANIFEST="${i/--manifest=/''}"
      ;;
    --help)
      echo "$HELP"
      exit 0
      ;;
    *)
      echo "Unexpected argument: $i"
      echo "$HELP"
      exit 1
      ;;
  esac
done

set -x


#############################
# get variables now so this fails early if they're not available
#############################
LOCAL_USERNAME="$(grep 'account' ~/.config/gcloud/configurations/config_default | awk '{print $3}' | awk -F "@" '{print $1}')"

#############################
# Build the deployment template files
#############################
CHANGE_CAUSE="circle=${CIRCLE_BUILD_URL} ; orig-time: $(date); git-commit: $(git rev-parse --short HEAD)"

./scripts/deployment/shipit release prepare --args CHANGE_CAUSE="${CHANGE_CAUSE}" --manifest="$MANIFEST"

#############################
# Lock before doing a deploy (unlocks on fail or at end of file)
#############################

LOCKFILE_ID=""
cleanup_deploy_lock() {
  trap '' EXIT # some shells will call EXIT after the INT handler
  if [[ "${LOCKFILE_ID}" != "" ]];
  then
    echo "Removing deploy lock"
    ./scripts/deployment/deploy-lock-remove "${LOCKFILE_ID}"
  else
    echo "Not removing deploy lock, no deploy lock to remove"
  fi
  exit 1
}

# Make sure we remove the lockfile if this script exits early for some reason
trap cleanup_deploy_lock INT QUIT TERM ERR

# We source this instead of running it in a subshell so that the trap works as expected
LOCKFILE_ID="$(echo ${CIRCLE_BUILD_URL} | grep -Eo '[0-9]+$')"
./scripts/deployment/deploy-lock-acquire "${LOCKFILE_ID}"


#############################
# Check it's safe to deploy
#############################

# Check that the prod cluster matches our view of the world, once we have the lock
./scripts/deployment/shipit manual diff

# Check that the everything can be deployed
./scripts/deployment/shipit release push --dry-run

#############################
# Actually do the deploy
#############################

# TODO: add an override configmap that all the containers use
# TODO: make the configmap a per-deploy setting - we don't want to break old deployments with a new setting
# env vars (replace existing configmap)
kubectl create configmap gke-dark-prod --from-env-file config/gke-builtwithdark -o yaml --dry-run=client | kubectl replace -f -

# Old stuff
kubectl create configmap base-nginx --from-file=containers/ocaml-nginx/base-nginx.conf -o yaml --dry-run=client | kubectl replace -f -
kubectl create configmap nginx --from-file=containers/ocaml-nginx/nginx.conf -o yaml --dry-run=client | kubectl replace -f -
# CLEANUP: we can remove the `nginx` configmap once the users are long gone

# deploy the config for the newly-created deployment containers
./scripts/deployment/shipit release push

#########################
# Tell everyone about the deploy
#########################

# Tell rollbar
ROLLBAR_ACCESS_TOKEN="ac042ea56b054bbdbddbfffaa149004e"
curl -s https://api.rollbar.com/api/1/deploy/ \
  -F "access_token=${ROLLBAR_ACCESS_TOKEN}" \
  -F "environment=production" \
  -F "revision=$(git rev-parse --short HEAD)" \
  -F "comment=${CIRCLE_BUILD_URL}" \
  -F "local_username=${LOCAL_USERNAME}" > /dev/null
echo "Rollbar notified."

# Tell honeycomb
# Docs: https://docs.honeycomb.io/working-with-your-data/customizing-your-query/markers
HONEYCOMB_DATASETS="integration-tests\n
kubernetes-bwd-nginx
kubernetes-bwd-ocaml
kubernetes-cluster-events
kubernetes-garbagecollector
kubernetes-metrics
kubernetes-scheduler
kubernetes-stroller
postgres"

msg="${CIRCLE_USERNAME} deployed PR (SHA1: ${CIRCLE_SHA1})"

for dataset in $HONEYCOMB_DATASETS; do
    honeymarker add \
        --writekey="${BUILDEVENT_APIKEY}" \
        --dataset="$dataset" \
        --msg="${msg}" \
        --url="${CIRCLE_BUILD_URL}" \
        --type="deploy"
done


####################
# Unlock post-deploy
####################
./scripts/deploy/deploy-lock-clear
