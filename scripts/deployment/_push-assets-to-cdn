#! /usr/bin/env bash
set -euo pipefail

PREFIX_TO_REMOVE="backend/static/"
BUCKET="gs://darklang-static-assets"

# for debugging in CI
# find backend/static

function mimeTypeFor {
  # See also ApiServer.configureStaticContent
  case "$1" in
    # Common web stuff
    *.css) echo "text/css" ;;
    *.js) echo "application/javascript" ;;
    *.json) echo "application/json" ;;
    *.txt) echo "text/plain" ;;
    *.png) echo "image/png" ;;
    *.svg) echo "image/svg+xml" ;;
    *.html) echo "text/html" ;;
    # Fonts
    *.ttf) echo "font/ttf" ;;
    *.woff) echo "font/woff" ;;
    *.woff2) echo "font/woff2" ;;
    *.eot) echo "application/vnd.ms-fontobject" ;;
    # Blazor
    *.wasm) echo "application/wasm" ;;
    *.pdb) echo "text/plain" ;;
    *.dll) echo "application/octet-stream" ;;
    *.dat) echo "application/octet-stream" ;;
    *.blat) echo "application/octet-stream" ;;
    # Don't allow anything else
    *) echo "Unknown extension for ${file}"; exit 1 ;;
  esac
}

function upload {
  local localpath="$1"
  local remotepath="$2"
  local mimetype;
  mimetype="$(mimeTypeFor ${localpath})"
  # echo -e "copy\n  ${localpath}\nto\n  ${remotepath}\nmime\n  ${mimetype}\n\n"

  # We do separate uploads for each file to get the mimetype right
  # -h: set header
  # -Z: Uploaded file is served as zipped. Also adds 'no-transform' to Cache-Control header
  # -n: Don't overwrite
  gsutil \
    -h "Content-Type:${mimetype}" \
    -h "Cache-Control:public" \
    cp \
      -Z \
      -n \
      "${localpath}" \
      "${BUCKET}/${remotepath}" \
      &
}

function uploadHashed {
  local file="$1"
  local basefile="${file//$PREFIX_TO_REMOVE}"
  local filehash
  filehash="$(jq -r --arg FILE "${basefile}" '.[$FILE]' backend/static/etags.json)"
  local hashed_file="${basefile%.*}-${filehash}.${basefile##*.}"

  upload "${file}" "${hashed_file}"
}

function uploadUnhashed {
  local file=$1
  local basefile="${file//$PREFIX_TO_REMOVE}"

  upload "${file}" "${basefile}"
}

function skipFile {
  local file=$1
  if [[ "${file}" == "backend/static/.gitkeep" ]]; then
    return 0
  elif [[ "${file}" == "backend/static/etags.json" ]]; then
    return 0
  else
    return 1
  fi
}

files=$(find backend/static -type f -and -not -name "*.gz")

echo "Checking mime types"
for file in $files; do
  if skipFile "$file"; then
    : # do nothing
  else
    mimeTypeFor "$file"
  fi
done

echo "Uploading"

# Upload in parallel
for file in $files ; do
  if skipFile "$file"; then
    echo "skipping $file"
  elif [[ "${file}" == "backend/static/vendor/"* ]]; then
    uploadUnhashed "${file}"
  else
    uploadHashed "${file}"
  fi
done

# Wait for uploads to be done
wait
echo "Done!"
