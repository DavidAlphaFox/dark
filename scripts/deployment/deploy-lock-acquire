#!/usr/bin/env bash
. ./scripts/devcontainer/_assert-in-container "$0" "$@"

# Acquire the deploy lock. Required argument is the name for the lock, which should
# be a number (the build number) or "manual".

set -euo pipefail

DEPLOY_LOCK_BUCKET="gs://darklang-deploy-lock"

re='^[0-9]+$'
if ! [[ $1 =~ $re || $1 == "manual-deploy" ]] ; then
   echo "Usage: $0 <build-number>|manual-deploy" >&2
   exit 1
fi

LOCKFILE_ID=$1

echo "Lock file: ${LOCKFILE_ID}"
LOCKFILE_NAME="deploy-lock-${LOCKFILE_ID}"

deploy_lock_claimed=""
while [[ "${deploy_lock_claimed}" != "true" ]]; do
  # If there's a manual lock, loop
  if (./scripts/deployment/deploy-lock-list-manual); then
    echo "Manual deploy-lock found, waiting..."
    true # loop
  else
    max_deploy_lock=$( ./scripts/deployment/deploy-lock-list \
      | sed 's/.*-//' | sort -nr | head -n 1)
    # if there are no deploy locks, create ours and continue
    if [[ "${max_deploy_lock}" == "" ]]; then
      echo "No deploy-lock found; claiming deploy-lock"
      date > "${LOCKFILE_NAME}"
      gsutil cp "${LOCKFILE_NAME}" "${DEPLOY_LOCK_BUCKET}"
      deploy_lock_claimed="true"
    elif [[ "${LOCKFILE_ID}" == "manual-deploy" ]]; then
      echo "Deploy-lock found (${max_deploy_lock}); waiting to do manual depoy"
      true
    # if the biggest # is greater than ours, then exit instead of deploying
    elif [[ "${max_deploy_lock}" -gt "${LOCKFILE_ID}"  ]]; then
      echo "Currently-running deploy ${max_deploy_lock} > ${LOCKFILE_ID}, so not deploying."
      exit 1
    # if the biggest # is smaller than ours, loop (we will deploy after)
    else
      echo "Deploy-lock found (${max_deploy_lock}); waiting to do manual depoy"
      true # loop
    fi
  fi

  echo "At $(date), sleeping 5s to wait for deploy lock..."
  sleep 5
done


