#! /usr/bin/env bash
. ./scripts/devcontainer/_assert-in-container "$0" "$@"

set -euo pipefail

CHECK=255 # (0 mean check, 1 means format, 255 means error)
PRETTIER=0 # (0 means check prettier files, 1 means don't)
FSHARP=0 # (0 means check fsharp files, 1 means don't)
RESCRIPT=1 # (0 means check rescript files, 1 means don't)
FILES=()

# rescript files aren't checked/formatted by default since it has a dependency
# on `bs-platform`, which not all usages (i.e. CI) have in context.

#######################
# --help
#######################
function print_help ()
{
	printf '%s\n' "All formatting across Dark"
	printf 'Usage: %s [check|format] <files|dirs...> [--help] \n' "$0"
	printf '\t%s\n' "check: Error if files are not formatted. No argument means check all files. Does not error if file is not supported."
	printf '\t%s\n' "format: Format file or dir. Formats all files with no argument. Does not error or format if file is not supported."
  printf '\t%s\n' "--fsharp-only: Only check fsharp files (fsi, fs)"
  printf '\t%s\n' "--prettier-only: Only check prettier files (js, css, etc)"
  printf '\t%s\n' "--include-rescript: Include rescript files (res, resi)"
  printf '\t%s\n' "--rescript-only: Only check rescript files (res, resi)"
}

FILES=()

# check for flags
for val in "${@}"; do
  case "$val" in
    --help)
        print_help
        exit 0
        ;;
    --prettier-only)
        FSHARP=1
        ;;
    --fsharp-only)
        PRETTIER=1
        ;;
    --include-rescript)
        RESCRIPT=0
        ;;
    --rescript-only)
        RESCRIPT=0
        PRETTIER=1
        FSHARP=1
        ;;
    check)
      CHECK=0
      ;;
    format)
      CHECK=1
      ;;
    *)
      FILES+=("$val")
      ;;
  esac
done

if [[ 255 -eq "$CHECK" ]]; then
  echo -e "usage:\n  ./scripts/formatting/format check [files]\n  ./scripts/formatting/format format [files]"
  exit 255
fi

#######################
# Parse rest of arguments
#######################
if [[ ${#FILES[@]} -eq 0 ]]; then
  FILES=(".")
fi

#######################
# functions
#######################
is_dir() {
  [[ -d "$1" ]]
}

is_fsharp() {
  [[ $1 == *.fs || $1 == *.fsi ]]
}

is_rescript() {
  [[ $1 == *.res || $1 == *.resi ]]
}

is_allowed() {
  [[ $1 == *.fs || $1 == *.fsi \
    || $1 == *.css || $1 == *.scss \
    || $1 == *.js || $1 == *.ts \
    || $1 == *.html
    || $1 == *.res || $1 == *.resi ]]
}

all_prettier_files() {
  find "$1" \
    \( -path ".git" \
    -o -path "_build" \
    -o -path "./_build" \
    -o -path "node_modules" \
    -o -path "./node_modules" \
    -o -path "integration-tests/node_modules" \
    -o -path "./integration-tests/node_modules" \
    -o -path "_esy" \
    -o -path "./_esy" \
    -o -path "/home/dark/.esy" \
    -o -path "esy.lock" \
    -o -path "backend" \
    -o -path "backend/static" \
    -o -path "./backend/static" \
    -o -path "client/static/vendor" \
    -o -path "./client/static/vendor" \
    -o -path "lib" \
    -o -path "./lib" \
    -o -path "backend/.paket" \
    -o -path "./backend/.paket" \
    -o -path "backend/Build" \
    -o -path "./backend/Build" \
    -o -path "backend/tests/staticassets-tests" \
    -o -path "./backend/tests/staticassets-tests" \
    \) -prune -false \
    \
    -o -type f \
    \( -name "*.css" \
    -o -name "*.scss" \
    -o -name "*.js" \
    -o -name "*.ts" \
    -o -name "*.html" \
    -o -path "bsconfig.json" \
    -o -path "package.json" \
    -o -path "esy.json" \
    \) -print0 \
    | grep --null-data --invert-match reset-normalize
}

all_fsharp_files() {
  find "$1" \
    \( -path ".git" \
    -o -path "_build" \
    -o -path "./_build" \
    -o -path "node_modules" \
    -o -path "./node_modules" \
    -o -path "integration-tests/node_modules" \
    -o -path "./integration-tests/node_modules" \
    -o -path "_esy" \
    -o -path "./_esy" \
    -o -path "/home/dark/.esy" \
    -o -path "esy.lock" \
    -o -path "backend" \
    -o -path "backend/.paket" \
    -o -path "./backend/.paket" \
    -o -path "backend/Build" \
    -o -path "./backend/Build" \
    \) -prune -false \
    \
    -o -type f \
    \( -name "*.fs" \
    -o -name "*.fsi" \
    \) -print
}

all_rescript_files() {
  find "$1" \
    \( -path ".git" \
    -o -path "_build" \
    -o -path "./_build" \
    -o -path "node_modules" \
    -o -path "./node_modules" \
    -o -path "integration-tests/node_modules" \
    -o -path "./integration-tests/node_modules" \
    -o -path "_esy" \
    -o -path "./_esy" \
    -o -path "/home/dark/.esy" \
    -o -path "esy.lock" \
    -o -path "backend" \
    -o -path "backend/.paket" \
    -o -path "./backend/.paket" \
    -o -path "backend/Build" \
    -o -path "./backend/Build" \
    \) -prune -false \
    \
    -o -type f \
    \( -name "*.res" \
    -o -name "*.resi" \
    \) -print
}

check_fantomas () {
  xargs fantomas --check
}

check_prettier () {
  xargs -0 npx prettier --list-different
}

check_rescript () {
  xargs -L1 ./scripts/formatting/rescript-check.sh
}

format_fantomas() {
  xargs fantomas
}

format_prettier() {
  xargs -0 npx prettier --write
}

format_rescript() {
  xargs -L1 ./scripts/formatting/rescript-format.sh
}

do_fantomas() {
  if [[ 0 -eq "$CHECK" ]]; then
    check_fantomas
  else
    format_fantomas
  fi
}

do_prettier() {
  if [[ 0 -eq "$CHECK" ]]; then
    check_prettier
  else
    format_prettier
  fi
}

do_rescript() {
  if [[ 0 -eq "$CHECK" ]]; then
    check_rescript
  else
    format_rescript
  fi
}

# TODO sqlfmt for sql
# TODO add python
# TODO bash formatter

#######################
# action files/dirs
#######################
for i in "${FILES[@]}"; do
  if [[ -d "$i" ]]; then
    if [[ 0 -eq "$FSHARP" ]]; then
      all_fsharp_files $i | do_fantomas
    fi
    if [[ 0 -eq "$PRETTIER" ]]; then
      all_prettier_files "$i" | do_prettier
    fi
    if [[ 0 -eq "$RESCRIPT" ]]; then
      all_rescript_files "$i" | do_rescript
    fi
  elif is_allowed "$i"; then
    if is_fsharp "$i"; then
      if [[ 0 -eq "$FSHARP" ]]; then
        echo "$i" | do_fantomas
      fi
    elif is_rescript "$i"; then
      if [[ 0 -eq "$RESCRIPT" ]]; then
        echo "$i" | do_rescript
      fi
    else
      if [[ 0 -eq "$PRETTIER" ]]; then
        echo "$i" | do_prettier
      fi
    fi
  else
    echo "ignored : $i"
  fi
done

