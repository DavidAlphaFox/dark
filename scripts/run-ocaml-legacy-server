#!/usr/bin/env bash
. ./scripts/devcontainer/_assert-in-container "$0" "$@"

set -euo pipefail

BINPATH="_build/default/backend/bin"
FUZZING_SERVER_EXE="$BINPATH/legacy_fuzzing_server.exe"
SERIALIZATION_SERVER_EXE="$BINPATH/legacy_serialization_server.exe"

echo "Stopping legacyserver"
sudo pkill -f legacy_serialization_server.exe || true
sudo pkill -f legacy_fuzzing_server.exe || true

if [[ -f "${FUZZING_SERVER_EXE}" && -f "${SERIALIZATION_SERVER_EXE}" ]]; then
  LOGS="${DARK_CONFIG_RUNDIR}/logs"
  echo "Running legacyservers"

  # shellcheck disable=SC2024
  sudo --preserve-env "${SERIALIZATION_SERVER_EXE}" > "$LOGS/legacy_serialization_server.log" 2>&1 &

  # We set the DB to the test DB. In production, this server doesn't run.  In test
  # mode, it should be connected to the test DB. In dev mode, it should also be
  # connected to the test DB, as the F# server has the connection to the dev DB and
  # the legacyserver just serves to translate text.

  # shellcheck disable=SC2024
  DARK_CONFIG_DB_HOST=localhost \
  DARK_CONFIG_DB_DBNAME=testdb \
  DARK_CONFIG_DB_USER=dark \
  DARK_CONFIG_DB_PASSWORD=darklang \
  sudo --preserve-env "${FUZZING_SERVER_EXE}" > "$LOGS/legacy_fuzzing_server.log" 2>&1 &
else
  echo "Missing OCaml binaries"
  exit 1
fi

echo "Finished loading legacyservers"
