#!/usr/bin/env bash

. ./scripts/support/assert-in-container "$0" "$@"

set -eou pipefail

PATH=~/.local/bin:$PATH

HELP="$(cat <<EOF
Usage: $0 DOMAIN

Removes DOMAIN from cert manager. It does not remove it from the DB.

I believe this does not remove the k8s secret containing the cert, it just
tells cert-manager to remove it from the ingress and to stop renewing it.

Note, this is a racy operation, which can lose data (due to flaws in k8s) if
any other operations are happening at the same time. A backup and instructions
to restore the backup are provided.

For more docs, see docs/custom-domains.md.
EOF
)"

if [[ $# -ne 1 || "$1" == '--help' ]]; then
    echo "$HELP"
    exit 1
fi

DOMAIN=$1

BACKUPFILE="darkcustomdomain-l4-ingress.backup.$(date -u +"%FT%H%MZ").json"
kubectl get ingress darkcustomdomain-l4-ingress -o json | jq . > "${BACKUPFILE}"
echo -e "Saving backup of darkcustomdomain-l4-ingress to ${BACKUPFILE}. If " \
         "something goes wrong, you can roll it back with: \n" \
         "  kubectl apply -f ${BACKUPFILE}"

# Make the new config
newtmpfile=$(mktemp /tmp/custom_domain_delete_from_cert_manager.XXXXXX)
cat "${BACKUPFILE}" \
  | jq --arg domain "$DOMAIN" \
  '.
   | (.spec.rules |= [.[] | select ( .host != $domain ) ])
   | (.spec.tls |= [.[] | select ( .secretName != ($domain+"-tls")) ])' \
  > "${newtmpfile}"

# Make super sure
echo -e "\n\nThe diff between the current config (-) and new config (+) is:"
diff -u "${BACKUPFILE}" "${newtmpfile}" || true
read -r -p "Are you sure you want to apply the new config? [y/N] " response
case "${response}" in
    [yY][eE][sS]|[yY])
        echo "OK. Applying the new config"
        kubectl apply -f "${newtmpfile}"
        ;;
    *)
        echo "OK. Doing nothing."
        ;;
esac
