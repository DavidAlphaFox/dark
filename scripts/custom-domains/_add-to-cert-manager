#!/usr/bin/env bash
. ./scripts/devcontainer/_assert-in-container "$0" "$@"
set -eou pipefail

HELP="$(cat <<EOF
Usage: $0 DOMAIN

Add a custom domain to cert-manager, to allow SSL termination

(This is a low-level script, you should probably use scripts/custom-domains/add)

For more docs, see docs/custom-domains.md.
EOF
)"

if [[ $# -ne 1 || "$1" == '--help' ]]; then
    echo "$HELP"
    exit 1
fi

DOMAIN=$1

echo "Requesting a cert for $DOMAIN..."
PATCH=$(cat <<-PATCH
[
  {
    "op": "add",
    "path": "/spec/rules/-",
    "value": {
      "host": "${DOMAIN}",
      "http": {
        "paths": [
          {
            "backend": {
              "service": {
                "name": "bwd-nodeport",
                "port": {
                  "number": 80
                }
              },
            },
            "pathType": "ImplementationSpecific",
            "path": "/"
          }
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/spec/tls/-",
    "value": {
      "hosts": [
        "${DOMAIN}"
      ],
      "secretName": "${DOMAIN}-tls"
    }
  }
]
PATCH
)

# DANGER HERE - running the patch twice will make k8s sad: Warning  BadConfig          9s                 cert-manager              Duplicate TLS entry for secretName "dark-002.metaforgotten.org-tls"
#
# If that happens, cert-manager can't issue more certs until it's fixed!
#
# This is an attempt to avoid that (though blocking dupe entries in the DB, as
# above, will also help). However, if you find yourself in this situation,
# here's how you can fix it manually.
#
# Note: Do not use ing `kubectl patch` for this, it is hard to
# control ("delete the nth entry in the spec.tls array" risks race conditions).
#
# So we may as well do it the easy way:
# kubectl get ingress darkcustomdomain-l4-ingress -o yaml > tmp.yaml
# Edit tmp.yaml to remove the duplicate objects from both spec.rules and
# spec.tls
# kubectl diff -f tmp.yaml # check that the diff is what you expect
# kubectl apply -f tmp.yaml
#
# Note: if changes have been made between `kubectl get` and `kubectl apply`, you
# WILL LOSE THOSE CHANGES. So exercise caution. `kubectl diff` helps reduce the
# window of exposure but does not eliminate it.
if ( kubectl get ingress darkcustomdomain-l4-ingress -o json | jq ".spec.tls[] | select(.hosts[0] == \"${DOMAIN}\")" | grep . ); then
    echo "Can't continue - you already have a TLS cert for this domain."
    exit 1
fi

kubectl patch ingress darkcustomdomain-l4-ingress --type=json -p "${PATCH}"

echo "Done adding cert. (Run ./scripts/custom-domains/_check-cert-added to check on it)"
