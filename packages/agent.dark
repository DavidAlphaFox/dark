module OpenAI =
  module Completion =
    type Request =
      { model: String
        prompt: String
        max_tokens: Int
        temperature: Float }

    type ResponseChoice = { text: String }

    type Response =
      { id: String
        object: String
        created: Int
        model: String
        choices: List<PACKAGE.OpenAI.Completion.ResponseChoice> }

    let completion (prompt: String) : Result<String, String> =
      let apiKey = ""

      let openAIRequest =
        PACKAGE.OpenAI.Completion.Request
          { model = "text-davinci-003"
            prompt = prompt
            max_tokens = 700
            temperature = 0.7 }

      match Json.serialize<PACKAGE.OpenAI.Completion.Request> openAIRequest with
      | Ok reqBody ->
        let headers =
          [ ("authorization", "Bearer " ++ apiKey)
            ("content-type", "application/json") ]

        let openAIResponse =
          HttpClient.request
            "POST"
            "https://api.openai.com/v1/completions"
            headers
            (String.toBytes reqBody)

        match openAIResponse with
        | Ok r ->
          match
            Json.parse<PACKAGE.OpenAI.Completion.Response> (String.fromBytes r.body)
          with
          | Ok r ->
            match List.head r.choices with
            | Just c -> Ok c.text

            | Nothing -> Error("No choices returned")
        | Error err -> Error("Couldn't parse OpenAI completion response - " ++ err)
        | Error e -> Error("OpenAI API request failed\n" ++ e)
      | Error e -> Error("Couldn't serialize request" ++ e)






  module ChatCompletion =
    type RequestMessage = { role: String; content: String }

    type Request =
      { model: String
        max_tokens: Int
        temperature: Float
        messages: List<PACKAGE.OpenAI.ChatCompletion.RequestMessage> }

    type ResponseChoiceMessage = { content: String }

    type ResponseChoice =
      { message: PACKAGE.OpenAI.ChatCompletion.ResponseChoiceMessage }

    type Response =
      { choices: List<PACKAGE.OpenAI.ChatCompletion.ResponseChoice> }


    let completion (prompt: String) : Result<String, String> =
      let apiKey = ""

      let openAIRequest =
        PACKAGE.OpenAI.ChatCompletion.Request
          { model = "gpt-3.5-turbo"
            max_tokens = 700
            temperature = 0.7
            messages =
              [ PACKAGE.OpenAI.ChatCompletion.RequestMessage
                  { role = "user"; content = prompt } ] }

      match Json.serialize<PACKAGE.OpenAI.ChatCompletion.Request> openAIRequest with
      | Ok reqBody ->
        let headers =
          [ ("authorization", "Bearer " ++ apiKey)
            ("content-type", "application/json") ]

        let openAIResponse =
          HttpClient.request
            "POST"
            "https://api.openai.com/v1/chat/completions"
            headers
            (String.toBytes reqBody)

        match openAIResponse with
        | Ok r ->
          match
            Json.parse<PACKAGE.OpenAI.ChatCompletion.Response> (
              String.fromBytes r.body
            )
          with
          | Ok r ->
            match List.head r.choices with
            | Just c -> Ok c.message.content

            | Nothing -> Error("No choices returned")
          | Error err -> Error("Couldn't parse OpenAI completion response - " ++ err)
        | Error e -> Error("OpenAI API request failed\n" ++ e)
      | Error e -> Error("Couldn't serialize request" ++ e)


    let completionWithRole (role: String) (prompt: String) : Result<String, String> =
      let apiKey = ""

      let role =
        match role with
        | "user" -> "user"
        | "system" -> "system"
        | "function" -> "function" // if the role is function the field name is required
        | "assistant" -> "assistant"
        | _ -> "user"

      let openAIRequest =
        PACKAGE.OpenAI.ChatCompletion.Request
          { model = "gpt-3.5-turbo"
            max_tokens = 700
            temperature = 0.7
            messages =
              [ PACKAGE.OpenAI.ChatCompletion.RequestMessage
                  { role = role; content = prompt } ] }

      match Json.serialize<PACKAGE.OpenAI.ChatCompletion.Request> openAIRequest with
      | Ok reqBody ->
        let headers =
          [ ("authorization", "Bearer " ++ apiKey)
            ("content-type", "application/json") ]

        let openAIResponse =
          HttpClient.request
            "POST"
            "https://api.openai.com/v1/chat/completions"
            headers
            (String.toBytes reqBody)

        match openAIResponse with
        | Ok r ->
          match
            Json.parse<PACKAGE.OpenAI.ChatCompletion.Response> (
              String.fromBytes r.body
            )
          with
          | Ok r ->
            match List.head r.choices with
            | Just c -> Ok c.message.content

            | Nothing -> Error("No choices returned")
          | Error err -> Error("Couldn't parse OpenAI completion response - " ++ err)
        | Error e -> Error("OpenAI API request failed\n" ++ e)
      | Error e -> Error("Couldn't serialize request" ++ e)


  module ImageGeneration =
    type Request = { prompt: String; size: String }

    type ResponseData = { url: String }

    type Response =
      { data: List<PACKAGE.OpenAI.ImageGeneration.ResponseData> }

    // This returns a url to the image, should it return the image itself?
    let imageGeneration (prompt: String) : Result<String, String> =
      let apiKey = ""

      let openAIRequest =
        PACKAGE.OpenAI.ImageGeneration.Request { prompt = prompt; size = "256x256" }

      match Json.serialize<PACKAGE.OpenAI.ImageGeneration.Request> openAIRequest with
      | Ok reqBody ->
        let headers =
          [ ("authorization", "Bearer " ++ apiKey)
            ("content-type", "application/json") ]

        let openAIResponse =
          HttpClient.request
            "POST"
            "https://api.openai.com/v1/images/generations"
            headers
            (String.toBytes reqBody)

        match openAIResponse with
        | Ok r ->
          match
            Json.parse<PACKAGE.OpenAI.ImageGeneration.Response> (
              String.fromBytes r.body
            )
          with
          | Ok r ->
            match List.head r.data with
            | Just d -> Ok d.url
            | Nothing -> Error("No data returned")
        | Error err ->
          Error("Couldn't parse open ai image generation response - " ++ err)
        | Error e -> Error("OpenAI API request failed\n" ++ e)
      | Error e -> Error("Couldn't serialize request" ++ e)