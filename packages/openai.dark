module OpenAI =

  module Config =

    let apiKey = "openai-api-key"

    let getHeaders () : List<(String * String)> =
      [ ("authorization", "Bearer " ++ PACKAGE.OpenAI.Config.apiKey)
        ("content-type", "application/json") ]

  module Completion =
    type Request =
      { model: String
        prompt: String
        max_tokens: Int64
        temperature: Float }

    type ResponseChoice = { text: String }

    type Response =
      { id: String
        object: String
        created: Int64
        model: String
        choices: List<PACKAGE.OpenAI.Completion.ResponseChoice> }

    let completion
      (prompt: String)
      : PACKAGE.Darklang.Stdlib.Result.Result<String, String> =

      let openAIRequest =
        PACKAGE.OpenAI.Completion.Request
          { model = "text-davinci-003"
            prompt = prompt
            max_tokens = 700L
            temperature = 0.7 }

      let reqBody =
        Builtin.Json.serialize<PACKAGE.OpenAI.Completion.Request> openAIRequest

      let headers = PACKAGE.OpenAI.Config.getHeaders ()

      let openAIResponse =
        PACKAGE.Darklang.Stdlib.HttpClient.request
          "POST"
          "https://api.openai.com/v1/completions"
          headers
          (PACKAGE.Darklang.Stdlib.String.toBytes reqBody)

      match openAIResponse with
      | Ok r ->
        match
          Builtin.Json.parse<PACKAGE.OpenAI.Completion.Response> (
            PACKAGE.Darklang.Stdlib.String.fromBytesWithReplacement r.body
          )
        with
        | Ok r ->
          match PACKAGE.Darklang.Stdlib.List.head r.choices with
          | Some c -> PACKAGE.Darklang.Stdlib.Result.Result.Ok c.text

          | None ->
            PACKAGE.Darklang.Stdlib.Result.Result.Error("No choices returned")
      | Error err ->
        PACKAGE.Darklang.Stdlib.Result.Result.Error(
          "Couldn't parse OpenAI completion response - " ++ err
        )


  module ChatCompletion =
    type RequestMessage = { role: String; content: String }

    type Request =
      { model: String
        max_tokens: Int64
        temperature: Float
        messages: List<PACKAGE.OpenAI.ChatCompletion.RequestMessage> }

    type ResponseChoiceMessage = { content: String }

    type ResponseChoice =
      { message: PACKAGE.OpenAI.ChatCompletion.ResponseChoiceMessage }

    type Response =
      { choices: List<PACKAGE.OpenAI.ChatCompletion.ResponseChoice> }


    type CompletionOptions =
      { model: String
        messages: List<PACKAGE.OpenAI.ChatCompletion.RequestMessage>
        temperature: Float
        max_tokens: Int64
        top_p: Float
        n: Int64
        stream: Bool }

    let completionOptionsDefault
      ()
      : PACKAGE.OpenAI.ChatCompletion.CompletionOptions =
      PACKAGE.OpenAI.ChatCompletion.CompletionOptions
        { model = "gpt-3.5-turbo"
          messages =
            [ PACKAGE.OpenAI.ChatCompletion.RequestMessage
                { role = "user"; content = "test" } ]
          temperature = 0.7
          max_tokens = 700L
          top_p = 1.0
          n = 1L
          stream = false }


    let completionWithOption
      (prompt: String)
      (options:
        PACKAGE.Darklang.Stdlib.Option.Option<PACKAGE.OpenAI.ChatCompletion.CompletionOptions>)
      : PACKAGE.Darklang.Stdlib.Result.Result<String, String> =

      let options =
        match options with
        | Some o ->
          { o with
              messages =
                [ PACKAGE.OpenAI.ChatCompletion.RequestMessage
                    { role = "user"; content = prompt } ] }
        | None ->
          { (PACKAGE.OpenAI.ChatCompletion.completionOptionsDefault ()) with
              messages =
                [ PACKAGE.OpenAI.ChatCompletion.RequestMessage
                    { role = "user"; content = prompt } ] }

      let openAIRequest = options

      let reqBody =
        Builtin.Json.serialize<PACKAGE.OpenAI.ChatCompletion.CompletionOptions>
          openAIRequest

      let headers = PACKAGE.OpenAI.Config.getHeaders ()

      let openAIResponse =
        PACKAGE.Darklang.Stdlib.HttpClient.request
          "POST"
          "https://api.openai.com/v1/chat/completions"
          headers
          (PACKAGE.Darklang.Stdlib.String.toBytes reqBody)

      match openAIResponse with
      | Ok r ->
        match
          Builtin.Json.parse<PACKAGE.OpenAI.ChatCompletion.Response> (
            PACKAGE.Darklang.Stdlib.String.fromBytesWithReplacement r.body
          )
        with
        | Ok r ->
          match PACKAGE.Darklang.Stdlib.List.head r.choices with
          | Some c -> PACKAGE.Darklang.Stdlib.Result.Result.Ok c.message.content

          | None ->
            PACKAGE.Darklang.Stdlib.Result.Result.Error("No choices returned")
        | Error err ->
          PACKAGE.Darklang.Stdlib.Result.Result.Error(
            "Couldn't parse OpenAI completion response - " ++ err
          )
      | Error e ->
        PACKAGE.Darklang.Stdlib.Result.Result.Error(
          "OpenAI API request failed\n" ++ e
        )



    let completion
      (prompt: String)
      : PACKAGE.Darklang.Stdlib.Result.Result<String, String> =

      let openAIRequest =
        PACKAGE.OpenAI.ChatCompletion.Request
          { model = "gpt-3.5-turbo"
            max_tokens = 700L
            temperature = 0.7
            messages =
              [ PACKAGE.OpenAI.ChatCompletion.RequestMessage
                  { role = "user"; content = prompt } ] }

      let reqBody =
        Builtin.Json.serialize<PACKAGE.OpenAI.ChatCompletion.Request> openAIRequest

      let headers = PACKAGE.OpenAI.Config.getHeaders ()

      let openAIResponse =
        PACKAGE.Darklang.Stdlib.HttpClient.request
          "POST"
          "https://api.openai.com/v1/chat/completions"
          headers
          (PACKAGE.Darklang.Stdlib.String.toBytes reqBody)

      match openAIResponse with
      | Ok r ->
        match
          Builtin.Json.parse<PACKAGE.OpenAI.ChatCompletion.Response> (
            PACKAGE.Darklang.Stdlib.String.fromBytesWithReplacement r.body
          )
        with
        | Ok r ->
          match PACKAGE.Darklang.Stdlib.List.head r.choices with
          | Some c -> PACKAGE.Darklang.Stdlib.Result.Result.Ok c.message.content

          | None ->
            PACKAGE.Darklang.Stdlib.Result.Result.Error("No choices returned")
        | Error err ->
          PACKAGE.Darklang.Stdlib.Result.Result.Error(
            "Couldn't parse OpenAI completion response - " ++ err
          )
      | Error e ->
        PACKAGE.Darklang.Stdlib.Result.Result.Error(
          "OpenAI API request failed\n" ++ e
        )


  module ImageGeneration =
    type Request = { prompt: String; size: String }

    type ResponseData = { url: String }

    type Response =
      { data: List<PACKAGE.OpenAI.ImageGeneration.ResponseData> }

    // This returns a url to the image, should it return the image itself?
    let imageGeneration
      (prompt: String)
      : PACKAGE.Darklang.Stdlib.Result.Result<String, String> =

      let openAIRequest =
        PACKAGE.OpenAI.ImageGeneration.Request { prompt = prompt; size = "256x256" }

      let reqBody =
        Builtin.Json.serialize<PACKAGE.OpenAI.ImageGeneration.Request> openAIRequest

      let headers = PACKAGE.OpenAI.Config.getHeaders ()

      let openAIResponse =
        PACKAGE.Darklang.Stdlib.HttpClient.request
          "POST"
          "https://api.openai.com/v1/images/generations"
          headers
          (PACKAGE.Darklang.Stdlib.String.toBytes reqBody)

      match openAIResponse with
      | Ok r ->
        match
          Builtin.Json.parse<PACKAGE.OpenAI.ImageGeneration.Response> (
            PACKAGE.Darklang.Stdlib.String.fromBytesWithReplacement r.body
          )
        with
        | Ok r ->
          match PACKAGE.Darklang.Stdlib.List.head r.data with
          | Some d -> PACKAGE.Darklang.Stdlib.Result.Result.Ok d.url
          | None -> PACKAGE.Darklang.Stdlib.Result.Result.Error("No data returned")
        | Error err ->
          PACKAGE.Darklang.Stdlib.Result.Result.Error(
            "Couldn't parse open ai image generation response - " ++ err
          )
      | Error e ->
        PACKAGE.Darklang.Stdlib.Result.Result.Error(
          "OpenAI API request failed\n" ++ e
        )


  module Model =
    type Request = { model: String }

    type Response =
      { id: String
        object: String
        created: Int64
        model: String }

    let retrieveModel
      (model: String)
      : PACKAGE.Darklang.Stdlib.Result.Result<String, String> =

      let headers = PACKAGE.OpenAI.Config.getHeaders ()

      let modelResponse =
        PACKAGE.Darklang.Stdlib.HttpClient.request
          "GET"
          ("https://api.openai.com/v1/models/" ++ model)
          headers
          Builtin.Bytes.empty

      match modelResponse with
      | Ok r ->
        r.body
        |> PACKAGE.Darklang.Stdlib.String.fromBytesWithReplacement
        |> PACKAGE.Darklang.Stdlib.Result.Result.Ok
      | Error e ->
        PACKAGE.Darklang.Stdlib.Result.Result.Error(
          "OpenAI API request failed\n" ++ e
        )

    let getListOfModels
      ()
      : PACKAGE.Darklang.Stdlib.Result.Result<List<String>, String> =

      let headers = PACKAGE.OpenAI.Config.getHeaders ()

      let modelResponse =
        PACKAGE.Darklang.Stdlib.HttpClient.request
          "GET"
          "https://api.openai.com/v1/models"
          headers
          Builtin.Bytes.empty

      match modelResponse with
      | Ok r ->
        r.body
        |> PACKAGE.Darklang.Stdlib.String.fromBytesWithReplacement
        |> PACKAGE.Darklang.Stdlib.Result.Result.Ok
      | Error e ->
        PACKAGE.Darklang.Stdlib.Result.Result.Error(
          "OpenAI API request failed\n" ++ e
        )