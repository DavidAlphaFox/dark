module Darklang =
  module Internal =
    module Test =
      type WTTest =
        { name: String
          lineNumber: Int64
          actual: LanguageTools.WrittenTypes.Expr
          expected: LanguageTools.WrittenTypes.Expr }

      type PTTest =
        { name: String
          lineNumber: Int64
          actual: LanguageTools.ProgramTypes.Expr
          expected: LanguageTools.ProgramTypes.Expr }

      let parseTest
        (pf: LanguageTools.WrittenTypes.ParsedFile)
        : Stdlib.Result.Result<WTTest, String> =
        let exprsToEval =
          match pf with
          | SourceFile s -> s.exprsToEval
          | _ -> []

        match exprsToEval with
        | [] -> Stdlib.Result.Result.Error "no exprs to eval"
        | [ e ] ->
          match e with
          | EInfix(r, _, actual, expected) ->
            (WTTest
              { name = "test"
                lineNumber = r.start.row
                actual = actual
                expected = expected })
            |> Stdlib.Result.Result.Ok

          | _ -> Stdlib.Result.Result.Error "expected x = y format"

      // CLEANUP: return result?
      let parseSingleTestFromFile (filename: String) (testSource: String) : PTTest =
        let wtTest =
          testSource
          |> LanguageTools.Parser.ParserTest.initialParse
          |> Test.parseTest
          |> Builtin.unwrap

        let lineNumber = wtTest.lineNumber
        let pm = LanguageTools.PackageManager.pm ()

        let actual =
          LanguageTools.WrittenTypesToProgramTypes.Expr.toPT
            LanguageTools.NameResolver.OnMissing.ThrowError
            pm
            []
            wtTest.actual

        let expected =
          LanguageTools.WrittenTypesToProgramTypes.Expr.toPT
            LanguageTools.NameResolver.OnMissing.ThrowError
            pm
            []
            wtTest.expected

        PTTest
          { name = "test"
            lineNumber = lineNumber
            actual = actual
            expected = expected }