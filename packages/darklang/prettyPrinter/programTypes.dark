// TODO:
//alias PT = LanguageTools.ProgramTypes
//alias RT = Stdlib.RuntimeTypes

// TODO: update all of the 'namePart's to nameToStrings with fn inputs

module Darklang =
  module PrettyPrinter =
    module ProgramTypes =

      let nameResolutionError
        (nr: LanguageTools.RuntimeErrors.NameResolution.Error)
        : String =
        Stdlib.String.join nr.names "."


      let packageName
        (owner: String)
        (modules: List<String>)
        (name: String)
        (version: Int64)
        : String =
        let modulesPart =
          match modules with
          | [] -> ""
          | modules ->
            let modules = Stdlib.String.join modules "."
            $"{modules}."

        let versionPart =
          if version == 0L then
            ""
          else
            $"_v{Stdlib.Int64.toString version}"

        match owner with
        | "Tests" -> $"{modulesPart}{name}{versionPart}"
        | _ -> $"PACKAGE.{owner}.{modulesPart}{name}{versionPart}"

      module FQTypeName =

        module Package =

          let atDefinition
            // TODO: take in just owner, typ, and version - modules should have already been dealt with
            (p: LanguageTools.ProgramTypes.FQTypeName.Package)
            : String =
            let namePart = p.name

            let versionPart =
              if p.version == 0L then
                ""
              else
                $"_v{Stdlib.Int64.toString p.version}"

            $"{namePart}{versionPart}"

          let fullForReference
            (p: LanguageTools.ProgramTypes.FQTypeName.Package)
            : String =
            packageName p.owner p.modules p.name p.version



        let atDefinition
          (t: LanguageTools.ProgramTypes.FQTypeName.FQTypeName)
          : String =
          match t with
          | Package p -> PrettyPrinter.ProgramTypes.FQTypeName.Package.atDefinition p

        let fullForReference
          (t: LanguageTools.ProgramTypes.FQTypeName.FQTypeName)
          : String =
          match t with
          | Package p ->
            PrettyPrinter.ProgramTypes.FQTypeName.Package.fullForReference p


      module FQConstantName =

        module Builtin =
          let fullForReference
            (t: LanguageTools.ProgramTypes.FQConstantName.Builtin)
            : String =
            let namePart = t.name

            let versionPart =
              if t.version == 0L then
                ""
              else
                $"_v{Stdlib.Int64.toString t.version}"

            $"Builtin.{namePart}{versionPart}"


        module Package =
          let atDefinition
            // TODO: take in just owner, typ, and version - modules should have already been dealt with
            (p: LanguageTools.ProgramTypes.FQConstantName.Package)
            : String =
            let versionPart =
              if p.version == 0L then
                ""
              else
                $"_v{Stdlib.Int64.toString p.version}"

            $"{p.name}{versionPart}"

          let fullForReference
            (p: LanguageTools.ProgramTypes.FQConstantName.Package)
            : String =
            packageName p.owner p.modules p.name p.version



        let atDefinition
          (t: LanguageTools.ProgramTypes.FQConstantName.FQConstantName)
          : String =
          match t with
          | Builtin b ->
            PrettyPrinter.ProgramTypes.FQConstantName.Builtin.fullForReference b
          | Package p ->
            PrettyPrinter.ProgramTypes.FQConstantName.Package.atDefinition p

        let fullForReference
          (t: LanguageTools.ProgramTypes.FQConstantName.FQConstantName)
          : String =
          match t with
          | Builtin b ->
            PrettyPrinter.ProgramTypes.FQConstantName.Builtin.fullForReference b
          | Package p ->
            PrettyPrinter.ProgramTypes.FQConstantName.Package.fullForReference p


      module FQFnName =
        module Builtin =

          let fullForReference
            (t: LanguageTools.ProgramTypes.FQFnName.Builtin)
            : String =
            let namePart = t.name

            let versionPart =
              if t.version == 0L then
                ""
              else
                $"_v{Stdlib.Int64.toString t.version}"

            $"Builtin.{namePart}{versionPart}"


        module Package =

          let atDefinition
            // TODO: take in just owner, typ, and version - modules should have already been dealt with
            (p: LanguageTools.ProgramTypes.FQFnName.Package)
            : String =
            let namePart = p.name

            let versionPart =
              if p.version == 0L then
                ""
              else
                $"_v{Stdlib.Int64.toString p.version}"

            $"{namePart}{versionPart}"


          let fullForReference
            (p: LanguageTools.ProgramTypes.FQFnName.Package)
            : String =
            packageName p.owner p.modules p.name p.version


        let atDefinition (t: LanguageTools.ProgramTypes.FQFnName.FQFnName) : String =
          match t with
          | Builtin _b ->
            "why are you trying to print a stdlib type name _definition_?"
          | Package p -> PrettyPrinter.ProgramTypes.FQFnName.Package.atDefinition p

        let fullForReference
          (t: LanguageTools.ProgramTypes.FQFnName.FQFnName)
          : String =
          match t with
          | Builtin b ->
            PrettyPrinter.ProgramTypes.FQFnName.Builtin.fullForReference b
          | Package p ->
            PrettyPrinter.ProgramTypes.FQFnName.Package.fullForReference p


      let typeReference (t: LanguageTools.ProgramTypes.TypeReference) : String =
        match t with
        | TVariable varName -> "'" ++ varName

        | TUnit -> "Unit"
        | TBool -> "Bool"
        | TInt64 -> "Int64"
        | TUInt64 -> "UInt64"
        | TInt8 -> "Int8"
        | TUInt8 -> "UInt8"
        | TInt16 -> "Int16"
        | TUInt16 -> "UInt16"
        | TInt32 -> "Int32"
        | TUInt32 -> "UInt32"
        | TInt128 -> "Int128"
        | TUInt128 -> "UInt128"
        | TFloat -> "Float"
        | TChar -> "Char"
        | TString -> "String"
        | TDateTime -> "DateTime"
        | TUuid -> "Uuid"

        | TList inner -> $"List<{PrettyPrinter.ProgramTypes.typeReference inner}>"

        | TTuple(first, second, theRest) ->
          (Stdlib.List.append [ first; second ] theRest)
          |> Stdlib.List.map (fun item ->
            PrettyPrinter.ProgramTypes.typeReference item)
          |> Stdlib.String.join " * "
          |> fun parts -> "(" ++ parts ++ ")"

        | TDict inner -> $"Dict<{PrettyPrinter.ProgramTypes.typeReference inner}>"

        | TCustomType(typ, args) ->
          let argsPart =
            match args with
            | [] -> ""
            | args ->
              args
              |> Stdlib.List.map (fun arg ->
                PrettyPrinter.ProgramTypes.typeReference arg)
              |> Stdlib.String.join ", "
              |> fun parts -> $"<{parts}>"

          let typeNamePart =
            match typ with
            | Ok name -> PrettyPrinter.ProgramTypes.FQTypeName.fullForReference name
            | Error e -> PrettyPrinter.ProgramTypes.nameResolutionError e

          $"{typeNamePart}{argsPart}"

        | TDB inner -> $"DB<{PrettyPrinter.ProgramTypes.typeReference inner}>"

        | TFn(args, ret) ->
          let argPart =
            args
            |> Stdlib.List.map (fun arg ->
              PrettyPrinter.ProgramTypes.typeReference arg)
            |> Stdlib.String.join ", "
            |> fun parts -> "(" ++ parts ++ ")"

          $"{argPart} -> {PrettyPrinter.ProgramTypes.typeReference ret}"
        | _ ->
          let s = Builtin.Json.serialize<LanguageTools.ProgramTypes.TypeReference> t

          $"({s})"

      let constant (c: LanguageTools.ProgramTypes.Const) : String =
        match c with
        | CInt64 i -> Stdlib.Int64.toString i
        | CUInt64 i -> Stdlib.UInt64.toString i
        | CInt8 i -> Stdlib.Int8.toString i
        | CUInt8 i -> Stdlib.UInt8.toString i
        | CInt16 i -> Stdlib.Int16.toString i
        | CUInt16 i -> Stdlib.UInt16.toString i
        | CInt32 i -> Stdlib.Int32.toString i
        | CUInt32 i -> Stdlib.UInt32.toString i
        | CInt128 i -> Stdlib.Int128.toString i
        | CUInt128 i -> Stdlib.UInt128.toString i
        | CFloat(sign, whole, remainder) ->
          let signPart = PrettyPrinter.sign sign

          let remainderPart = PrettyPrinter.processRemainder remainder

          $"{signPart}{whole}.{remainderPart}"
        | CBool b -> Stdlib.Bool.toString b
        | CChar c -> $"'{Stdlib.Char.toString c}'"
        | CString s -> $"\"{s}\""
        | CUnit -> "()"
        | CTuple(first, second, theRest) ->
          (Stdlib.List.append [ first; second ] theRest)
          |> Stdlib.List.map (fun item -> PrettyPrinter.ProgramTypes.constant item)
          |> Stdlib.String.join ", "
          |> fun parts -> "(" ++ parts ++ ")"

        | CEnum(typeName, caseName, fields) ->
          let typeNamePart =
            match typeName with
            | Ok name -> PrettyPrinter.ProgramTypes.FQTypeName.fullForReference name
            | Error e -> PrettyPrinter.ProgramTypes.nameResolutionError e

          match fields with
          | [] -> $"{typeNamePart}.{caseName}"
          | fields ->
            let fieldPart =
              fields
              |> Stdlib.List.map (fun field ->
                PrettyPrinter.ProgramTypes.constant field)
              |> Stdlib.String.join ", "

            $"{typeNamePart}.{caseName}({fieldPart})"

        | CList items ->
          items
          |> Stdlib.List.map (fun item -> PrettyPrinter.ProgramTypes.constant item)
          |> Stdlib.String.join "; "
          |> fun parts -> "[" ++ parts ++ "]"

        | CDict pairs ->
          let pairPart =
            pairs
            |> Stdlib.List.map (fun pair ->
              let (key, value) = pair
              $"{key} = {PrettyPrinter.ProgramTypes.constant value}")
            |> Stdlib.String.join "; "
            |> fun parts -> " { " ++ parts ++ " }"

          $"Dict {pairPart}"

        | _ -> "TODO"


      let letPattern (lp: LanguageTools.ProgramTypes.LetPattern) : String =
        match lp with
        | LPVariable(_id, name) -> name
        | LPTuple(_id, first, second, theRest) ->
          (Stdlib.List.append [ first; second ] theRest)
          |> Stdlib.List.map (fun item -> PrettyPrinter.ProgramTypes.letPattern item)
          |> Stdlib.String.join ", "
          |> fun parts -> "(" ++ parts ++ ")"

      let matchPattern (mp: LanguageTools.ProgramTypes.MatchPattern) : String =
        match mp with
        | MPVariable(_id, name) -> name
        | MPUnit _id -> "()"
        | MPBool(_id, b) -> Stdlib.Bool.toString b
        | MPInt64(_id, i) -> Stdlib.Int64.toString i
        | MPUInt64(_id, i) -> Stdlib.UInt64.toString i
        | MPInt8(_id, i) -> Stdlib.Int8.toString i
        | MPUInt8(_id, i) -> Stdlib.UInt8.toString i
        | MPInt16(_id, i) -> Stdlib.Int16.toString i
        | MPUInt16(_id, i) -> Stdlib.UInt16.toString i
        | MPInt32(_id, i) -> Stdlib.Int32.toString i
        | MPUInt32(_id, i) -> Stdlib.UInt32.toString i
        | MPInt128(_id, i) -> Stdlib.Int128.toString i
        | MPUInt128(_id, i) -> Stdlib.UInt128.toString i
        | MPFloat(_id, sign, whole, remainder) ->
          let remainderPart = PrettyPrinter.processRemainder remainder

          $"{PrettyPrinter.sign sign}{whole}.{remainderPart}"

        | MPChar(_id, c) -> c
        | MPString(_id, s) -> $"\"{PrettyPrinter.escapeSpecialCharacters s}\""

        | MPList(_id, items) ->
          items
          |> Stdlib.List.map (fun item ->
            PrettyPrinter.ProgramTypes.matchPattern item)
          |> Stdlib.String.join ", "
          |> fun parts -> "[" ++ parts ++ "]"

        | MPListCons(_id, head, tail) ->
          let headPart = PrettyPrinter.ProgramTypes.matchPattern head

          let tailPart = PrettyPrinter.ProgramTypes.matchPattern tail

          $"{headPart} :: {tailPart}"

        | MPTuple(_, first, second, theRest) ->
          (Stdlib.List.append [ first; second ] theRest)
          |> Stdlib.List.map (fun item ->
            PrettyPrinter.ProgramTypes.matchPattern item)
          |> Stdlib.String.join ", "
          |> fun parts -> "(" ++ parts ++ ")"

        | MPEnum(_id, caseName, fieldPats) ->
          match fieldPats with
          | [] -> caseName
          | [ single ] ->
            $"{caseName} {PrettyPrinter.ProgramTypes.matchPattern single}"
          | fieldPats ->
            let fieldPart =
              fieldPats
              |> Stdlib.List.map (fun pat ->
                PrettyPrinter.ProgramTypes.matchPattern pat)
              |> Stdlib.String.join ", "

            $"{caseName} ({fieldPart})"


      let binaryOperation (b: LanguageTools.ProgramTypes.BinaryOperation) : String =
        match b with
        // TODO: consider surrounding with spaces
        | BinOpAnd -> "&&"
        | BinOpOr -> "||"

      let infixFnName (i: LanguageTools.ProgramTypes.InfixFnName) : String =
        match i with
        | ArithmeticPlus -> "+"
        | ArithmeticMinus -> "-"
        | ArithmeticMultiply -> "*"
        | ArithmeticDivide -> "/"
        | ArithmeticModulo -> "%"
        | ArithmeticPower -> "^"
        | ComparisonGreaterThan -> ">"
        | ComparisonGreaterThanOrEqual -> ">="
        | ComparisonLessThan -> "<"
        | ComparisonLessThanOrEqual -> "<="
        | ComparisonEquals -> "=="
        | ComparisonNotEquals -> "!="
        | StringConcat -> "++"

      let infix (i: LanguageTools.ProgramTypes.Infix) : String =
        match i with
        | InfixFnCall i -> PrettyPrinter.ProgramTypes.infixFnName i
        | BinOp b -> PrettyPrinter.ProgramTypes.binaryOperation b

      let stringSegment (s: LanguageTools.ProgramTypes.StringSegment) : String =
        match s with
        | StringText text -> text
        | StringInterpolation expr -> $"{{{PrettyPrinter.ProgramTypes.expr expr}}}"

      let pipeExpr (p: LanguageTools.ProgramTypes.PipeExpr) : String =
        match p with
        | EPipeVariable(_id, varName, exprs) ->
          let exprs =
            exprs
            |> Stdlib.List.map PrettyPrinter.ProgramTypes.expr
            |> Stdlib.String.join " "

          $"({varName} {exprs})"

        | EPipeLambda(_id, pats, body) ->
          let argsPart =
            pats
            |> Stdlib.List.map (fun lp -> letPattern lp)
            |> Stdlib.String.join " "

          $"fun {argsPart} -> {expr body}"

        | EPipeInfix(_id, infix, expr) ->
          let infixPart = PrettyPrinter.ProgramTypes.infix infix
          let exprPart = PrettyPrinter.ProgramTypes.expr expr
          $"({infixPart}) {exprPart}"

        | EPipeFnCall(_id, fnName, typeArgs, args) ->
          let fnNamePart =
            match fnName with
            | Ok name -> PrettyPrinter.ProgramTypes.FQFnName.fullForReference name
            | Error e -> PrettyPrinter.ProgramTypes.nameResolutionError e

          let typeArgsPart =
            match typeArgs with
            | [] -> ""
            | _ ->
              typeArgs
              |> Stdlib.List.map (fun typeArg ->
                PrettyPrinter.ProgramTypes.typeReference typeArg)
              |> Stdlib.String.join ", "
              |> fun parts -> $"<{parts}>"

          let argsPart =
            args
            |> Stdlib.List.map (fun arg -> PrettyPrinter.ProgramTypes.expr arg)
            |> Stdlib.List.map (fun arg -> $"({arg})")
            |> Stdlib.String.join " "

          $"{fnNamePart}{typeArgsPart} {argsPart}"

        // LanguageTools.ID *
        // typeName: LanguageTools.ProgramTypes.TypeName.TypeName *
        // caseName: String *
        // fields: List<LanguageTools.ProgramTypes.Expr>
        | EPipeEnum(_id, typeName, caseName, fields) ->
          let typeNamePart =
            match typeName with
            | Ok name -> PrettyPrinter.ProgramTypes.FQTypeName.fullForReference name
            | Error e -> PrettyPrinter.ProgramTypes.nameResolutionError e

          match fields with
          | [] -> $"{typeNamePart}.{caseName}"
          | fields ->
            let fieldPart =
              fields
              |> Stdlib.List.map (fun field -> PrettyPrinter.ProgramTypes.expr field)
              |> Stdlib.List.map (fun field -> $"({field})")
              |> Stdlib.String.join " "

            $"{typeNamePart}.{caseName} {fieldPart}"

      let expr (e: LanguageTools.ProgramTypes.Expr) : String =
        match e with
        | EUnit _id -> "()"

        // simple data
        | EBool(_id, b) -> Stdlib.Bool.toString b
        | EInt64(_id, i) -> (Stdlib.Int64.toString i) ++ "L"
        | EUInt64(_id, i) -> (Stdlib.UInt64.toString i) ++ "UL"
        | EInt8(_id, i) -> Stdlib.Int8.toString i ++ "y"
        | EUInt8(_id, i) -> Stdlib.UInt8.toString i ++ "uy"
        | EInt16(_id, i) -> Stdlib.Int16.toString i ++ "s"
        | EUInt16(_id, i) -> Stdlib.UInt16.toString i ++ "us"
        | EInt32(_id, i) -> Stdlib.Int32.toString i ++ "l"
        | EUInt32(_id, i) -> Stdlib.UInt32.toString i ++ "ul"
        | EInt128(_id, i) -> Stdlib.Int128.toString i ++ "Q"
        | EUInt128(_id, i) -> Stdlib.UInt128.toString i ++ "Z"

        | EFloat(_id, sign, whole, remainder) ->
          let signPart = PrettyPrinter.sign sign

          let remainderPart = PrettyPrinter.processRemainder remainder

          $"{signPart}{whole}.{remainderPart}"


        | EChar(_id, c) -> "'" ++ c ++ "'"

        | EString(_id, segments) ->
          match segments with
          | [] -> "\"\""
          | [ StringText text ] ->
            $"\"{PrettyPrinter.escapeSpecialCharacters text}\""
          | segments ->
            let inner =
              segments
              |> Stdlib.List.map (fun segment ->
                PrettyPrinter.ProgramTypes.stringSegment segment)
              |> Stdlib.String.join ""

            $"$\"{inner}\""


        // structures of data

        | EList(_id, items) ->
          items
          |> Stdlib.List.map (fun item -> PrettyPrinter.ProgramTypes.expr item)
          |> Stdlib.String.join "; "
          |> fun parts -> "[" ++ parts ++ "]"

        | EDict(_id, pairs) ->
          let pairPart =
            pairs
            |> Stdlib.List.map (fun pair ->
              let (key, value) = pair
              $"{key} = {PrettyPrinter.ProgramTypes.expr value}")
            |> Stdlib.String.join "; "
            |> fun parts -> "{ " ++ parts ++ " }"

          $"Dict {pairPart}"


        | ETuple(_id, first, second, theRest) ->
          (Stdlib.List.append [ first; second ] theRest)
          |> Stdlib.List.map (fun item -> PrettyPrinter.ProgramTypes.expr item)
          |> Stdlib.String.join ", "
          |> fun parts -> "(" ++ parts ++ ")"

        | ERecord(_id, typeName, fields) ->
          let typeNamePart =
            match typeName with
            | Ok name -> PrettyPrinter.ProgramTypes.FQTypeName.fullForReference name
            | Error e -> PrettyPrinter.ProgramTypes.nameResolutionError e

          let fieldPart =
            fields
            |> Stdlib.List.map (fun pair ->
              let (name, expr) = pair
              $"{name} = {PrettyPrinter.ProgramTypes.expr expr}")
            |> Stdlib.String.join "; "
            |> fun parts -> "{ " ++ parts ++ " }"

          $"{typeNamePart} {fieldPart}"

        | EEnum(_id, typeName, caseName, fields) ->
          let typeNamePart =
            match typeName with
            | Ok name -> PrettyPrinter.ProgramTypes.FQTypeName.fullForReference name
            | Error e -> PrettyPrinter.ProgramTypes.nameResolutionError e

          match fields with
          | [] -> $"{typeNamePart}.{caseName}"
          | fields ->
            let fieldPart =
              fields
              |> Stdlib.List.map (fun field -> PrettyPrinter.ProgramTypes.expr field)
              |> Stdlib.String.join ", "

            $"{typeNamePart}.{caseName}({fieldPart})"


        // declaring and accessing variables

        | ELet(_id, pattern, rhs, body) ->
          let patternPart = PrettyPrinter.ProgramTypes.letPattern pattern

          let rhsPart = PrettyPrinter.ProgramTypes.expr rhs
          let bodyPart = PrettyPrinter.ProgramTypes.expr body

          $"let {patternPart} =\n{PrettyPrinter.indent rhsPart}\n{bodyPart}"

        | EFieldAccess(id, expr, fieldName) ->
          let exprPart = PrettyPrinter.ProgramTypes.expr expr
          // Builtin.debug "expr" expr

          // TODO: only sometimes need to wrap exprPart in parens
          match expr with
          | EVariable(_, _) -> $"{exprPart}.{fieldName}"
          | EFieldAccess(_, _, _) -> $"{exprPart}.{fieldName}"
          | _ -> $"({exprPart}).{fieldName}"

        | EVariable(_id, name) -> name


        // control flow

        | EIf(id, cond, thenBranch, elseBranch) ->
          let condPart = PrettyPrinter.ProgramTypes.expr cond

          let thenPart =
            (PrettyPrinter.ProgramTypes.expr thenBranch) |> PrettyPrinter.indent

          match elseBranch with
          | None -> $"if {condPart} then\n{thenPart}"
          | Some elseBranch ->
            match elseBranch with
            | EIf(_, _, _, _) ->
              let elsePart = (PrettyPrinter.ProgramTypes.expr elseBranch)

              $"if {condPart} then\n{thenPart}\nelse {elsePart}"

            | _ ->
              let elsePart =
                (PrettyPrinter.ProgramTypes.expr elseBranch) |> PrettyPrinter.indent

              $"if {condPart} then\n{thenPart}\nelse\n{elsePart}"

        | EMatch(_id, arg, cases) ->
          let cases =
            cases
            |> Stdlib.List.map (fun case ->

              let patternPart = PrettyPrinter.ProgramTypes.matchPattern case.pat

              let whenPart =
                match case.whenCondition with
                | Some cond ->
                  let whenCondition = PrettyPrinter.ProgramTypes.expr cond

                  $" when {whenCondition}"
                | None -> ""

              let rhsPart =
                (PrettyPrinter.ProgramTypes.expr case.rhs) |> PrettyPrinter.indent

              $"| {patternPart}{whenPart} ->\n{rhsPart}")

          let casesPart = Stdlib.String.join cases "\n"

          let argPart = PrettyPrinter.ProgramTypes.expr arg

          $"match {argPart} with \n{casesPart}"


        | EPipe(_id, expr, pipeExprs) ->
          // LanguageTools.ID *
          // LanguageTools.ProgramTypes.Expr *
          // List<LanguageTools.ProgramTypes.PipeExpr>
          let exprPart = PrettyPrinter.ProgramTypes.expr expr

          let pipeParts =
            pipeExprs
            |> Stdlib.List.map (fun pipeExpr ->
              PrettyPrinter.ProgramTypes.pipeExpr pipeExpr)
            |> Stdlib.String.join " \n|> "

          $"{exprPart} \n|> {pipeParts}"



        // function calls

        | EInfix(_id, infix, left, right) ->
          let infixPart = PrettyPrinter.ProgramTypes.infix infix

          let leftPart = PrettyPrinter.ProgramTypes.expr left

          let rightPart = PrettyPrinter.ProgramTypes.expr right

          // TODO: might need to wrap in parens
          $"({leftPart}) {infixPart} ({rightPart})"

        | ELambda(_id, pats, body) ->
          let patsPart =
            pats
            |> Stdlib.List.map (fun pat -> letPattern pat)
            |> Stdlib.String.join " "

          let bodyPart = PrettyPrinter.ProgramTypes.expr body

          $"(fun {argsPart} -> \n {PrettyPrinter.indent bodyPart})"

        | EApply(_id, fnName, typeArgs, args) ->
          let fnNamePart = PrettyPrinter.ProgramTypes.expr fnName

          let argsPart =
            args
            |> Stdlib.List.map (fun arg -> PrettyPrinter.ProgramTypes.expr arg)
            |> Stdlib.String.join " "

          match typeArgs with
          | [] -> $"{fnNamePart} {argsPart}"
          | _ ->
            let typeArgsPart =
              typeArgs
              |> Stdlib.List.map (fun typeArg ->
                PrettyPrinter.ProgramTypes.typeReference typeArg)
              |> Stdlib.String.join ", "

            $"{fnNamePart}<{typeArgsPart}> {argsPart}"

        | EFnName(_id, fnName) ->
          match fnName with
          | Ok name -> PrettyPrinter.ProgramTypes.FQFnName.fullForReference name
          | Error e -> PrettyPrinter.ProgramTypes.nameResolutionError e

        // LanguageTools.ID *
        // record: LanguageTools.ProgramTypes.Expr *
        // updates: List<String * LanguageTools.ProgramTypes.Expr>
        | ERecordUpdate(_id, record, updates) ->
          let recordPart = PrettyPrinter.ProgramTypes.expr record

          let updatePart =
            updates
            |> Stdlib.List.map (fun pair ->
              let (fieldName, expr) = pair
              $"{fieldName} = {PrettyPrinter.ProgramTypes.expr expr}")
            |> Stdlib.String.join "; "

          // TODO: don't always need the parens

          $"{{ ({recordPart}) with {updatePart} }}"

        | EConstant(_id, constant) ->
          match constant with
          | Ok name ->
            PrettyPrinter.ProgramTypes.FQConstantName.fullForReference name
          | Error e -> PrettyPrinter.ProgramTypes.nameResolutionError e

        // CLEANUP: remove this case before shipping to users
        | expr ->
          let s = Builtin.Json.serialize<LanguageTools.ProgramTypes.Expr> expr

          $"{s}"

      // CLEANUP this isn't currently used
      // if/when we uncomment this, take note that the `m` argument is a function
      // that we may not fully yet support (esp in name-resolution)
      // let deprecation<'name>
      //   (m: 'name -> String)
      //   (d: LanguageTools.ProgramTypes.Deprecation)
      //   : String =
      //   match d with
      //   | NotDeprecated -> "NotDeprecated"
      //   | RenamedTo name -> $"RenamedTo {m name}"
      //   | ReplacedBy name -> $"ReplacedBy {m name}"
      //   | DeprecatedBecause reason -> $"DeprecatedBecause {reason}"

      module TypeDeclaration =
        let recordField
          (d: LanguageTools.ProgramTypes.TypeDeclaration.RecordField)
          : String =
          // TODO: /// for description
          $"{d.name}: {PrettyPrinter.ProgramTypes.typeReference d.typ}"

        let enumField
          (d: LanguageTools.ProgramTypes.TypeDeclaration.EnumField)
          : String =
          match d.label with
          | None -> PrettyPrinter.ProgramTypes.typeReference d.typ
          | Some label ->
            $"{label}: {PrettyPrinter.ProgramTypes.typeReference d.typ}"

        let enumCase
          (c: LanguageTools.ProgramTypes.TypeDeclaration.EnumCase)
          : String =
          match c.fields with
          | [] -> "| " ++ c.name
          | fields ->
            let fieldPart =
              fields
              |> Stdlib.List.map (fun field ->
                PrettyPrinter.ProgramTypes.TypeDeclaration.enumField field)
              |> Stdlib.String.join " * "

            $"| {c.name} of {fieldPart}"


      let customType
        (d: LanguageTools.ProgramTypes.TypeDeclaration.TypeDeclaration)
        : String =
        match d.definition with
        | Alias typeRef -> PrettyPrinter.ProgramTypes.typeReference typeRef

        | Record fields ->
          let fieldsPart =
            fields
            |> Stdlib.List.map (fun field ->
              PrettyPrinter.ProgramTypes.TypeDeclaration.recordField field)
            |> Stdlib.String.join "\n  "

          "{ " ++ (fieldsPart) ++ " }"

        | Enum cases ->
          cases
          |> Stdlib.List.map (fun case ->
            PrettyPrinter.ProgramTypes.TypeDeclaration.enumCase case)
          |> Stdlib.String.join "\n"


      module Handler =
        let cronInterval
          (c: LanguageTools.ProgramTypes.Handler.CronInterval)
          : String =
          match c with
          | EveryDay -> "Every Day"
          | EveryWeek -> "Every Week"
          | EveryFortnight -> "Every Fortnight"
          | EveryHour -> "Every Hour"
          | Every12Hours -> "Every 12 Hours"
          | EveryMinute -> "Every Minute"

        let spec (s: LanguageTools.ProgramTypes.Handler.Spec) : String =
          match s with
          | HTTP(route, method) -> $"[<HttpHandler({method}, {route})>]"
          | Worker name -> $"[<Worker({name})>]"
          | Cron(name, interval) ->
            $"[<Cron({name}, {PrettyPrinter.ProgramTypes.Handler.cronInterval interval})>]"
          | REPL name -> $"[<REPL({name})>]"

      let handler (h: LanguageTools.ProgramTypes.Handler.Handler) : String =
        let specPart = PrettyPrinter.ProgramTypes.Handler.spec h.spec

        $"{specPart}\nlet _handler _ignored =\n  {PrettyPrinter.ProgramTypes.expr h.ast}"


      let db (db: LanguageTools.ProgramTypes.DB) : String =
        let versionPart =
          if db.version == 0L then
            ""
          else
            $"_v{Stdlib.Int64.toString db.version}"

        let typPart = PrettyPrinter.ProgramTypes.typeReference db.typ

        $"type {db.name}{versionPart} = {typPart}"




      // module Toplevel =
      //   type T =
      //     | TLHandler of Handler.Handler
      //     | TLDB of DB


      // let secret (s: Stdlib.Secret.T) : String =
      //   let versionPart = if s.version == 0 then "" else $"_v{Stdlib.Int64.toString s.version}"

      //   $"let {s.name}{versionPart} = \"*****\""


      let packageType (p: LanguageTools.ProgramTypes.PackageType) : String =
        // TODO: take care of deprecated and description
        let namePart =
          PrettyPrinter.ProgramTypes.FQTypeName.Package.atDefinition p.name

        let typeParamPart =
          match p.declaration.typeParams with
          | [] -> ""
          | _ ->
            p.declaration.typeParams
            |> Stdlib.List.map (fun typeParam -> $"'{typeParam}")
            |> Stdlib.String.join ", "
            |> fun parts -> $"<{parts}>"

        let defPart =
          (PrettyPrinter.ProgramTypes.customType p.declaration)
          |> PrettyPrinter.indent

        $"type {namePart}{typeParamPart} =\n{defPart}"


      let packageConstant (p: LanguageTools.ProgramTypes.PackageConstant) : String =
        let namePart =
          PrettyPrinter.ProgramTypes.FQConstantName.Package.atDefinition p.name

        let bodyPart = PrettyPrinter.ProgramTypes.constant p.body

        $"let {namePart} = {bodyPart}"


      module PackageFn =
        let parameter (p: LanguageTools.ProgramTypes.PackageFn.Parameter) : String =
          // TODO: /// for description
          $"({p.name}: {PrettyPrinter.ProgramTypes.typeReference p.typ})"

      let packageFn (p: LanguageTools.ProgramTypes.PackageFn.PackageFn) : String =
        // TODO: handle `deprecated`, `description`
        let namePart =
          PrettyPrinter.ProgramTypes.FQFnName.Package.atDefinition p.name

        let typeParamPart =
          match p.typeParams with
          | [] -> ""
          | _ ->
            p.typeParams
            |> Stdlib.List.map (fun typeParam -> $"'{typeParam}")
            |> Stdlib.String.join ", "
            |> fun parts -> $"<{parts}>"

        let paramPart =
          p.parameters
          |> Stdlib.List.map (fun param ->
            PrettyPrinter.ProgramTypes.PackageFn.parameter param)
          |> Stdlib.String.join " "

        let retPart = PrettyPrinter.ProgramTypes.typeReference p.returnType

        let bodyPart = PrettyPrinter.ProgramTypes.expr p.body

        $"let {namePart}{typeParamPart} {paramPart}: {retPart} =\n{PrettyPrinter.indent bodyPart}"