// TODO:
//alias PT = PACKAGE.Darklang.LanguageTools.ProgramTypes
//alias RT = PACKAGE.Darklang.Stdlib.RuntimeTypes

module Darklang =
  module PrettyPrinter =
    module Packages =

      type Module =
        { name: String
          types: List<PACKAGE.Darklang.LanguageTools.ProgramTypes.PackageType.T>
          fns: List<PACKAGE.Darklang.LanguageTools.ProgramTypes.PackageFn.T>
          submodules: List<PACKAGE.Darklang.PrettyPrinter.Packages.Module>
          constants : List<PACKAGE.Darklang.LanguageTools.ProgramTypes.PackageConstant.T>
          }

      let withType
        (ms: List<PACKAGE.Darklang.PrettyPrinter.Packages.Module>)
        (t: PACKAGE.Darklang.LanguageTools.ProgramTypes.PackageType.T)
        : List<PACKAGE.Darklang.PrettyPrinter.Packages.Module> =
        match t.name.modules with
        | [] ->
          [ PACKAGE.Darklang.PrettyPrinter.Packages.Module
              { name =
                  (t.name
                   |> PACKAGE.Darklang.PrettyPrinter.ProgramTypes.TypeName.Package.fullForReference)
                  ++ "has no modules"
                types = []
                fns = []
                submodules = []
                constants = []
                } ]

        | firstModuleNamePart :: submoduleNames ->
          // TODO: check if firstModuleNamePart is already in m
          let (foundModuleMaybe, otherModules) =
            ms |> List.partition (fun m -> m.name == firstModuleNamePart)

          match (foundModuleMaybe, submoduleNames) with
          | [], [] ->
            let newModule =
              PACKAGE.Darklang.PrettyPrinter.Packages.Module
                { name = firstModuleNamePart
                  types =
                    [ { t with
                          name = { t.name with modules = [] } } ]
                  fns = []
                  submodules = []
                  constants = []
                  }

            List.append otherModules [ newModule ]

          | [], submoduleNames ->
            let typeWithoutFirstModuleNamePartOfModule =
              { t with
                  name = { t.name with modules = submoduleNames } }

            let newModuleWithSubmodule =
              PACKAGE.Darklang.PrettyPrinter.Packages.Module
                { name = firstModuleNamePart
                  types = []
                  fns = []
                  submodules =
                    PACKAGE.Darklang.PrettyPrinter.Packages.withType
                      []
                      typeWithoutFirstModuleNamePartOfModule
                  constants = []
                  }

            List.append otherModules [ newModuleWithSubmodule ]

          | [ foundModule ], [] ->
            let updatedModule =
              { foundModule with
                  types =
                    List.append
                      foundModule.types
                      [ { t with
                            name = { t.name with modules = [] } } ] }

            List.append otherModules [ updatedModule ]

          | [ foundModule ], submoduleNames ->
            let typeWithoutFirstModuleNamePartOfModule =
              { t with
                  name = { t.name with modules = submoduleNames } }

            let updatedModule =
              { foundModule with
                  submodules =
                    PACKAGE.Darklang.PrettyPrinter.Packages.withType
                      foundModule.submodules
                      typeWithoutFirstModuleNamePartOfModule }

            List.append otherModules [ updatedModule ]


      let withFn
        (ms: List<PACKAGE.Darklang.PrettyPrinter.Packages.Module>)
        (f: PACKAGE.Darklang.LanguageTools.ProgramTypes.PackageFn.T)
        : List<PACKAGE.Darklang.PrettyPrinter.Packages.Module> =
        match f.name.modules with
        | [] ->
          [ PACKAGE.Darklang.PrettyPrinter.Packages.Module
              { name =
                  (f.name
                   |> PACKAGE.Darklang.PrettyPrinter.ProgramTypes.TypeName.Package.fullForReference)
                  ++ "has no modules"
                types = []
                fns = []
                submodules = []
                constants = []
                 } ]

        | firstModuleNamePart :: submoduleNames ->
          let (foundModuleMaybe, otherModules) =
            ms |> List.partition (fun m -> m.name == firstModuleNamePart)

          match (foundModuleMaybe, submoduleNames) with
          | [], [] ->
            let newModule =
              PACKAGE.Darklang.PrettyPrinter.Packages.Module
                { name = firstModuleNamePart
                  types = []
                  fns =
                    [ { f with
                          name = { f.name with modules = [] } } ]
                  submodules = []
                  constants = []
                   }

            List.append otherModules [ newModule ]

          | [], submoduleNames ->
            let fnWithoutFirstModuleNamePartOfModule =
              { f with
                  name = { f.name with modules = submoduleNames } }

            let newModuleWithSubmodule =
              PACKAGE.Darklang.PrettyPrinter.Packages.Module
                { name = firstModuleNamePart
                  types = []
                  fns = []
                  submodules =
                    PACKAGE.Darklang.PrettyPrinter.Packages.withFn
                      []
                      fnWithoutFirstModuleNamePartOfModule
                  constants = []
                  }

            List.append otherModules [ newModuleWithSubmodule ]

          | [ foundModule ], [] ->
            let updatedModule =
              { foundModule with
                  fns =
                    List.append
                      foundModule.fns
                      [ { f with
                            name = { f.name with modules = [] } } ] }

            List.append otherModules [ updatedModule ]

          | [ foundModule ], submoduleNames ->
            let fnWithoutFirstModuleNamePartOfModule =
              { f with
                  name = { f.name with modules = submoduleNames } }

            let updatedModule =
              { foundModule with
                  submodules =
                    PACKAGE.Darklang.PrettyPrinter.Packages.withFn
                      foundModule.submodules
                      fnWithoutFirstModuleNamePartOfModule }

            List.append otherModules [ updatedModule ]

      let withConstant
        (ms: List<PACKAGE.Darklang.PrettyPrinter.Packages.Module>)
        (c: PACKAGE.Darklang.LanguageTools.ProgramTypes.PackageConstant.T)
        : List<PACKAGE.Darklang.PrettyPrinter.Packages.Module> =
        match c.name.modules with
        | [] ->
          [ PACKAGE.Darklang.PrettyPrinter.Packages.Module
              { name =
                  (c.name
                   |> PACKAGE.Darklang.PrettyPrinter.ProgramTypes.TypeName.Package.fullForReference)
                  ++ "has no modules"
                types = []
                fns = []
                submodules = []
                constants = []
                 } ]

        | firstModuleNamePart :: submoduleNames ->
          let (foundModuleMaybe, otherModules) =
            ms |> List.partition (fun m -> m.name == firstModuleNamePart)

          match (foundModuleMaybe, submoduleNames) with
          | [], [] ->
            let newModule =
              PACKAGE.Darklang.PrettyPrinter.Packages.Module
                { name = firstModuleNamePart
                  types = []
                  fns = []
                  submodules = []
                  constants =
                    [ { c with
                          name = { c.name with modules = [] } } ]
                  }

            List.append otherModules [ newModule ]

          | [], submoduleNames ->
            let constantWithoutFirstModuleNamePartOfModule =
              { c with
                  name = { c.name with modules = submoduleNames } }

            let newModuleWithSubmodule =
              PACKAGE.Darklang.PrettyPrinter.Packages.Module
                { name = firstModuleNamePart
                  types = []
                  fns = []
                  submodules =
                    PACKAGE.Darklang.PrettyPrinter.Packages.withConstant
                      []
                      constantWithoutFirstModuleNamePartOfModule
                  constants = []
                  }

            List.append otherModules [ newModuleWithSubmodule ]

          | [ foundModule ], [] ->
            let updatedModule =
              { foundModule with
                  constants =
                    List.append
                      foundModule.constants
                      [ { c with
                            name = { c.name with modules = [] } } ] }

            List.append otherModules [ updatedModule ]

          | [ foundModule ], submoduleNames ->
            let constantWithoutFirstModuleNamePartOfModule =
              { c with
                  name = { c.name with modules = submoduleNames } }

            let updatedModule =
              { foundModule with
                  submodules =
                    PACKAGE.Darklang.PrettyPrinter.Packages.withConstant
                      foundModule.submodules
                      constantWithoutFirstModuleNamePartOfModule }

            List.append otherModules [ updatedModule ]



      let toModules
        (p: PACKAGE.Darklang.Stdlib.Packages)
        : List<PACKAGE.Darklang.PrettyPrinter.Packages.Module> =
        let empty = []

        let modulesAfterTypes =
          List.fold p.types empty (fun (modules, t) ->
            PACKAGE.Darklang.PrettyPrinter.Packages.withType modules t)

        let modulesWithTypesAndFns =
          List.fold p.fns modulesAfterTypes (fun (modules, f) ->
            PACKAGE.Darklang.PrettyPrinter.Packages.withFn modules f)

        let modulesWithTypesAndFnsAndConstants =
          List.fold p.constants modulesWithTypesAndFns (fun (modules, c) ->
            PACKAGE.Darklang.PrettyPrinter.Packages.withConstant modules c)

        modulesWithTypesAndFnsAndConstants


    let packageModule (m: PACKAGE.Darklang.PrettyPrinter.Packages.Module) : String =
      let headerPart = $"module {m.name} =\n"

      let typesPart =
        match m.types with
        | [] -> PACKAGE.Darklang.Stdlib.Option.Option.Nothing
        | types ->
          m.types
          |> List.map (fun t ->
            PACKAGE.Darklang.PrettyPrinter.ProgramTypes.packageType t)
          |> String.join "\n\n"
          |> PACKAGE.Darklang.Stdlib.Option.Option.Just

      let fnsPart =
        match m.fns with
        | [] -> PACKAGE.Darklang.Stdlib.Option.Option.Nothing
        | fns ->
          m.fns
          |> List.map (fun f ->
            PACKAGE.Darklang.PrettyPrinter.ProgramTypes.packageFn f)
          |> String.join "\n\n"
          |> PACKAGE.Darklang.Stdlib.Option.Option.Just

      let submodulesPart =
        match m.submodules with
        | [] -> PACKAGE.Darklang.Stdlib.Option.Option.Nothing
        | submodules ->
          submodules
          |> List.map (fun m -> PACKAGE.Darklang.PrettyPrinter.packageModule m)
          |> String.join "\n\n"
          |> PACKAGE.Darklang.Stdlib.Option.Option.Just

      let constantsPart =
        match m.constants with
        | [] -> PACKAGE.Darklang.Stdlib.Option.Option.Nothing
        | constants ->
          m.constants
          |> List.map (fun c ->
            PACKAGE.Darklang.PrettyPrinter.ProgramTypes.packageConstant c)
          |> String.join "\n\n"
          |> PACKAGE.Darklang.Stdlib.Option.Option.Just

      let parts =
        [ typesPart; fnsPart; submodulesPart; constantsPart ] |> List.filterMap (fun s -> s)

      match parts with
      | [] ->
        // CLEANUP: actually error
        "Error - module defined somehow without parts"
      | parts ->
        let bodyPart =
          (String.join parts "\n\n") |> PACKAGE.Darklang.PrettyPrinter.indent

        $"module {m.name} =\n{bodyPart}"

    let packages (p: PACKAGE.Darklang.Stdlib.Packages) : String =
      let withOwnerStuffRepresentedAsRootLevelModule =
        PACKAGE.Darklang.Stdlib.Packages
          { types =
              p.types
              |> List.map (fun t ->
                { t with
                    name =
                      { t.name with
                          modules = List.append [ t.name.owner ] t.name.modules
                          owner = "(redacted)" } })
            fns =
              p.fns
              |> List.map (fun f ->
                { f with
                    name =
                      { f.name with
                          modules = List.append [ f.name.owner ] f.name.modules
                          owner = "(redacted)" } })

            constants =
              p.constants
              |> List.map (fun c ->
                { c with
                    name =
                      { c.name with
                          modules = List.append [ c.name.owner ] c.name.modules
                          owner = "(redacted)" } }) }

      let modules =
        PACKAGE.Darklang.PrettyPrinter.Packages.toModules
          withOwnerStuffRepresentedAsRootLevelModule


      // CLEANUP make ordering 'better' in some way
      modules
      |> List.map (fun m -> PACKAGE.Darklang.PrettyPrinter.packageModule m)
      |> String.join "\n\n"