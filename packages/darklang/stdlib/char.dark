module Darklang =
  module Stdlib =
    module Char =
      /// Return the uppercase value of <param c>. If <param c> does not have an uppercase value, returns <param c>
      let toUppercase (c: Char) : Char = Builtin.Char.toUppercase c


      /// Return the lowercase value of <param c>. If <param c> does not have a lowercase value, returns <param c>
      let toLowercase (c: Char) : Char = Builtin.Char.toLowercase c


      /// Return whether <param c> is a lowercase character.
      let isLowercase (c: Char) : Bool =
        Builtin.Char.toLowercase c == c && Builtin.Char.toUppercase c != c


      /// Return whether <param c> is an uppercase character.
      let isUppercase (c: Char) : Bool =
        Builtin.Char.toLowercase c != c && Builtin.Char.toUppercase c == c


      /// Return whether <param c> is a digit (that is, the digits 0-9)
      let isDigit (c: Char) : Bool = Builtin.Char.isDigit c


      /// Return whether <param c> is an ASCII letter
      let isASCIILetter (c: Char) : Bool = Builtin.Char.isASCIILetter c


      /// Return whether <param c> is a valid ASCII character
      let isASCII (c: Char) : Bool = Builtin.Char.isASCII c


      /// Return whether <param c1> is less than <param c2>
      let isLessThan (c1: Char) (c2: Char) : Bool = Builtin.Char.isLessThan c1 c2


      /// Return whether <param c1> is greater than <param c2>
      let isGreaterThan (c1: Char) (c2: Char) : Bool =
        Builtin.Char.isGreaterThan c1 c2


      /// Stringify <param c>
      let toString (c: Char) : String = Builtin.Char.toString c
