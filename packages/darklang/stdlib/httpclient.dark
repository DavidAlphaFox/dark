module Darklang =
  module Stdlib =
    module HttpClient =

      // Note: this function currently doesn't work, as Base64.encode doesn't exist
      /// Returns a header <type (String*String))> with {{'Authorization'}} created using HTTP basic auth
      let basicAuth
        (username: String)
        (password: String)
        : Result<(String * String), String> =
        if String.contains "-" username then
          Error "Username cannot contain a hyphen"
        else
          let encoded = Base64.encode (String.toBytes $"{username}:{password}")
          $"Basic {encoded}"


      // TODOs:
      // - maybe the below should be in another ContentType module,
      //   accessible by e.g. `HttpClient.ContentType.form`?
      // - these should likely be Constants (rather than fns)

      /// Returns a header <type (String*String))> with {{Content-Type}} set for HTML form requests or responses
      let formContentType (): (String * String) =
        ("Content-Type", "application/x-www-form-urlencoded")


      /// Returns a header <type (String*String))> with {{Content-Type}} set for JSON requests or responses
      let jsonContentType (): (String * String) =
        ("Content-Type", "application/json; charset=utf-8")


      /// Returns a header <type (String*String))> with {{'Content-Type'}} set for plain text requests or responses
      let plainTextContentType (): (String * String) =
        ("Content-Type", "text/plain; charset=utf-8")


      /// Returns a header <type (String*String))> with {{'Content-Type'}} set for html requests
      let htmlContentType (): (String * String) =
        ("Content-Type", "text/html; charset=utf-8")


      /// Returns a header <type (String*String))> with {{'Authorization'}} set to <param token>
      let bearerToken (token: String): (String * String) =
        ("Authorization", ("Bearer " ++ token))