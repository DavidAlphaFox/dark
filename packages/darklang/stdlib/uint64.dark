module Darklang =
  module Stdlib =
    module UInt64 =

      type ParseError =
        | BadFormat
        | OutOfRange


      /// Returns the result of wrapping <param a> around so that {{0 <= res < b}}.
      /// The modulus <param b> must be greater than 0
      let ``mod`` (a: UInt64) (b: UInt64) : UInt64 = Builtin.UInt64.``mod`` a b


      /// Adds 64-bit unsigned integers together
      let add (a: UInt64) (b: UInt64) : UInt64 = Builtin.UInt64.add a b


      /// Subtracts 64-bit unsigned integers
      let subtract (a: UInt64) (b: UInt64) : UInt64 = Builtin.UInt64.subtract a b


      /// Multiplies 64-bit unsigned integers
      let multiply (a: UInt64) (b: UInt64) : UInt64 = Builtin.UInt64.multiply a b


      /// Divides 64-bit unsigned integers
      let divide (a: UInt64) (b: UInt64) : UInt64 = Builtin.UInt64.divide a b


      /// Raise <param base> to the power of <param exponent>.
      /// <param exponent> must to be positive.
      /// Return value wrapped in a {{Result}}
      let power (``base``: UInt64) (exponent: UInt64) : UInt64 =
        if ``base`` == 0UL && exponent == 0UL then 1UL
        else if ``base`` == 0UL then 0UL
        else if ``base`` == 1UL then 1UL
        else Builtin.UInt64.power ``base`` exponent


      /// Returns {{true}} if <param a> is greater than <param b>
      let greaterThan (a: UInt64) (b: UInt64) : Bool = Builtin.UInt64.greaterThan a b


      /// Returns {{true}} if <param a> is greater than or equal to <param b>
      let greaterThanOrEqualTo (a: UInt64) (b: UInt64) : Bool = Builtin.UInt64.greaterThanOrEqualTo a b


      /// Returns {{true}} if <param a> is less than <param b>
      let lessThan (a: UInt64) (b: UInt64) : Bool = Builtin.UInt64.lessThan a b

      /// Returns {{true}} if <param a> is less than or equal to <param b>
      let lessThanOrEqualTo (a: UInt64) (b: UInt64) : Bool = Builtin.UInt64.lessThanOrEqualTo a b


      /// Returns a random integer between <param start> and <param end> (inclusive)
      let random (start: UInt64) (``end``: UInt64) : UInt64 = Builtin.UInt64.random start ``end``


      /// Get the square root of an <type UInt64>
      let sqrt (a: UInt64) : Float = Builtin.UInt64.sqrt a


      /// Converts an <type UInt64> to a <type Float>
      let toFloat (a: UInt64) : Float = Builtin.UInt64.toFloat a


      /// Returns the sum of all the ints in the list
      let sum (lst: List<UInt64>) : UInt64 =
        PACKAGE.Darklang.Stdlib.List.fold lst 0UL (fun acc x -> Builtin.UInt64.add acc x)


      /// Returns the higher of <param a> and <param b>
      let max (a: UInt64) (b: UInt64) : UInt64 = if Builtin.UInt64.greaterThan a b then a else b


      /// Returns the lower of <param a> and <param b>
      let min (a: UInt64) (b: UInt64) : UInt64 = if Builtin.UInt64.lessThan a b then a else b


      /// If <param value> is within the range given by <param limitA> and <param
      /// limitB>, returns <param value>.
      /// If <param value> is outside the range, returns <param limitA> or <param
      /// limitB>, whichever is closer to <param value>.
      /// <param limitA> and <param limitB> can be provided in any order.
      let clamp (value: UInt64) (limitA: UInt64) (limitB: UInt64) : UInt64 =
        let min = if Builtin.UInt64.lessThan limitA limitB then limitA else limitB
        let max = if Builtin.UInt64.greaterThan limitA limitB then limitA else limitB

        if Builtin.UInt64.lessThan value min then min
        else if Builtin.UInt64.greaterThan value max then max
        else value


      /// Returns the <type UInt64> value of a <type String>
      let parse
        (s: String)
        : PACKAGE.Darklang.Stdlib.Result.Result<UInt64, PACKAGE.Darklang.Stdlib.UInt64.ParseError> =
        Builtin.UInt64.parse s


      /// Stringify <param int>
      let toString (uint64: UInt64) : String = Builtin.UInt64.toString uint64