module Darklang =
  module Stdlib =
    module List =

      let dropLast (list: List<'a>) : List<'a> =
        match list with
        | [] -> []
        | head :: tail ->
          match tail with
          | [] -> []
          | _ ->
            List.append_v0
              (List.singleton_v0 head)
              (PACKAGE.Darklang.Stdlib.List.dropLast tail)

      /// Returns {{Some}} the head (first value) of a list.
      /// Returns {{None}} if the list is empty.
      let head (list: List<'a>) : PACKAGE.Darklang.Stdlib.Option.Option<'a> =
        match list with
        | [] -> PACKAGE.Darklang.Stdlib.Option.Option.None
        | head :: _ -> PACKAGE.Darklang.Stdlib.Option.Option.Some head


      /// If <param list> contains at least one value, returns {{Some}} with a list of
      /// every value other than the first. Otherwise, returns {{None}}.
      let tail (list: List<'a>) : PACKAGE.Darklang.Stdlib.Option.Option<List<'a>> =
        match list with
        | [] -> PACKAGE.Darklang.Stdlib.Option.Option.None
        | _ :: tail -> PACKAGE.Darklang.Stdlib.Option.Option.Some tail


      /// Add element <param val> to front of <type list> <param list>
      let push (list: List<'a>) (value: 'a) : List<'a> =
        List.append_v0 (List.singleton_v0 value) list


      /// Add element <param val> to back of <type list> <param list>
      let pushBack (list: List<'a>) (value: 'a) : List<'a> =
        List.append_v0 list (List.singleton_v0 value)


      /// Returns the last value in <param list>, wrapped in an option (<paramNone> if the list is empty)
      let last (list: List<'a>) : PACKAGE.Darklang.Stdlib.Option.Option<'a> =
        match list with
        | [] -> PACKAGE.Darklang.Stdlib.Option.Option.None
        | head :: tail ->
          match tail with
          | [] -> PACKAGE.Darklang.Stdlib.Option.Option.Some head
          | _ -> PACKAGE.Darklang.Stdlib.List.last tail