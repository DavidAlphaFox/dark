module Darklang =
  module Stdlib =
    module Option =

      type Option<'v> =
        | Just of 'v
        | Nothing

      /// If <param option> is {{Just <var value>}}, returns {{fn <var value>}}. The
      /// lambda <fn fn> is applied to <var value> and the result is wrapped in
      /// {{Just}}. Otherwise, returns {{Nothing}}
      let map (option: PACKAGE.Darklang.Stdlib.Option.Option<'a>) (fn: 'a -> 'b) : PACKAGE.Darklang.Stdlib.Option.Option<'b> =
        match option with
        | Just v -> PACKAGE.Darklang.Stdlib.Option.Option.Just (v |> fn)
        | Nothing -> PACKAGE.Darklang.Stdlib.Option.Option.Nothing


      /// If <param option> is {{Just <var value>}}, returns {{fn <var value>}}. The
      /// lambda <fn fn> is applied to <var value> and the result is wrapped in
      /// {{Just}}. Otherwise, returns {{Nothing}}
      let andThen (option: PACKAGE.Darklang.Stdlib.Option.Option<'a>) (fn: 'a -> PACKAGE.Darklang.Stdlib.Option.Option<'b>) : PACKAGE.Darklang.Stdlib.Option.Option<'b> =
        match option with
        | Just v -> v |> fn
        | Nothing -> PACKAGE.Darklang.Stdlib.Option.Option.Nothing

      /// If <param option> is {{Just <var value>}}, returns <var value>. Otherwise,
      /// returns <param default>
      let withDefault (option: PACKAGE.Darklang.Stdlib.Option.Option<'a>) (default_: 'a) : 'a =
        match option with
        | Just v -> v
        | Nothing -> default_





