(*
  /// A set of predefined range kinds.
  export namespace FoldingRangeKind {
    /// Folding range for a comment
    export const Comment = 'comment';

    /// Folding range for an import or include
    export const Imports = 'imports';

    /// Folding range for a region (e.g. `#region`)
    export const Region = 'region';
  }

  /// A predefined folding range kind.
  ///
  /// The type is a string since the value set is extensible
  export type FoldingRangeKind = string;



  /// Represents a folding range. To be valid, start and end line must be bigger than zero and smaller
  /// than the number of lines in the document. Clients are free to ignore invalid ranges.
  export interface FoldingRange {
    /// The zero-based start line of the range to fold. The folded area starts after the line's last character.
    /// To be valid, the end must be zero or larger and smaller than the number of lines in the document.
    startLine: uinteger;

    /// The zero-based character offset from where the folded range starts. If not defined, defaults to the length of the start line.
    startCharacter?: uinteger;

    /// The zero-based end line of the range to fold. The folded area ends with the line's last character.
    /// To be valid, the end must be zero or larger and smaller than the number of lines in the document.
    endLine: uinteger;

    /// The zero-based character offset before the folded range ends. If not defined, defaults to the length of the end line.
    endCharacter?: uinteger;

    /// Describes the kind of the folding range such as `comment' or 'region'. The kind
    /// is used to categorize folding ranges and used by commands like 'Fold all comments'.
    /// See {@link FoldingRangeKind} for an enumeration of standardized kinds.
    kind?: FoldingRangeKind;

    /// The text that the client should show when the specified range is
    /// collapsed. If not defined or not supported by the client, a default
    /// will be chosen by the client.
    collapsedText?: string;
  }


  /// @proposed
  export interface ClientFoldingRangeKindOptions {
    /// The folding range kind values the client supports. When this
    /// property exists the client also guarantees that it will
    /// handle values outside its set gracefully and falls back
    /// to a default value when unknown.
    valueSet?: FoldingRangeKind[];
  }

  /// @proposed
  export interface ClientFoldingRangeOptions {
    /// If set, the client signals that it supports setting collapsedText on
    /// folding ranges to display custom labels instead of the default text.
    collapsedText?: boolean;
  }

  export interface FoldingRangeClientCapabilities {
    /// Whether implementation supports dynamic registration for folding range
    /// providers. If this is set to `true` the client supports the new
    /// `FoldingRangeRegistrationOptions` return value for the corresponding
    /// server capability as well.
    dynamicRegistration?: boolean;

    /// The maximum number of folding ranges that the client prefers to receive
    /// per document. The value serves as a hint, servers are free to follow the
    /// limit.
    rangeLimit?: uinteger;

    /// If set, the client signals that it only supports folding complete lines.
    /// If set, client will ignore specified `startCharacter` and `endCharacter`
    /// properties in a FoldingRange.
    lineFoldingOnly?: boolean;

    /// Specific options for the folding range kind.
    foldingRangeKind?: ClientFoldingRangeKindOptions;

    /// Specific options for the folding range.
    foldingRange?: ClientFoldingRangeOptions;
  }

  /// Client workspace capabilities specific to folding ranges
  ///
  /// @proposed
  export interface FoldingRangeWorkspaceClientCapabilities {
    /// Whether the client implementation supports a refresh request sent from the
    /// server to the client.
    ///
    /// Note that this event is global and will force the client to refresh all
    /// folding ranges currently shown. It should be used with absolute care and is
    /// useful for situation where a server for example detects a project wide
    /// change that requires such a calculation.
    ///
    /// @proposed
    refreshSupport?: boolean;
  }



  export interface FoldingRangeOptions
    extends
      WorkDoneProgressOptions {
  }

  export interface FoldingRangeRegistrationOptions
    extends
      TextDocumentRegistrationOptions,
      FoldingRangeOptions,
      StaticRegistrationOptions {
  }

  /// Parameters for a {@link FoldingRangeRequest}.
  export interface FoldingRangeParams
    extends
      WorkDoneProgressParams,
      PartialResultParams {

    /// The text document.
    textDocument: TextDocumentIdentifier;
  }

  /// A request to provide folding ranges in a document. The request's
  /// parameter is of type {@link FoldingRangeParams}, the
  /// response is of type {@link FoldingRangeList} or a Thenable
  /// that resolves to such.
  export namespace FoldingRangeRequest {
    export const method: 'textDocument/foldingRange' = 'textDocument/foldingRange';
    export const messageDirection: MessageDirection = MessageDirection.clientToServer;
    export const type = new ProtocolRequestType<FoldingRangeParams, FoldingRange[] | null, FoldingRange[], void, FoldingRangeRegistrationOptions>(method);
    export type HandlerSignature = RequestHandler<FoldingRangeParams, FoldingRange[] | null, void>;
  }

  /// @proposed
  export namespace FoldingRangeRefreshRequest {
    export const method: `workspace/foldingRange/refresh` = `workspace/foldingRange/refresh`;
    export const messageDirection: MessageDirection = MessageDirection.serverToClient;
    export const type = new ProtocolRequestType0<void, void, void, void>(method);
    export type HandlerSignature = RequestHandler0<void, void>;
  }
*)