(* see: https://github.com/microsoft/language-server-protocol/issues/300



  /// Represents a color in RGBA space.
  export interface Color {
    /// The red component of this color in the range [0-1].
    readonly red: decimal;

    /// The green component of this color in the range [0-1].
    readonly green: decimal;

    /// The blue component of this color in the range [0-1].
    readonly blue: decimal;

    /// The alpha component of this color in the range [0-1].
    readonly alpha: decimal;
  }


  /// Represents a color range from a document.
  export interface ColorInformation {
    /// The range in the document where this color appears.
    range: Range;

    /// The actual color value for this color range.
    color: Color;
  }

  export interface ColorPresentation {
    /// The label of this color presentation. It will be shown on the color
    /// picker header. By default this is also the text that is inserted when selecting
    /// this color presentation.
    label: string;

    /// An {@link TextEdit edit} which is applied to a document when selecting
    /// this presentation for the color.  When `falsy` the {@link ColorPresentation.label label}
    /// is used.
    textEdit?: TextEdit;

    /// An optional array of additional {@link TextEdit text edits} that are applied when
    /// selecting this color presentation. Edits must not overlap with the main {@link ColorPresentation.textEdit edit} nor with themselves.
    additionalTextEdits?: TextEdit[];
  }


  export interface DocumentColorClientCapabilities {
    /// Whether implementation supports dynamic registration. If this is set to `true`
    /// the client supports the new `DocumentColorRegistrationOptions` return value
    /// for the corresponding server capability as well.
    dynamicRegistration?: boolean;
  }





  export interface DocumentColorOptions
    extends
      WorkDoneProgressOptions {
  }

  export interface DocumentColorRegistrationOptions
    extends
      TextDocumentRegistrationOptions,
      StaticRegistrationOptions,
      DocumentColorOptions {
  }

  /// Parameters for a {@link DocumentColorRequest}.
  export interface DocumentColorParams
    extends
      WorkDoneProgressParams,
      PartialResultParams {

    /// The text document.
    textDocument: TextDocumentIdentifier;
  }

  /// A request to list all color symbols found in a given text document. The request's
  /// parameter is of type {@link DocumentColorParams} the
  /// response is of type {@link ColorInformation ColorInformation[]} or a Thenable
  /// that resolves to such.
  export namespace DocumentColorRequest {
    export const method: 'textDocument/documentColor' = 'textDocument/documentColor';
    export const messageDirection: MessageDirection = MessageDirection.clientToServer;
    export const type = new ProtocolRequestType<DocumentColorParams, ColorInformation[], ColorInformation[], void, DocumentColorRegistrationOptions>(method);
    export type HandlerSignature = RequestHandler<DocumentColorParams, ColorInformation[], void>;
  }



  /// Parameters for a {@link ColorPresentationRequest}.
  export interface ColorPresentationParams
    extends
      WorkDoneProgressParams,
      PartialResultParams {

    /// The text document.
    textDocument: TextDocumentIdentifier;

    /// The color to request presentations for.
    color: Color;

    /// The range where the color would be inserted. Serves as a context.
    range: Range;
  }

  /// A request to list all presentation for a color. The request's
  /// parameter is of type {@link ColorPresentationParams} the
  /// response is of type {@link ColorInformation ColorInformation[]} or a Thenable
  /// that resolves to such.
  export namespace ColorPresentationRequest {
    export const method: 'textDocument/colorPresentation' = 'textDocument/colorPresentation';
    export const messageDirection: MessageDirection = MessageDirection.clientToServer;
    export const type = new ProtocolRequestType<ColorPresentationParams, ColorPresentation[], ColorPresentation[], void, WorkDoneProgressOptions & TextDocumentRegistrationOptions>(method);
    export type HandlerSignature = RequestHandler<ColorPresentationParams, ColorPresentation[], void>;
  }
*)