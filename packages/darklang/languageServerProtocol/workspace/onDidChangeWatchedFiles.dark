(*
  /// The file event type
  export namespace FileChangeType {
    export const Created = 1;
    export const Changed = 2;
    export const Deleted = 3;
  }
  export type FileChangeType = 1 | 2 | 3;


  /// An event describing a file change.
  export interface FileEvent {
    /// The file's uri.
    uri: DocumentUri;

    /// The change type.
    type: FileChangeType;
  }

  /// The watched files change notification's parameters.
  export interface DidChangeWatchedFilesParams {
    /// The actual file events.
    changes: FileEvent[];
  }





  /// The glob pattern to watch relative to the base path. Glob patterns can have the following syntax:
  /// - `*` to match one or more characters in a path segment
  /// - `?` to match on one character in a path segment
  /// - `**` to match any number of path segments, including none
  /// - `{}` to group conditions (e.g. `**​/*.{ts,js}` matches all TypeScript and JavaScript files)
  /// - `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)
  /// - `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)
  export type Pattern = string;

  /// A relative pattern is a helper to construct glob patterns that are matched
  /// relatively to a base URI. The common value for a `baseUri` is a workspace
  /// folder root, but it can be another absolute URI as well.
  export interface RelativePattern {
    /// A workspace folder or a base URI to which this pattern will be matched
    /// against relatively.
    baseUri: WorkspaceFolder | URI;

    /// The actual glob pattern;
    pattern: Pattern;
  }

  /// The glob pattern. Either a string pattern or a relative pattern.
  export type GlobPattern = Pattern | RelativePattern;

  export namespace WatchKind {
    export const Create: 1 = 1;
    export const Change: 2 = 2;
    export const Delete: 4 = 4;
  }
  export type WatchKind = uinteger;

  export interface FileSystemWatcher {
    /// The glob pattern to watch. See {@link GlobPattern glob pattern} for more detail.
    globPattern: GlobPattern;

    /// The kind of events of interest. If omitted it defaults
    /// to `WatchKind.Create | WatchKind.Change | WatchKind.Delete`
    /// which is 7.
    kind?: WatchKind;
  }

  /// Describe options to be used when registered for text document change events.
  export interface DidChangeWatchedFilesRegistrationOptions {
    /// The watchers to register.
    watchers: FileSystemWatcher[];
  }



  /// The watched files notification is sent from the client to the server when
  /// the client detects changes to file watched by the language client.
  export namespace DidChangeWatchedFilesNotification {
    export const method: 'workspace/didChangeWatchedFiles' = 'workspace/didChangeWatchedFiles';
    export const messageDirection: MessageDirection = MessageDirection.clientToServer;
    export const type = new ProtocolNotificationType<DidChangeWatchedFilesParams, DidChangeWatchedFilesRegistrationOptions>(method);
  }


  export interface DidChangeWatchedFilesClientCapabilities {
    /// Did change watched files notification supports dynamic registration. Please note
    /// that the current protocol doesn't support static configuration for file changes
    /// from the server side.
    dynamicRegistration?: boolean;

    /// Whether the client has support for {@link  RelativePattern relative pattern}
    /// or not.
    relativePatternSupport?: boolean;
  }
*)