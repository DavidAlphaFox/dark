// Supports workspace-wide configuration for a specific LSP server

(*
  export interface ConfigurationItem {
    /// The scope to get the configuration section for.
    scopeUri?: URI;

    /// The configuration section asked for.
    section?: string;
  }

  /// The parameters of a configuration request.
  export interface ConfigurationParams {
    items: ConfigurationItem[];
  }

  /// The 'workspace/configuration' request is sent from the server to the client to fetch a certain
  /// configuration setting.
  ///
  /// This pull model replaces the old push model were the client signaled configuration change via an
  /// event. If the server still needs to react to configuration changes (since the server caches the
  /// result of `workspace/configuration` requests) the server should register for an empty configuration
  /// change event and empty the cache if such an event is received.
  export namespace ConfigurationRequest {
    export const method: 'workspace/configuration' = 'workspace/configuration';
    export const messageDirection: MessageDirection = MessageDirection.serverToClient;
    export const type = new ProtocolRequestType<ConfigurationParams, LSPAny[], never, void, void>(method);
    export type HandlerSignature = RequestHandler<ConfigurationParams, LSPAny[], void>;
    export type MiddlewareSignature = (params: ConfigurationParams, token: CancellationToken, next: HandlerSignature) => HandlerResult<LSPAny[], void>;
  }




  //---- Configuration notification ----

  export interface DidChangeConfigurationClientCapabilities {
    /// Did change configuration notification supports dynamic registration.
    dynamicRegistration?: boolean;
  }

  /// The configuration change notification is sent from the client to the server
  /// when the client's configuration has changed. The notification contains
  /// the changed configuration as defined by the language client.
  export namespace DidChangeConfigurationNotification {
    export const method: 'workspace/didChangeConfiguration' = 'workspace/didChangeConfiguration';
    export const messageDirection: MessageDirection = MessageDirection.clientToServer;
    export const type = new ProtocolNotificationType<DidChangeConfigurationParams, DidChangeConfigurationRegistrationOptions>(method);
  }

  export interface DidChangeConfigurationRegistrationOptions {
    section?: string | string[];
  }

  /// The parameters of a change configuration notification.
  export interface DidChangeConfigurationParams {
    /// The actual changed settings
    settings: LSPAny;
  }
*)