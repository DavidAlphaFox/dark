// Server->Client request to edit something in the workspace.
//
// currently supports file renames, whole-file deletions, and whole-file creations

(*
  /// @proposed
  export interface ChangeAnnotationsSupportOptions {
    /// Whether the client groups edits with equal labels into tree nodes,
    /// for instance all edits labelled with "Changes in Strings" would
    /// be a tree node.
    groupsOnLabel?: boolean;
  }

  /// The kind of resource operations supported by the client.
  export type ResourceOperationKind = 'create' | 'rename' | 'delete';

  export namespace ResourceOperationKind {
    /// Supports creating new files and folders.
    export const Create: ResourceOperationKind = 'create';

    /// Supports renaming existing files and folders.
    export const Rename: ResourceOperationKind = 'rename';

    /// Supports deleting existing files and folders.
    export const Delete: ResourceOperationKind = 'delete';
  }

  export interface WorkspaceEditClientCapabilities {
    /// The client supports versioned document changes in `WorkspaceEdit`s
    documentChanges?: boolean;

    /// The resource operations the client supports. Clients should at least
    /// support 'create', 'rename' and 'delete' files and folders.
    resourceOperations?: ResourceOperationKind[];

    /// The failure handling strategy of a client if applying the workspace edit
    /// fails.
    failureHandling?: FailureHandlingKind;

    /// Whether the client normalizes line endings to the client specific setting.
    /// If set to `true` the client will normalize line ending characters
    /// in a workspace edit to the client-specified new line
    /// character.
    normalizesLineEndings?: boolean;

    /// Whether the client in general supports change annotations on text edits,
    /// create file, rename file and delete file changes.
    changeAnnotationSupport?: ChangeAnnotationsSupportOptions;
  }

  /// The parameters passed via an apply workspace edit request.
  export interface ApplyWorkspaceEditParams {
    /// An optional label of the workspace edit. This label is
    /// presented in the user interface for example on an undo
    /// stack to undo the workspace edit.
    label?: string;

    /// The edits to apply.
    edit: WorkspaceEdit;
  }

  /// The result returned from the apply workspace edit request.
  export interface ApplyWorkspaceEditResult {
    /// Indicates whether the edit was applied or not.
    applied: boolean;

    /// An optional textual description for why the edit was not applied.
    /// This may be used by the server for diagnostic logging or to provide
    /// a suitable error for a request that triggered the edit.
    failureReason?: string;

    /// Depending on the client's failure handling strategy `failedChange` might
    /// contain the index of the change that failed. This property is only available
    /// if the client signals a `failureHandlingStrategy` in its client capabilities.
    failedChange?: uinteger;
  }

  /// A request sent from the server to the client to modified certain resources.
  export namespace ApplyWorkspaceEditRequest {
    export const method: 'workspace/applyEdit' = 'workspace/applyEdit';
    export const messageDirection: MessageDirection = MessageDirection.serverToClient;
    export const type = new ProtocolRequestType<ApplyWorkspaceEditParams, ApplyWorkspaceEditResult, never, void, void>('workspace/applyEdit');
    export type HandlerSignature = RequestHandler<ApplyWorkspaceEditParams, ApplyWorkspaceEditResult, void>;
  }



  export namespace FailureHandlingKind {
    /// Applying the workspace change is simply aborted if one of the changes provided
    /// fails. All operations executed before the failing operation stay executed.
    export const Abort: FailureHandlingKind = 'abort';

    /// All operations are executed transactional. That means they either all
    /// succeed or no changes at all are applied to the workspace.
    export const Transactional: FailureHandlingKind = 'transactional';

    /// If the workspace edit contains only textual file changes they are executed transactional.
    /// If resource changes (create, rename or delete file) are part of the change the failure
    /// handling strategy is abort.
    export const TextOnlyTransactional: FailureHandlingKind = 'textOnlyTransactional';

    /// The client tries to undo the operations already executed. But there is no
    /// guarantee that this is succeeding.
    export const Undo: FailureHandlingKind = 'undo';
  }
  export type FailureHandlingKind = 'abort' | 'transactional' | 'undo' | 'textOnlyTransactional';
*)