// Provides the ability for the client to request a "command" to be executed on the server.

(*
  /// The client capabilities of a {@link ExecuteCommandRequest}.
  export interface ExecuteCommandClientCapabilities {
    /// Execute command supports dynamic registration.
    dynamicRegistration?: boolean;
  }

  /// The parameters of a {@link ExecuteCommandRequest}.
  export interface ExecuteCommandParams
    extends
      WorkDoneProgressParams {

    /// The identifier of the actual command handler.
    command: string;

    /// Arguments that the command should be invoked with.
    arguments?: LSPAny[];
  }

  /// The server capabilities of a {@link ExecuteCommandRequest}.
  export interface ExecuteCommandOptions
    extends
      WorkDoneProgressOptions {

    /// The commands to be executed on the server
    commands: string[];
  }

  /// Registration options for a {@link ExecuteCommandRequest}.
  export interface ExecuteCommandRegistrationOptions
    extends
      ExecuteCommandOptions {

  }

  /// A request send from the client to the server to execute a command. The request might return
  /// a workspace edit which the client will apply to the workspace.
  export namespace ExecuteCommandRequest {
    export const method: 'workspace/executeCommand' = 'workspace/executeCommand';
    export const messageDirection: MessageDirection = MessageDirection.clientToServer;
    export const type = new ProtocolRequestType<ExecuteCommandParams, LSPAny | null, never, void, ExecuteCommandRegistrationOptions>(method);
  }
*)