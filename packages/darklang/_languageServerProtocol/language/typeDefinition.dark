// supports "go to type definition"

(*
  export interface TypeDefinitionClientCapabilities {
    * Whether implementation supports dynamic registration. If this is set to `true`
    * the client supports the new `TypeDefinitionRegistrationOptions` return value
    * for the corresponding server capability as well.
    dynamicRegistration?: boolean;

    * The client supports additional metadata in the form of definition links.
    linkSupport?: boolean;
  }

  export interface TypeDefinitionOptions
    extends
      WorkDoneProgressOptions {
  }

  export interface TypeDefinitionRegistrationOptions
    extends
      TextDocumentRegistrationOptions,
      TypeDefinitionOptions,
      StaticRegistrationOptions {
  }

  export interface TypeDefinitionParams
    extends
      TextDocumentPositionParams,
      WorkDoneProgressParams,
      PartialResultParams {
  }

  * A request to resolve the type definition locations of a symbol at a given text
  * document position. The request's parameter is of type {@link TextDocumentPositionParams}
  * the response is of type {@link Definition} or a Thenable that resolves to such.
  export namespace TypeDefinitionRequest {
    export const method: 'textDocument/typeDefinition' = 'textDocument/typeDefinition';
    export const messageDirection: MessageDirection = MessageDirection.clientToServer;
    export const type = new ProtocolRequestType<TypeDefinitionParams, Definition | DefinitionLink[] | null, Location[] | DefinitionLink[], void, TypeDefinitionRegistrationOptions>(method);
    export type HandlerSignature = RequestHandler<TypeDefinitionParams, Definition | DefinitionLink[] | null, void>;
  }
*)