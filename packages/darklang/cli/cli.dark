module Darklang =
  module Cli =
    type Command =
      | Help
      | PackageViewer of PackageViewer.Command
      | RunFunction of flags: List<String> * fnName: String * args: List<String>
      | RunScript of String * List<String>
      | Invalid of List<String>


    let parseArguments (args: List<String>) : Command =
      // Extract "flags" value from last argument,
      // which is used like `--flags=wip-parser,local-pm`.
      //
      // TODO: support flags as non-last arguments
      // TODO: extract known flags out of this, into some structured data
      let flags, args = // List<String>, List<String>
        match Stdlib.List.last args with
        | Some last ->
          if Stdlib.String.startsWith "--flags=" last then
            let flagsValue = Stdlib.String.dropFirst last 7L
            let flags = Stdlib.String.split flagsValue ","

            (flags, Stdlib.List.dropLast args)
          else
            ([], args)

        // no args
        | None -> ([], [ "help" ])


      match args with
      | [ "help" ] -> Command.Help

      | "package" :: args ->
        match PackageViewer.parseCommand args with
        | Ok command -> Command.PackageViewer command
        | Error _ -> Command.Invalid [ "Invalid package command" ]

      | thingToRun :: args ->
        if Stdlib.String.startsWith thingToRun "@" then
          let fnName = thingToRun |> Stdlib.String.dropFirst_v0 1L
          Command.RunFunction(flags, fnName, args)
        else
          Command.RunScript(thingToRun, args)

      | _ -> Command.Invalid [ "Invalid arguments" ]



    let runFunction
      (flags: List<String>)
      (fnName: String)
      (args: List<String>)
      : Int64 =
      if Stdlib.List.member_v0 flags "wip-parser" then
        let nameResolver = Darklang.LanguageTools.NameResolver.empty ()

        let args =
          args
          |> Stdlib.List.map (fun arg ->
            arg
            |> Darklang.LanguageTools.Parser.parseToSimplifiedTree
            |> Darklang.LanguageTools.Parser.parseCliScript
            |> Builtin.unwrap
            |> fun parsedFile ->
                match parsedFile with
                | CliScript script -> script.exprsToEval)
          |> Stdlib.List.flatten
          |> Stdlib.List.map (fun arg ->
            LanguageTools.WrittenTypesToProgramTypes.Expr.toPT nameResolver arg)

        match Builtin.cliExecuteFunctionWithNewParser fnName args with
        | Ok result ->
          Builtin.printLine result
          0L

        | Error err ->
          Builtin.printLine err
          1L

      // Use old parser
      else
        match Builtin.cliExecuteFunction fnName args with
        | Ok result ->
          Builtin.printLine result
          0L

        | Error err ->
          Builtin.printLine err
          1L


    let runScript (scriptPath: String) (args: List<String>) : Int64 =
      match Builtin.fileRead scriptPath with
      | Ok script ->
        let scriptSourceCode = Stdlib.String.fromBytesWithReplacement script

        let result =
          Builtin.cliParseAndExecuteScript
            scriptPath
            scriptSourceCode
            (Dict { args = args })

        match result with
        | Ok exitCode -> exitCode
        | Error e ->
          Builtin.printLine (Darklang.LanguageTools.RuntimeErrors.Error.toString e)

          1L

      | Error e ->
        Builtin.printLine e
        1L


    let executeCommand (command: Command) : Int64 =
      match command with
      | Help ->
        Builtin.printLine
          """Usage:
darklang help                                     Show this help message and exit

darklang [function name]                          Run a function in the package manager
  i.e. `darklang @Darklang.Stdlib.Bool.and true false`

darklang package                                  Explore the contents of the package manager

darklang [script path]                            Run a .dark script
  i.e. `darklang ./my-script.dark`
"""

        0L

      | PackageViewer command -> PackageViewer.executeCommand command

      | RunScript(scriptPath, args) -> runScript scriptPath args

      | RunFunction(flags, fnName, args) -> runFunction flags fnName args

      | Invalid args ->
        let args = args |> Stdlib.String.join " "

        Builtin.printLine
          $"Invalid command {args}. Use `darklang help` for more information."

        1L



    let processNormally (args: List<String>) : Int64 =
      args |> Darklang.Cli.parseArguments |> Darklang.Cli.executeCommand

    let executeCliCommand (args: List<String>) : Int64 =
      if Stdlib.List.member_v0 args "--skip-self-update" then
        let newArgs =
          args |> Stdlib.List.filter (fun arg -> arg != "--skip-self-update")

        processNormally newArgs
      else
        Darklang.Cli.SelfUpdate.ensureDarklangSetup ()
        processNormally args