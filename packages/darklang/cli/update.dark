module Darklang =
  module Cli =
    type NavDirection =
      | Up
      | Down

    // Helper function to add a command to history
    let addToHistory (state: State) (command: String): State =
      let trimmedCommand = Stdlib.String.trim command
      if Stdlib.String.isEmpty trimmedCommand then
        state
      else
        // Don't add duplicate commands if the last command is the same
        let newHistory =
          match state.commandHistory with
          | lastCmd :: _ when lastCmd == trimmedCommand -> state.commandHistory
          | _ -> Stdlib.List.push state.commandHistory trimmedCommand

        // TODO: should we limit history size?
        { state with
            commandHistory = newHistory
            historyPosition = -1L
            draftPrompt = "" }

    // Navigate command history
    let navigateHistory (state: State) (direction: NavDirection): State =
      match state.commandHistory with
      | [] -> state // No history available
      | _ ->
        let historyLength = (Stdlib.List.length state.commandHistory)

        let newPosition =
          match direction with
          | Up ->
            if state.historyPosition == -1L then
              0L // First time: go to most recent
            else
              // Navigate further back in history
              Stdlib.Int64.min (state.historyPosition + 1L) (historyLength - 1L)
          | Down ->
            if state.historyPosition <= 0L then
              -1L // Back to typing mode
            else
              // Navigate forward in history
              state.historyPosition - 1L
          | _ -> state.historyPosition

        // Typing Mode: mainPrompt shows your typing, draftPrompt is empty
        // History Mode: mainPrompt shows history commands, draftPrompt preserves what you were typing
        let newPrompt, newdraftPrompt =
          match newPosition with
          | -1L ->
            // Restore draft prompt
            (state.draftPrompt, "")
          | pos ->
            // Get command from history
            let historyCommand =
              state.commandHistory
              |> Stdlib.List.getAt pos
              |> Stdlib.Option.withDefault ""

            let draftToSave =
              if state.historyPosition == -1L then
                // First time: save what user was typing
                state.mainPrompt
              else
                // Already navigating: keep previous draft
                state.draftPrompt

            (historyCommand, draftToSave)

        { state with
            mainPrompt = newPrompt
            historyPosition = newPosition
            draftPrompt = newdraftPrompt }

    let update (state: State) (msg: Msg): (State * List<Msg>) =
      match msg with
      | Quit ->
        // Set the isExiting flag to true
        // This will be checked in the REPL loop
        // In NonInteractive mode, don't show "Exiting..." message
        let newState = { state with isExiting = true; needsFullRedraw = true }
        match state.interactionMode with
        | NonInteractive -> (newState, [])
        | _ -> (newState, [Msg.SetCommandResult(CommandResult.Success "Exiting...")])

      | NavigateHistoryUp ->
        let newState = navigateHistory state NavDirection.Up
        (newState, [])

      | NavigateHistoryDown ->
        let newState = navigateHistory state NavDirection.Down
        (newState, [])

      | KeyPressed(key, modifiers, keyChar) ->
        // Handle key presses
        match key with
        | Escape ->
          // Escape key pressed, send Quit message
          (state, [Msg.Quit])

        | Enter ->
          // Enter key pressed, submit the current prompt as a command, and add it to history
          let command = state.mainPrompt
          let newState =
            { state with mainPrompt = "" }
            |> addToHistory command
          Builtin.printLine ""
          (newState, [Msg.SubmitCommand command])

        | Backspace ->
          // Backspace key pressed, remove the last character from the prompt
          // Also reset history navigation when user starts typing
          let newPrompt = Stdlib.String.dropLast state.mainPrompt 1L
          let newState =
            { state with
                mainPrompt = newPrompt
                historyPosition = -1L
                draftPrompt = "" }
          (newState, [])

        | UpArrow ->
          // Arrow up pressed, navigate to previous command in history
          (state, [Msg.NavigateHistoryUp])

        | DownArrow ->
          // Arrow down pressed, navigate to next command in history
          (state, [Msg.NavigateHistoryDown])

        | _ ->
          // For other keys, check if they're textual and add to the prompt if so
          // Also reset history navigation when user starts typing
          let newPrompt = state.mainPrompt ++ keyChar
          let newState =
            { state with
                mainPrompt = newPrompt
                historyPosition = -1L
                draftPrompt = "" }
          (newState, [])

      | SubmitCommand commandStr ->
        // Process the submitted command

        if Stdlib.String.isEmpty (Stdlib.String.trim commandStr) then
          // Empty command, do nothing
          (state, [])
        else
          // Parse the command into name and arguments
          let (name, args) = Command.parseCommand commandStr

          // Find and execute the command
          match Command.findCommand state (Stdlib.String.toLowercase name) with
          | Some cmd ->
            let exeFn = cmd.execute
            let (newState, messages) = exeFn state args
            // Set needsFullRedraw to true after command execution
            let stateWithRedraw = { newState with needsFullRedraw = true }
            (stateWithRedraw, messages)
          | None ->
            // Unknown command
            let errorMsg = $"Unknown command: {name}"
            let newState =  { state with commandResult = CommandResult.Error errorMsg; needsFullRedraw = true }
            (newState, [])

      | ClearPrompt ->
        // Clear the prompt and reset history navigation
        let newState =
          { state with
              mainPrompt = ""
              historyPosition = -1L
              draftPrompt = "" }
        (newState, [])

      | NavigateTo page ->
        // Use the navigateTo function from navigation.dark
        let newState = navigateTo state page
        // Set needsFullRedraw to true after navigation
        let stateWithRedraw = { newState with needsFullRedraw = true }
        (stateWithRedraw, [])

      | NavigateBack ->
        // Use the navigateBack function from navigation.dark
        let newState = navigateBack state
        // Set needsFullRedraw to true after navigation
        let stateWithRedraw = { newState with needsFullRedraw = true }
        (stateWithRedraw, [])

      | SetCommandResult result ->
        // Set the command result
        let newState =
          { state with
              commandResult = result
              needsFullRedraw = true }
        (newState, [])
