module Darklang =
  module Cli =
    module IntegrationTests =
      module FailureRecorder =
        type RecordingResult =
          | Success of gifPath: String
          | SkippedNoVhs
          | Failed of error: String

        let cleanupPreviousFailures () : Unit =
          let gifsDir = TestConfig.getFailureGifsDir ()
          let tapesDir = TestConfig.getTapesDir ()

          // Remove all GIF and tape files from previous runs
          let cleanGifs = Builtin.cliExecute $"rm -f \"{gifsDir}\"/*.gif"
          let cleanTapes = Builtin.cliExecute $"rm -f \"{tapesDir}\"/*.tape"

          if cleanGifs.exitCode == 0L && cleanTapes.exitCode == 0L then
            ()
          else
            Builtin.printLine "‚ö†Ô∏è  Warning: Could not fully clean previous recordings"


        let recordFailure (testName: String) (command: String) (interactiveSteps: List<String>) : RecordingResult =
          if Stdlib.Bool.not (VhsRecorder.checkVhsAvailable ()) then
            Builtin.printLine "‚ö†Ô∏è  VHS not found - skipping failure recording"
            Builtin.printLine "Run ./scripts/setup-vhs.sh to install VHS"
            RecordingResult.SkippedNoVhs
          else
            match VhsRecorder.createDirectories () with
            | Error e -> RecordingResult.Failed e
            | Ok _ ->
              let timestamp = VhsRecorder.generateTimestamp ()
              let safeTestName = TestUtils.safeFileName testName

              let tapeFile =
                $"{TestConfig.getTapesDir ()}/failure-{safeTestName}-{timestamp}.tape"

              let gifName = $"{safeTestName}-failure-{timestamp}.gif"
              let gifPath = $"{TestConfig.getFailureGifsDir ()}/{gifName}"

              match VhsRecorder.generateTapeFile testName command interactiveSteps tapeFile gifPath with
              | Error e -> RecordingResult.Failed $"Failed to create tape file: {e}"
              | Ok _ ->
                Builtin.printLine $"üé¨ Recording failure GIF for {testName}..."

                match VhsRecorder.runVhsRecording tapeFile with
                | Ok _ ->
                  TestUtils.deleteFile tapeFile
                  Builtin.printLine $"‚úì Failure GIF generated at: {gifPath}"
                  Builtin.printLine "---"
                  RecordingResult.Success gifPath
                | Error e ->
                  Builtin.printLine "‚úó Failed to generate VHS recording"
                  RecordingResult.Failed $"VHS recording failed: {e}"


        let recordFailureForTest (testName: String) (command: String) (interactiveSteps: List<String>) : Bool =
          match recordFailure testName command interactiveSteps with
          | Success _ -> true
          | SkippedNoVhs -> true
          | Failed _ -> false
