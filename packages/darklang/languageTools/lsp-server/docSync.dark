module Darklang =
  module LanguageTools =
    module LspServer =
      module DocSync =
        let hardcodedServerCapabilities
          ()
          : LanguageServerProtocol.Lifecycle.InitializeRequest.TextDocumentSyncServerCapabilities.TextDocumentSyncServerCapabilities =
          LanguageServerProtocol
            .Lifecycle
            .InitializeRequest
            .TextDocumentSyncServerCapabilities
            .TextDocumentSyncServerCapabilities
            .TextDocumentSyncOptions(
              LanguageServerProtocol.DocumentSync.TextDocument.TextDocumentSyncOptions.TextDocumentSyncOptions
                { openClose = Stdlib.Option.Option.Some true
                  change =
                    Stdlib.Option.Option.Some
                      LanguageServerProtocol.DocumentSync.TextDocument.TextDocumentSyncKind.TextDocumentSyncKind.Full
                  save =
                    Stdlib.Option.Option.Some(
                      LanguageServerProtocol
                        .DocumentSync
                        .TextDocument
                        .TextDocumentSyncOptions
                        .SaveOptionsOrBool
                        .SaveOptionsOrBool
                        .SaveOptions(
                          LanguageServerProtocol.DocumentSync.TextDocument.SaveOptions.SaveOptions
                            { includeText = Stdlib.Option.Option.Some true }
                        )
                    ) }
            )

        // -- message-handling

        let handleTextDocumentDidOpen
          (state: LspState)
          (request:
            LanguageServerProtocol.DocumentSync.TextDocument.DidOpenTextDocumentNotification.DidOpenTextDocumentParams.DidOpenTextDocumentParams)
          : LspState =
          let parsed =
            request.textDocument.text
            |> Parser.parseToSimplifiedTree
            |> Parser.parseFromTree

          { state with
              documentsInScope =
                Stdlib.Dict.set
                  state.documentsInScope
                  request.textDocument.uri
                  (LanguageTools.LspServer.DocumentInScope
                    { uri = request.textDocument.uri
                      text = request.textDocument.text
                      parsed = parsed }) }


        let handleTextDocumentDidSave
          (state: LspState)
          (request:
            LanguageServerProtocol.DocumentSync.TextDocument.DidSaveTextDocumentNotification.DidSaveTextDocumentParams.DidSaveTextDocumentParams)
          : LspState =
          match request.text with
          | None ->
            log
              "WARNING: no text in didSave, even though we configured to include text in these requests, in the `initialize` handshake"

            state

          | Some text ->
            let parsed = text |> Parser.parseToSimplifiedTree |> Parser.parseFromTree

            match parsed with
            | Ok parsedFile ->
              match parsedFile with
              | SourceFile parsed when parsed.unparseableStuff != [] ->
                let diagnostics =
                  parsed.unparseableStuff
                  |> Stdlib.List.map (fun unparseable ->
                    createErrorDiagnostic
                      unparseable.source.range
                      "Couldn't parse this part of the file")

                sendDiagnostic request.textDocument.uri diagnostics

              | _ -> sendDiagnostic request.textDocument.uri []
            | _ -> log "Couldn't parse the file"
            // TODO


            { state with
                documentsInScope =
                  Stdlib.Dict.set
                    state.documentsInScope
                    request.textDocument.uri
                    (LanguageTools.LspServer.DocumentInScope
                      { uri = request.textDocument.uri
                        text = text
                        parsed = parsed }) }


        let handleTextDocumentDidClose
          (state: LspState)
          (requestParams:
            LanguageServerProtocol.DocumentSync.TextDocument.DidCloseTextDocumentNotification.DidCloseTextDocumentParams.DidCloseTextDocumentParams)
          : LspState =
          { state with
              documentsInScope =
                Stdlib.Dict.remove
                  state.documentsInScope
                  requestParams.textDocument.uri }