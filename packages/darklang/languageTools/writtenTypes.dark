module Darklang =
  module LanguageTools =
    module WrittenTypes =
      // <aliases>
      type SourceRange = Parser.Range
      // <aliases>

      // Identifiers

      type ModuleIdentifier = { range: SourceRange; name: String }

      type TypeIdentifier = { range: SourceRange; name: String }

      type QualifiedTypeIdentifier =
        {
          range: SourceRange
          /// the SourceRange corresponds to the `.` after the module name
          modules: List<ModuleIdentifier * SourceRange>
          typ: TypeIdentifier
        }

      type VariableIdentifier = { range: SourceRange; name: String }

      type FnIdentifier = { range: SourceRange; name: String }

      type QualifiedFnIdentifier =
        {
          range: SourceRange
          /// the sourceRange corresponds to the `.` after the module name
          modules: List<ModuleIdentifier * SourceRange>
          fn: FnIdentifier
        }


      // Types
      module TypeReference =
        type Builtin =
          | TUnit of SourceRange
          | TBool of SourceRange
          | TInt8 of SourceRange
          | TUInt8 of SourceRange
          | TInt16 of SourceRange
          | TUInt16 of SourceRange
          | TInt32 of SourceRange
          | TUInt32 of SourceRange
          | TInt64 of SourceRange
          | TUInt64 of SourceRange
          | TInt128 of SourceRange
          | TUInt128 of SourceRange
          | TFloat of SourceRange
          | TChar of SourceRange
          | TString of SourceRange
          | TDateTime of SourceRange
          | TUuid of SourceRange


        type TypeReference =
          | Builtin of Builtin
          | QualifiedName of QualifiedTypeIdentifier



      module TypeDeclaration =
        type Definition = Alias of TypeReference.TypeReference

        type TypeDeclaration =
          { range: SourceRange
            name: TypeIdentifier
            definition: Definition
            keywordType: SourceRange
            symbolEquals: SourceRange }


      // Expressions
      type LetPattern = LPVariable of SourceRange * name: String

      type InfixOperator =
        | ArithmeticPlus
        | ArithmeticMinus

      type Expr =
        | EUnit of SourceRange
        | EBool of SourceRange * Bool
        | EInt8 of
          SourceRange *
          intPart: (SourceRange * Int8) *
          suffixPart: SourceRange
        | EUInt8 of
          SourceRange *
          intPart: (SourceRange * UInt8) *
          suffixPart: SourceRange
        | EInt16 of
          SourceRange *
          intPart: (SourceRange * Int16) *
          suffixPart: SourceRange
        | EUInt16 of
          SourceRange *
          intPart: (SourceRange * UInt16) *
          suffixPart: SourceRange
        | EInt32 of
          SourceRange *
          intPart: (SourceRange * Int32) *
          suffixPart: SourceRange
        | EUInt32 of
          SourceRange *
          intPart: (SourceRange * UInt32) *
          suffixPart: SourceRange
        | EInt64 of
          SourceRange *
          intPart: (SourceRange * Int64) *
          /// for the L suffix
          suffixPart: SourceRange
        | EUInt64 of
          SourceRange *
          intPart: (SourceRange * UInt64) *
          suffixPart: SourceRange
        | EInt128 of
          SourceRange *
          intPart: (SourceRange * Int128) *
          suffixPart: SourceRange
        | EUInt128 of
          SourceRange *
          intPart: (SourceRange * UInt128) *
          suffixPart: SourceRange
        | EFloat of SourceRange * Sign * String * String
        | EString of
          SourceRange *
          contents: Stdlib.Option.Option<SourceRange * String> *
          symbolOpenQuote: SourceRange *
          symbolCloseQuote: SourceRange

        | ELet of
          SourceRange *
          LetPattern *
          expr: Expr *
          body: Expr *
          keywordLet: SourceRange *
          symbolEquals: SourceRange

        | EVariable of SourceRange * String

        | EInfix of
          SourceRange *
          op: (SourceRange * InfixOperator) *
          left: Expr *
          right: Expr

        // TODO: I accidentally got away from how we normally represent
        // Expressions - switch to this instead.
        // | EApply of SourceRange * lhs: Expr * args: List<Expr>
        // | EFnName of QualifiedFnIdentifier

        | EFnCall of
          SourceRange *
          fnName: QualifiedFnIdentifier *
          args: List<Expr> *
          symbolLeftParen: SourceRange *
          symbolRightParen: SourceRange



      // Fn declarations
      module FnDeclaration =
        type UnitParameter = { range: SourceRange }

        type NormalParameter =
          { range: SourceRange
            name: VariableIdentifier
            typ: TypeReference.TypeReference
            symbolLeftParen: SourceRange
            symbolColon: SourceRange
            symbolRightParen: SourceRange }

        type Parameter =
          | Unit of UnitParameter
          | Normal of NormalParameter


        type FnDeclaration =
          { range: SourceRange
            name: FnIdentifier
            parameters: List<Parameter>
            returnType: TypeReference.TypeReference
            body: Expr
            keywordLet: SourceRange
            symbolColon: SourceRange
            symbolEquals: SourceRange }


      // Cli scripts
      type CliScriptTypeOrFn =
        | Type of TypeDeclaration.TypeDeclaration
        | Function of FnDeclaration.FnDeclaration

      type Unparseable = { source: Parser.ParsedNode }

      type CliScript =
        { range: SourceRange
          typesAndFns: List<CliScriptTypeOrFn>
          unparseableStuff: List<Unparseable>
          exprsToEval: List<Expr> }


      type ParsedFile = CliScript of CliScript