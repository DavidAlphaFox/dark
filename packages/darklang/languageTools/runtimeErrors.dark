module Darklang =
  module LanguageTools =
    module RuntimeTypes =
      module RuntimeError =
        module TypeCheckers =
          type PathPart =
            | TuplePart of index: Int32
            | ListItem of index: Int32
            | DictEntry of key: String
            | RecordField of typeName: FQTypeName.FQTypeName * fieldName: String
            | EnumField of
              typeName: FQTypeName.FQTypeName *
              caseName: String *
              fieldIndex: Int32 *
              fieldName: Option<String> *
              fieldCount: Int32
            | FunctionCallParameter of
              fnName: FQFnName.FQFnName *
              paramName: String *
              paramIndex: Int32
            | FunctionCallResult of fnName: FQFnName.FQFnName

          type Path = List<PathPart>

          type Error =
            | ValueNotExpectedType of
              path: Path *
              expected: TypeReference *
              actual: Dval

        module Bools =
          type Error =
            | AndOnlySupportsBooleans of gotLeft: ValueType * gotRight: ValueType
            | OrOnlySupportsBooleans of gotLeft: ValueType * gotRight: ValueType
            | ConditionRequiresBool of actualValueType: ValueType * actualValue: Dval

        module Ints =
          type Error =
            | DivideByZeroError
            | OutOfRange
            | NegativeExponent
            | NegativeModulus // negative divisors are not allowed
            | ZeroModulus // a divisor of zero is not allowed

        module Strings =
          type Error =
            | NonStringInInterpolation of vt: ValueType * dv: Dval
            | InvalidStringAppend

        module Lists =
          type Error =
            | TriedToAddMismatchedData of
              expectedType: ValueType *
              actualType: ValueType *
              actualValue: Dval

        module Dicts =
          type Error =
            | TriedToAddKeyAfterAlreadyPresent of key: String
            | TriedToAddMismatchedData of
              expectedType: ValueType *
              actualType: ValueType *
              actualValue: Dval

        module Lets =
          type Error = PatternDoesNotMatch of dval: Dval * pat: LetPattern

        module Matches =
          type Error = | MatchUnmatched

        module Enums =
          type Error =
            | ConstructionWrongNumberOfFields of
              typeName: FQTypeName.FQTypeName *
              caseName: String *
              expectedFieldCount: Int64 *
              actualFieldCount: Int64
            | ConstructionCaseNotFound of
              typeName: FQTypeName.FQTypeName *
              caseName: String
            | ConstructionFieldOfWrongType of
              caseName: String *
              fieldIndex: Int64 *
              expectedType: ValueType *
              actualType: ValueType *
              actualValue: Dval

        module Records =
          type Error =
            // -- Creation --
            | CreationTypeNotRecord of name: FQTypeName.FQTypeName
            | CreationEmptyKey
            | CreationMissingField of fieldName: String
            | CreationDuplicateField of fieldName: String
            | CreationFieldNotExpected of fieldName: String
            | CreationFieldOfWrongType of
              fieldName: String *
              expectedType: ValueType *
              actualType: ValueType

            // -- Update --
            | UpdateNotRecord of actualType: ValueType
            | UpdateEmptyKey
            | UpdateDuplicateField of fieldName: String
            | UpdateFieldNotExpected of fieldName: String
            | UpdateFieldOfWrongType of
              fieldName: String *
              expectedType: ValueType *
              actualType: ValueType

            // -- Field Access --
            | FieldAccessEmptyFieldName
            | FieldAccessFieldNotFound of fieldName: String
            | FieldAccessNotRecord of actualType: ValueType

        module Applications =
          type Error =
            | ExpectedApplicableButNot of actualTyp: ValueType * actualValue: Dval

            | WrongNumberOfTypeArgsForFn of fn: FQFnName.FQFnName * expected: Int64 * actual: Int64
            | TooManyArgsForFn of fn: FQFnName.FQFnName * expected: Int64 * actual: Int64
            | FnParameterNotExpectedType of fnName : FQFnName.FQFnName * paramIndex: Int64 * paramName : string * expectedType : ValueType * actualType : ValueType * actualValue : Dval
            | FnResultNotExpectedType of fnName : FQFnName.FQFnName * expectedType : ValueType * actualType : ValueType * actualValue : Dval

            | TooManyArgsForLambda of lambdaExprId: id * expected: Int64 * actual: Int64


        module Unwraps =
          type Error =
            | GotNone
            | GotError of err: Dval
            | NonOptionOrResult of actual: Dval
            | MultipleArgs of args: List<Dval>

        module Jsons =
          type Error =
            | UnsupportedType of TypeReference
            | CannotSerializeTypeValueCombo of Dval * TypeReference

        module CLIs =
          type Error =
            | NoExpressionsToExecute
            | NonIntReturned of actuallyReturned: Dval

        type Error =
          | Bool of Bools.Error
          | Int of Ints.Error
          | String of Strings.Error
          | List of Lists.Error
          | Dict of Dicts.Error
          | Let of Lets.Error
          | VariableNotFound of attemptedVarName: String
          | EqualityCheckOnIncompatibleTypes of left: ValueType * right: ValueType
          | IfConditionNotBool of actualValue: Dval * actualValueType: ValueType
          | Match of Matches.Error
          | ParseTimeNameResolution of NameResolutionError
          | TypeNotFound of name: FQTypeName.FQTypeName
          | FnNotFound of name: FQFnName.FQFnName
          | ConstNotFound of name: FQConstantName.FQConstantName
          | WrongNumberOfTypeArgsForType of
            fn: FQTypeName.FQTypeName *
            expected: Int64 *
            actual: Int64
          | Record of Records.Error
          | Enum of Enums.Error
          | Unwrap of Unwraps.Error
          | Apply of Applications.Error
          | Json of Jsons.Error
          | CLI of CLIs.Error
          | TypeChecker of err: TypeCheckers.Error
          | UncaughtException of msg : String * metadata : List<String * Dval>