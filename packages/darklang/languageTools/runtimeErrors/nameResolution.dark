module Darklang =
  module LanguageTools =
    module RuntimeErrors =
      module NameResolution =
        type ErrorType =
          | NotFound
          | ExpectedEnumButNot
          | ExpectedRecordButNot
          | MissingEnumModuleName of caseName: String
          | InvalidPackageName

        type NameType =
          | Function
          | Type
          | Constant

        type Error =
          {
            errorType: ErrorType

            nameType: NameType

            /// The `.`-delimited name _parts_
            /// e.g. `PACKAGE.Darklang.Stdlib.List.fakeFunction` is `["List"; "fakeFunction"]`
            names: List<String>
          }

        let toSegments (e: Error) : ErrorOutput =
          match e.errorType with
          | NotFound ->
            let nameType =
              match e.nameType with
              | Function -> "function"
              | Type -> "type"
              | Constant -> "constant"

            ErrorOutput
              { summary =
                  [ ErrorSegment.ErrorSegment.String $"There is no {nameType} named "
                    ErrorSegment.ErrorSegment.InlineVarName(
                      PACKAGE.Darklang.Stdlib.String.join e.names "."
                    ) ]
                extraExplanation = []
                actual = []
                expected = [] }

          | MissingEnumModuleName caseName ->
            let suffix =
              if e.names == [] then
                [ ErrorSegment.ErrorSegment.String ": "
                  ErrorSegment.ErrorSegment.VarName caseName ]
              else
                [ ErrorSegment.ErrorSegment.String ": "
                  ErrorSegment.ErrorSegment.VarName(
                    PACKAGE.Darklang.Stdlib.String.join e.names "."
                  ) ]

            let summary =
              PACKAGE.Darklang.Stdlib.List.append
                [ ErrorSegment.ErrorSegment.String "Missing type name for enum case" ]
                suffix

            ErrorOutput
              { summary = summary
                extraExplanation = []
                actual =
                  if e.names == [] then
                    [ ErrorSegment.ErrorSegment.String "No Names" ]
                  else
                    [ Builtin.List.map e.names (fun name ->
                        ErrorSegment.ErrorSegment.String name) ]
                expected = [] }

          | InvalidPackageName ->
            let summary =
              [ ErrorSegment.ErrorSegment.String "Invalid package name "
                ErrorSegment.ErrorSegment.InlineVarName(
                  PACKAGE.Darklang.Stdlib.String.join e.names "."
                ) ]

            ErrorOutput
              { summary = summary
                extraExplanation = []
                actual = []
                expected = [] }

          | ExpectedRecordButNot ->
            let summary =
              [ ErrorSegment.ErrorSegment.String "Expected a record but "
                ErrorSegment.ErrorSegment.InlineVarName(
                  PACKAGE.Darklang.Stdlib.String.join e.names "."
                )
                ErrorSegment.ErrorSegment.String " is an enum" ]

            ErrorOutput
              { summary = summary
                extraExplanation = []
                actual = []
                expected = [] }

          | _ ->
            // RTETODO:
            // | ExpectedEnumButNot
            ErrorOutput
              { summary =
                  [ ErrorSegment.ErrorSegment.String
                      "RTETODO NameResolution.toSegments" ]
                extraExplanation = []
                actual = []
                expected = [] }