module Darklang =
  module LanguageTools =
    module RuntimeErrors =
      module Json =
        type Error = UnsupportedType of RuntimeTypes.TypeReference

        let toSegments (e: Error) : ErrorOutput =
          match e with
          | UnsupportedType typ ->
            let summary =
              [ ErrorSegment.ErrorSegment.String "Unsupported type in JSON: "
                ErrorSegment.ErrorSegment.TypeReference typ ]

            let extraExplanation =
              let parse =
                RuntimeTypes.FQFnName.FQFnName.Builtin(
                  RuntimeTypes.FQFnName.Builtin
                    { modules = [ "Json" ]
                      name = "parse"
                      version = 0L }
                )

              let serialize =
                RuntimeTypes.FQFnName.FQFnName.Builtin(
                  RuntimeTypes.FQFnName.Builtin
                    { modules = [ "Json" ]
                      name = "serialize"
                      version = 0L }
                )


              [ ErrorSegment.ErrorSegment.String
                  ". Some types are not supported in Json serialization, and cannot be used as arguments to "
                ErrorSegment.ErrorSegment.FunctionName parse
                ErrorSegment.ErrorSegment.String " or "
                ErrorSegment.ErrorSegment.FunctionName serialize ]

            ErrorOutput
              { summary = summary
                extraExplanation = extraExplanation
                actual = [ ErrorSegment.ErrorSegment.TypeReference typ ]
                expected =
                  [ ErrorSegment.ErrorSegment.String
                      "A supported type (Int64, String, etc)" ] }