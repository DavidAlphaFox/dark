module Darklang =
  module LanguageTools =
    module RuntimeErrors =
      module Execution =
        type Error =
          | Incomplete
          | MatchExprUnmatched of RuntimeTypes.Dval.Dval

        let toSegments (e: Error) : ErrorOutput =
          match e with
          | Incomplete ->
            ErrorOutput
              { summary = [ ErrorSegment.ErrorSegment.String "Incomplete" ]
                extraExplanation = []
                actual = []
                expected = [] }

          | MatchExprUnmatched(dv) ->
            let summary =
              [ ErrorSegment.ErrorSegment.String "No match for "
                ErrorSegment.ErrorSegment.InlineValue dv ]

            // TODO include patterns in error message
            let extraExplanation = []

            ErrorOutput
              { summary = summary
                extraExplanation = extraExplanation
                actual = []
                expected = [] }