module Darklang =
  module LanguageTools =
    module Parser =
      module PipeExpr =
        let parsePipeInfix
          (node: ParsedNode)
          : Stdlib.Result.Result<WrittenTypes.PipeExpr, WrittenTypes.Unparseable> =
          let operatorNode = findField node "operator"

          let operator =
            match operatorNode with
            | Ok op ->
              match getText op with
              | "+" ->
                WrittenTypes.Infix.InfixFnCall
                  WrittenTypes.InfixFnName.ArithmeticPlus
              | "-" ->
                WrittenTypes.Infix.InfixFnCall
                  WrittenTypes.InfixFnName.ArithmeticMinus
              | "*" ->
                WrittenTypes.Infix.InfixFnCall
                  WrittenTypes.InfixFnName.ArithmeticMultiply
              | "/" ->
                WrittenTypes.Infix.InfixFnCall
                  WrittenTypes.InfixFnName.ArithmeticDivide
              | "%" ->
                WrittenTypes.Infix.InfixFnCall
                  WrittenTypes.InfixFnName.ArithmeticModulo
              | "^" ->
                WrittenTypes.Infix.InfixFnCall
                  WrittenTypes.InfixFnName.ArithmeticPower
              | ">" ->
                WrittenTypes.Infix.InfixFnCall
                  WrittenTypes.InfixFnName.ComparisonGreaterThan
              | ">=" ->
                WrittenTypes.Infix.InfixFnCall
                  WrittenTypes.InfixFnName.ComparisonGreaterThanOrEqual
              | "<" ->
                WrittenTypes.Infix.InfixFnCall
                  WrittenTypes.InfixFnName.ComparisonLessThan
              | "<=" ->
                WrittenTypes.Infix.InfixFnCall
                  WrittenTypes.InfixFnName.ComparisonLessThanOrEqual
              | "==" ->
                WrittenTypes.Infix.InfixFnCall
                  WrittenTypes.InfixFnName.ComparisonEquals
              | "!=" ->
                WrittenTypes.Infix.InfixFnCall
                  WrittenTypes.InfixFnName.ComparisonNotEquals
              | "&&" ->
                WrittenTypes.Infix.BinOp WrittenTypes.BinaryOperation.BinOpAnd
              | "||" -> WrittenTypes.Infix.BinOp WrittenTypes.BinaryOperation.BinOpOr
              | "++" ->
                WrittenTypes.Infix.InfixFnCall WrittenTypes.InfixFnName.StringConcat
              | op -> createUnparseableError node

            | _ -> createUnparseableError node

          let rightArg = findAndParseRequired node "right" Expr.parse

          match rightArg, operatorNode with
          | Ok rightArg, Ok operatorNode ->
            (WrittenTypes.PipeExpr.EPipeInfix(
              node.range,
              (operatorNode.range, operator),
              rightArg
            ))
            |> Stdlib.Result.Result.Ok

          | _ -> createUnparseableError node

        let parsePipeLambda
          (node: ParsedNode)
          : Stdlib.Result.Result<WrittenTypes.PipeExpr, WrittenTypes.Unparseable> =
          if node.typ == "pipe_lambda" then
            let node = (findField node "pipe_lambda") |> Builtin.unwrap
            let keywordFun = findField node "keyword_fun"

            let patsNode =
              match findField node "pats" with
              | Ok paramsNode ->
                paramsNode.children
                |> Stdlib.List.map (fun pat -> Expr.parseLetPattern pat)
                |> Stdlib.Result.collect

              | _ -> createUnparseableError node

            let arrowNode = findField node "symbol_arrow"
            let bodyNode = findAndParseRequired node "body" Expr.parse

            match patsNode, bodyNode, keywordFun, arrowNode with
            | Ok pats, Ok body, Ok keywordFun, Ok arrowNode ->
              (WrittenTypes.PipeExpr.EPipeLambda(
                node.range,
                pats,
                body,
                keywordFun.range,
                arrowNode.range
              ))
              |> Stdlib.Result.Result.Ok

            | _ -> createUnparseableError node


        let parsePipeEnum
          (node: ParsedNode)
          : Stdlib.Result.Result<WrittenTypes.PipeExpr, WrittenTypes.Unparseable> =
          let typeNameNode = findField node "type_name"
          let symbolDotNode = findField node "symbol_dot"
          let caseNameNode = findField node "case_name"

          let enumFieldsNode =
            (findNodeByFieldName node "enum_fields")
            |> Stdlib.Option.map (fun enumFieldsNode ->
              enumFieldsNode.children
              |> Stdlib.List.map (fun fieldNode -> Expr.parse fieldNode)
              |> Stdlib.Result.collect)

            |> Stdlib.Option.withDefault (Stdlib.Result.Result.Ok [])

          match typeNameNode, symbolDotNode, caseNameNode, enumFieldsNode with
          | Ok typeNameNode, Ok symbolDotNode, Ok caseNameNode, Ok enumFieldsNode ->
            (WrittenTypes.PipeExpr.EPipeEnum(
              node.range,
              (typeNameNode.range, [ typeNameNode.text ]),
              (caseNameNode.range, caseNameNode.text),
              enumFieldsNode,
              symbolDotNode.range
            ))
            |> Stdlib.Result.Result.Ok

          | _ -> createUnparseableError node


        let parsePipeFnCall
          (node: ParsedNode)
          : Stdlib.Result.Result<WrittenTypes.PipeExpr, WrittenTypes.Unparseable> =
          match findField node "fn" with
          | Ok fnNameNode ->
            let args =
              node.children
              |> Stdlib.List.filter (fun c ->
                match c.fieldName with
                | Some fName -> fName == "args"
                | None -> false)
              |> Stdlib.List.map Expr.parse
              |> Stdlib.Result.collect

            let typeArgs = Identifiers.extractTypeArgs fnNameNode

            match typeArgs, args with
            | Ok typeArgs, Ok args ->
              let nameWithoutTyprArgs =
                fnNameNode.text |> (Stdlib.String.split "<") |> Stdlib.List.head

              let name =
                match nameWithoutTyprArgs with
                | Some name -> name |> Stdlib.String.split "."
                | None -> fnName.text |> Stdlib.String.split "."

              let fnName = WrittenTypes.Name.Unresolved(fnNameNode.range, name)

              (WrittenTypes.PipeExpr.EPipeFnCall(node.range, fnName, typeArgs, args))
              |> Stdlib.Result.Result.Ok

            | _ -> createUnparseableError fnNameNode

          | _ -> createUnparseableError node


        let parse
          (node: ParsedNode)
          : Stdlib.Result.Result<WrittenTypes.PipeExpr, WrittenTypes.Unparseable> =
          if node.typ == "pipe_expr" then
            match node.children with
            | [] -> createUnparseableError node
            | [ child ] ->
              match child.typ with
              | "pipe_infix" -> parsePipeInfix child
              | "pipe_lambda" -> parsePipeLambda child
              | "pipe_enum" -> parsePipeEnum child
              | "pipe_fn_call" -> parsePipeFnCall child
            | _ -> createUnparseableError node

          else
            Stdlib.Result.Result.Error $"Expected pipe_expr, got {node.typ}"