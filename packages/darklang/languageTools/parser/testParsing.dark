module Darklang =
  module LanguageTools =
    module Parser =
      module TestParsing =
        let initialParse (code: String) : WrittenTypes.ParsedFile =
          code
          |> LanguageTools.Parser.parseToSimplifiedTree
          |> LanguageTools.Parser.parseFromTree
          |> Builtin.unwrap

        // TODO: maybe use a proper type instead of string?
        let parsePTExpr
          (code: String)
          : Stdlib.Result.Result<ProgramTypes.Expr, String> =
          let sourceFile = code |> TestParsing.initialParse

          let exprs =
            match sourceFile with
            | SourceFile s -> s.exprsToEval
            | _ -> []

          let onMissing = LanguageTools.NameResolver.OnMissing.Allow
          let pm = LanguageTools.PackageManager.pm ()

          match exprs with
          | [ expr ] ->
            let (expr, _) =
              WrittenTypesToProgramTypes.Expr.toPT onMissing pm "" [] expr

            expr |> Stdlib.Result.Result.Ok
          | _ ->
            "Expected exactly one expression to be parsed"
            |> Stdlib.Result.Result.Error

        let parsePTSourceFile (code: String) : ProgramTypes.SourceFile.SourceFile =
          code
          |> TestParsing.initialParse
          |> WrittenTypesToProgramTypes.parsedFileAsSourceFile
          |> Stdlib.Tuple2.first

        let parseAndPrettyPrint (code: String) : String =
          code
          |> TestParsing.parsePTSourceFile
          |> PrettyPrinter.ProgramTypes.sourceFile