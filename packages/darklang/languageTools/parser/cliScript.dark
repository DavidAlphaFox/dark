module Darklang =
  module LanguageTools =
    module Parser =
      module CliScript =
        type WTCliScriptModule =
          { owner: String
            name: String
            types: List<LanguageTools.WrittenTypes.TypeReference.TypeReference>
            constants:
              List<LanguageTools.WrittenTypes.ConstantDeclaration.ConstantDeclaration>
            fns: List<LanguageTools.WrittenTypes.FnDeclaration.FnDeclaration>
            submodules:
              List<LanguageTools.WrittenTypes.ModuleDeclaration.ModuleDeclaration>
            exprs: List<LanguageTools.WrittenTypes.Expr> }

        type PTCliScriptModule =
          { types: List<LanguageTools.ProgramTypes.PackageType.PackageType>
            constants:
              List<LanguageTools.ProgramTypes.PackageConstant.PackageConstant>
            fns: List<LanguageTools.ProgramTypes.PackageFn.PackageFn>
            submodules: List<LanguageTools.ProgramTypes.Definitions>
            exprs: List<LanguageTools.ProgramTypes.Expr> }

        let parseDecls
          (owner: String)
          (canvasName: String)
          (source: LanguageTools.WrittenTypes.ParsedFile)
          : Stdlib.Result.Result<WTCliScriptModule, String> =
          match source with
          | SourceFile source ->
            let types =
              source.declarations
              |> Stdlib.List.filterMap (fun decl ->
                match decl with
                | Type t -> Stdlib.Option.Option.Some t
                | _ -> Stdlib.Option.Option.None)

            let constants =
              source.declarations
              |> Stdlib.List.filterMap (fun decl ->
                match decl with
                | Constant c -> Stdlib.Option.Option.Some c
                | _ -> Stdlib.Option.Option.None)

            let fns =
              source.declarations
              |> Stdlib.List.filterMap (fun decl ->
                match decl with
                | Function f -> Stdlib.Option.Option.Some f
                | _ -> Stdlib.Option.Option.None)

            let submodules =
              source.declarations
              |> Stdlib.List.filterMap (fun decl ->
                match decl with
                | Module m -> Stdlib.Option.Option.Some m
                | _ -> Stdlib.Option.Option.None)

            let exprs = source.exprsToEval

            Stdlib.Result.Result.Ok(
              WTCliScriptModule
                { owner = owner
                  name = canvasName
                  types = types
                  constants = constants
                  fns = fns
                  submodules = submodules
                  exprs = exprs }
            )

          | _ -> Stdlib.Result.Result.Error "Invalid source file"


        let toPT
          (onMissing: NameResolver.OnMissing)
          (pm: ProgramTypes.PackageManager.PackageManager)
          (wt: WTCliScriptModule)
          : PTCliScriptModule =
          let types =
            wt.types
            |> Stdlib.List.map (fun t ->
              LanguageTools.WrittenTypesToProgramTypes.TypeDeclaration.toPackageTypePT
                onMissing
                pm
                wt.owner
                []
                t)

          let constants =
            wt.constants
            |> Stdlib.List.map (fun c ->
              WrittenTypesToProgramTypes.ConstantDeclaration.toPackageConstPT
                onMissing
                pm
                wt.owner
                []
                c)

          let fns =
            wt.fns
            |> Stdlib.List.map (fun f ->
              WrittenTypesToProgramTypes.FunctionDeclaration.toPackageFnPT
                onMissing
                pm
                wt.owner
                []
                f)

          let submodules =
            wt.submodules
            |> Stdlib.List.map (fun m ->
              WrittenTypesToProgramTypes.ModuleDeclaration.submoduleToPT
                onMissing
                pm
                wt.owner
                []
                m)

          let exprs =
            wt.exprs
            |> Stdlib.List.map (fun e ->
              LanguageTools.WrittenTypesToProgramTypes.Expr.toPT onMissing pm e)

          PTCliScriptModule
            { types = types
              constants = constants
              fns = fns
              submodules = submodules
              exprs = exprs }


        let parse
          (owner: String)
          (canvasName: String)
          (onMissing: NameResolver.OnMissing)
          (pm: ProgramTypes.PackageManager.PackageManager)
          (filename: String)
          (source: String)
          : PTCliScriptModule =
          let parsedFile = source |> LanguageTools.Parser.ParserTest.initialParse
          let moduleWT = (parseDecls owner canvasName parsedFile) |> Builtin.unwrap
          let initialParse = toPT onMissing pm moduleWT

          let types =
            Stdlib.List.append
              initialParse.types
              (initialParse.submodules
               |> Stdlib.List.map (fun m -> m.types)
               |> Stdlib.List.flatten)

          let constants =
            Stdlib.List.append
              initialParse.constants
              (initialParse.submodules
               |> Stdlib.List.map (fun m -> m.constants)
               |> Stdlib.List.flatten)

          let fns =
            Stdlib.List.append
              initialParse.fns
              (initialParse.submodules
               |> Stdlib.List.map (fun m -> m.fns)
               |> Stdlib.List.flatten)

          let pm =
            ProgramTypes.PackageManager.withExtras
              pm
              initialParse.types
              initialParse.constants
              fns

          let result = toPT onMissing pm moduleWT

          let adjusted =
            PTCliScriptModule
              { types =
                  result.types
                  |> Stdlib.List.map (fun t ->
                    { t with
                        id =
                          initialParse.types
                          |> Stdlib.List.findFirst (fun original ->
                            original.name == t.name)
                          |> Stdlib.Option.mapWithDefault t.id (fun original ->
                            original.id) })

                constants =
                  result.constants
                  |> Stdlib.List.map (fun c ->
                    { c with
                        id =
                          initialParse.constants
                          |> Stdlib.List.findFirst (fun original ->
                            original.name == c.name)
                          |> Stdlib.Option.mapWithDefault c.id (fun original ->
                            original.id) })

                fns =
                  result.fns
                  |> Stdlib.List.map (fun f ->
                    { f with
                        id =
                          initialParse.fns
                          |> Stdlib.List.findFirst (fun original ->
                            original.name == f.name)
                          |> Stdlib.Option.mapWithDefault f.id (fun original ->
                            original.id) })

                submodules =
                  result.submodules
                  |> Stdlib.List.map (fun submodule ->
                    { submodule with
                        types =
                          submodule.types
                          |> Stdlib.List.map (fun t ->
                            { t with
                                id =
                                  initialParse.submodules
                                  |> Stdlib.List.map (fun m -> m.types)
                                  |> Stdlib.List.flatten
                                  |> Stdlib.List.findFirst (fun original ->
                                    original.name == t.name)
                                  |> Stdlib.Option.mapWithDefault
                                    t.id
                                    (fun original -> original.id) })

                        constants =
                          submodule.constants
                          |> Stdlib.List.map (fun c ->
                            { c with
                                id =
                                  initialParse.submodules
                                  |> Stdlib.List.map (fun m -> m.constants)
                                  |> Stdlib.List.flatten
                                  |> Stdlib.List.findFirst (fun original ->
                                    original.name == c.name)
                                  |> Stdlib.Option.mapWithDefault
                                    c.id
                                    (fun original -> original.id) })

                        fns =
                          submodule.fns
                          |> Stdlib.List.map (fun f ->
                            { f with
                                id =
                                  initialParse.submodules
                                  |> Stdlib.List.map (fun m -> m.fns)
                                  |> Stdlib.List.flatten
                                  |> Stdlib.List.findFirst (fun original ->
                                    original.name == f.name)
                                  |> Stdlib.Option.mapWithDefault
                                    f.id
                                    (fun original -> original.id) }) })

                exprs = result.exprs }

          adjusted