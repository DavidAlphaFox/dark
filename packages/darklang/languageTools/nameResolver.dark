module Darklang =
  module LanguageTools =
    module NameResolver =

      type NameResolver = { allowError: Bool }


      let empty () : NameResolver.NameResolver =
        NameResolver.NameResolver { allowError = true }

      // helper fuctions for the resolve function
      let resolveName
        (constructor: String -> 'name)
        (parser: String -> PACKAGE.Darklang.Stdlib.Result.Result<String>)
        (names: List<String>)
        (packageThingExists: String -> Bool)
        (builtinThingExists: String -> Bool)
        (nameErrorType: LanguageTools.RuntimeErrors.NameResolution.NameType)
        : LanguageTools.ProgramTypes.NameResolution<LanguageTools.ProgramTypes.FQName.FQName<'name>> =
        let modules = PACKAGE.Darklang.Stdlib.List.dropLast names
        let name = PACKAGE.Darklang.Stdlib.List.last names

        match name with
        | None ->
          PACKAGE.Darklang.Stdlib.Result.Result.Error(
            PACKAGE.Darklang.LanguageTools.RuntimeErrors.NameResolution.Error
              { errorType =
                  PACKAGE.Darklang.LanguageTools.RuntimeErrors.NameResolution.ErrorType.InvalidPackageName
                nameType = nameErrorType
                names = names }
          )
        | Some name ->
          match modules with
          | "PACKAGE" :: owner :: modules ->

            let name = (parser name) |> Builtin.unwrap

            let fqName =
              [ owner ]
              |> PACKAGE.Darklang.Stdlib.List.append modules
              |> PACKAGE.Darklang.Stdlib.List.append [ name ]
              |> PACKAGE.Darklang.Stdlib.String.join "."

            let packageThingExists = packageThingExists fqName

            if packageThingExists then
              PACKAGE.Darklang.Stdlib.Result.Result.Ok(
                (ProgramTypes.FQName.Package
                  { owner = owner
                    modules = modules
                    name = (constructor name)
                    version = 0L })
                |> ProgramTypes.FQName.FQName.Package
              )
            else
              PACKAGE.Darklang.Stdlib.Result.Result.Error(
                PACKAGE.Darklang.LanguageTools.RuntimeErrors.NameResolution.Error
                  { errorType =
                      PACKAGE.Darklang.LanguageTools.RuntimeErrors.NameResolution.ErrorType.NotFound
                    nameType = nameErrorType
                    names = PACKAGE.Darklang.Stdlib.List.append modules [ name ] }
              )

          | "Builtin" :: modules ->
            let builtinName =
              PACKAGE.Darklang.Stdlib.String.join
                (PACKAGE.Darklang.Stdlib.List.append modules [ name ])
                "."

            let builtinExists = builtinThingExists builtinName

            if builtinExists then
              let builtIn =
                (ProgramTypes.FQName.BuiltIn
                  { modules = modules
                    name = (constructor name)
                    version = 0L })

              PACKAGE.Darklang.Stdlib.Result.Result.Ok(
                builtIn |> ProgramTypes.FQName.FQName.BuiltIn
              )

            else
              PACKAGE.Darklang.Stdlib.Result.Result.Error(
                PACKAGE.Darklang.LanguageTools.RuntimeErrors.NameResolution.Error
                  { errorType =
                      PACKAGE.Darklang.LanguageTools.RuntimeErrors.NameResolution.ErrorType.NotFound
                    nameType = nameErrorType
                    names = PACKAGE.Darklang.Stdlib.List.append modules [ name ] }
              )

          | modules ->
            // TODO : check if user program exists
            PACKAGE.Darklang.Stdlib.Result.Result.Ok(
              (ProgramTypes.FQName.UserProgram
                { modules = modules
                  name = (constructor name)
                  version = 0L })
              |> ProgramTypes.FQName.FQName.UserProgram
            )

      let namesToTry
        (given: List<String>)
        (modules: List<String>)
        : List<List<String>> =
        match modules with
        | [] -> [ given ]
        | _ ->
          let rest = PACKAGE.Darklang.Stdlib.List.dropLast modules
          let current = PACKAGE.Darklang.Stdlib.List.append modules given
          PACKAGE.Darklang.Stdlib.List.append [ current ] (namesToTry given rest)

      let resolve
        (constructor: String -> 'name)
        (parser: String -> PACKAGE.Darklang.Stdlib.Result.Result<String>)
        (nameErrorType: LanguageTools.RuntimeErrors.NameResolution.NameType)
        (packageThingExists: String -> Bool)
        (builtinThingExists: String -> Bool)
        (allowError: Bool)
        (currentModule: List<String>)
        (name: LanguageTools.WrittenTypes.Name)
        : LanguageTools.ProgramTypes.NameResolution<LanguageTools.ProgramTypes.FQName.FQName<'name>> =

        match name with
        | Unresolved given ->
          let result =
            PACKAGE.Darklang.Stdlib.List.fold
              (NameResolver.namesToTry given currentModule)

              (PACKAGE.Darklang.Stdlib.Result.Result.Error(
                PACKAGE.Darklang.LanguageTools.RuntimeErrors.NameResolution.Error
                  { nameType = nameErrorType
                    errorType =
                      PACKAGE.Darklang.LanguageTools.RuntimeErrors.NameResolution.ErrorType.NotFound
                    names = given }
              ))

              (fun currentResult pathToTry ->
                match currentResult with
                | Ok _ -> currentResult
                | Error _ ->
                  let newResult =
                    resolveName
                      constructor
                      parser
                      pathToTry
                      packageThingExists
                      builtinThingExists
                      nameErrorType

                  match newResult with
                  | Ok _ -> newResult
                  | Error _ -> currentResult)

          match result with
          | Ok result -> PACKAGE.Darklang.Stdlib.Result.Result.Ok result
          | Error err ->
            if allowError then
              PACKAGE.Darklang.Stdlib.Result.Result.Error err
            else
              PACKAGE.Darklang.Stdlib.Result.Result.Error "TODO: Raise exception"


        | _ ->
          PACKAGE.Darklang.Stdlib.Result.Result.Error
            "TODO : builtin and user program"



      module TypeName =
        let packageTypeExists (typeName: String) : Bool =

          let typ =
            PACKAGE.Darklang.Stdlib.HttpClient.request
              "GET"
              ("http://dark-packages.dlio.localhost:11003/type/by-name/" ++ typeName)
              []
              []

          let statusCode =
            typ
            |> PACKAGE.Darklang.Stdlib.Result.map (fun response ->
              response.statusCode)
            |> Builtin.unwrap

          match statusCode with
          | 200L -> true
          | e -> false

        let builtinThingExists (typeName: String) : Bool =
          // TODO: check if builtin type exists
          true


        let maybeResolve
          (resolver: NameResolver.NameResolver)
          (currentModule: List<String>)
          (name: LanguageTools.WrittenTypes.Name)
          : LanguageTools.ProgramTypes.NameResolution<PACKAGE.Darklang.LanguageTools.ProgramTypes.TypeName.TypeName> =

          NameResolver.resolve
            (fun name -> ProgramTypes.TypeName.Name.TypeName name)
            LanguageTools.Parser.parseName
            LanguageTools.RuntimeErrors.NameResolution.NameType.Type
            TypeName.packageTypeExists
            TypeName.builtinThingExists
            currentModule
            true
            name

        let resolve
          (resolver: NameResolver.NameResolver)
          (currentModule: List<String>)
          (name: LanguageTools.WrittenTypes.Name)
          : LanguageTools.ProgramTypes.NameResolution<PACKAGE.Darklang.LanguageTools.ProgramTypes.TypeName.TypeName> =
          NameResolver.resolve
            (fun name -> ProgramTypes.TypeName.Name.TypeName name)
            LanguageTools.Parser.parseName
            LanguageTools.RuntimeErrors.NameResolution.NameType.Type
            TypeName.packageTypeExists
            TypeName.builtinThingExists
            resolver.allowError
            currentModule
            name



      module FnName =
        let packageFnExists (fnName: String) : Bool =
          let fn =
            PACKAGE.Darklang.Stdlib.HttpClient.request
              "GET"
              ($"http://dark-packages.dlio.localhost:11003/function/by-name/{fnName}")
              []
              []

          let statusCode =
            fn
            |> PACKAGE.Darklang.Stdlib.Result.map (fun response ->
              response.statusCode)
            |> Builtin.unwrap

          match statusCode with
          | 200L -> true
          | e -> false

        let builtinThingExists (fnName: String) : Bool =

          let fnExists = Builtin.DarkEditor.builtinExists fnName

          match fnExists with
          | Some _ -> true
          | None -> false


        let maybeResolve
          (resolver: NameResolver.NameResolver)
          (currentModule: List<String>)
          (name: LanguageTools.WrittenTypes.Name)
          : LanguageTools.ProgramTypes.NameResolution<LanguageTools.ProgramTypes.FnName.FnName> =

          NameResolver.resolve
            (fun name -> ProgramTypes.FnName.Name.FnName name)
            LanguageTools.Parser.parseName
            LanguageTools.RuntimeErrors.NameResolution.NameType.Function
            FnName.packageFnExists
            FnName.builtinThingExists
            currentModule
            true
            name

        let resolve
          (resolver: NameResolver.NameResolver)
          (currentModule: List<String>)
          (name: LanguageTools.WrittenTypes.Name)
          : LanguageTools.ProgramTypes.NameResolution<LanguageTools.ProgramTypes.FnName.FnName> =

          NameResolver.resolve
            (fun name -> ProgramTypes.FnName.Name.FnName name)
            LanguageTools.Parser.parseName
            LanguageTools.RuntimeErrors.NameResolution.NameType.Function
            FnName.packageFnExists
            FnName.builtinThingExists
            resolver.allowError
            currentModule
            name