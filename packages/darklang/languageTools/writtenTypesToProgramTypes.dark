module Darklang =
  module LanguageTools =
    module WrittenTypesToProgramTypes =
      let gid () : Int64 =
        // TODO: fix upper range here
        Stdlib.Int64.random 0L 922337203685477580L

      let gtlid () : UInt64 =
        Stdlib.UInt64.random 0UL 9223372036854775807UL


      module Identifiers =
        module Type =
          let toPT (typ: WrittenTypes.TypeIdentifier) : String = typ.name

        module QualifiedType =
          /// TODO: name resolution
          let toPT
            (i: WrittenTypes.QualifiedTypeIdentifier)
            : ProgramTypes.TypeName.TypeName =
            match Stdlib.List.map i.modules (fun (m, _) -> m.name) with
            | "PACKAGE" :: owner :: rest ->
              (ProgramTypes.FQName.Package
                { owner = owner
                  modules = rest
                  name = ProgramTypes.TypeName.Name.TypeName i.typ.name
                  version = 0L })
              |> ProgramTypes.FQName.FQName.Package

            // | "Builtin" :: rest ->
            //   (ProgramTypes.FQName.BuiltIn
            //     { modules = rest
            //       name = ProgramTypes.TypeName.Name.TypeName i.typ.name
            //       version = 0L })
            //   |> ProgramTypes.FQName.FQName.BuiltIn

            | modules ->
              (ProgramTypes.FQName.UserProgram
                { modules = modules
                  name = ProgramTypes.TypeName.Name.TypeName i.typ.name
                  version = 0L })
              |> ProgramTypes.FQName.FQName.UserProgram

        module Fn =
          let toPT (fn: WrittenTypes.FnIdentifier) : String = fn.name

        module QualifiedFn =
          let toPT
            (i: WrittenTypes.QualifiedFnIdentifier)
            : ProgramTypes.FQName.FQName =
            match Stdlib.List.map i.modules (fun (m, _) -> m.name) with
            | "PACKAGE" :: owner :: rest ->
              (ProgramTypes.FQName.Package
                { owner = owner
                  modules = rest
                  name = ProgramTypes.FnName.Name.FnName i.fn.name
                  version = 0L })
              |> ProgramTypes.FQName.FQName.Package

            | "Builtin" :: rest ->
              (ProgramTypes.FQName.BuiltIn
                { modules = rest
                  name = ProgramTypes.FnName.Name.FnName i.fn.name
                  version = 0L })
              |> ProgramTypes.FQName.FQName.BuiltIn

            | modules ->
              (ProgramTypes.FQName.UserProgram
                { modules = modules
                  name = ProgramTypes.FnName.Name.FnName i.fn.name
                  version = 0L })
              |> ProgramTypes.FQName.FQName.UserProgram


      module TypeReference =
        module BuiltIn =
          let toPT
            (t: WrittenTypes.TypeReference.BuiltIn)
            : ProgramTypes.TypeReference =
            match t with
            | TUnit _range -> ProgramTypes.TypeReference.TUnit
            | TBool _range -> ProgramTypes.TypeReference.TBool
            | TInt64 _range -> ProgramTypes.TypeReference.TInt64
            | TFloat _range -> ProgramTypes.TypeReference.TFloat
            | TChar _range -> ProgramTypes.TypeReference.TChar
            | TString _range -> ProgramTypes.TypeReference.TString


        let toPT
          (t: WrittenTypes.TypeReference.TypeReference)
          : ProgramTypes.TypeReference =

          match t with
          | BuiltIn b -> BuiltIn.toPT b
          | QualifiedName qn ->
            let typeName = Identifiers.QualifiedType.toPT qn

            ProgramTypes.TypeReference.TCustomType(
              Stdlib.Result.Result.Ok typeName,
              []
            )


      module TypeDeclaration =
        module Definition =
          let toPT
            (d: WrittenTypes.TypeDeclaration.Definition)
            : ProgramTypes.TypeDeclaration.Definition =

            match d with
            | Alias typ ->
              let typ = TypeReference.toPT typ

              ProgramTypes.TypeDeclaration.Definition.Alias typ

        let toPT
          (d: WrittenTypes.TypeDeclaration.TypeDeclaration)
          : ProgramTypes.TypeDeclaration.TypeDeclaration =
          let def = Definition.toPT d.definition

          ProgramTypes.TypeDeclaration.TypeDeclaration
            { typeParams = []; definition = def }


        let toUserTypePT
          (d: WrittenTypes.TypeDeclaration.TypeDeclaration)
          : ProgramTypes.UserType =
          ProgramTypes.UserType
            { tlid = gtlid ()
              name =
                ProgramTypes.FQName.UserProgram
                  { modules = []
                    name =
                      d.name
                      |> Identifiers.Type.toPT
                      |> ProgramTypes.TypeName.Name.TypeName
                    version = 0L }
              description = ""
              declaration = toPT d
              deprecated = ProgramTypes.Deprecation.NotDeprecated }



      module Expr =
        module LetPattern =
          let toPT (p: WrittenTypes.LetPattern) : ProgramTypes.LetPattern =
            match p with
            | LPVariable(_, name) -> ProgramTypes.LetPattern.LPVariable(gid (), name)


        let toPT (e: WrittenTypes.Expr) : ProgramTypes.Expr =
          match e with
          // simple
          | EUnit _ -> ProgramTypes.Expr.EUnit(gid ())

          | EBool(_, b) -> ProgramTypes.Expr.EBool(gid (), b)
          | EInt64(_, (_, i), _) -> ProgramTypes.Expr.EInt64(gid (), i)
          | EString(_, contents, _, _) ->
            match contents with
            | None -> ProgramTypes.Expr.EString(gid (), [])
            | Some((_, s)) ->
              ProgramTypes.Expr.EString(
                gid (),
                [ ProgramTypes.StringSegment.StringText s ]
              )

          // declaring and accessing variables
          | ELet(_, pat, rhs, body, _, _) ->
            ProgramTypes.Expr.ELet(gid (), LetPattern.toPT pat, toPT rhs, toPT body)

          | EVariable(_, var) -> ProgramTypes.Expr.EVariable (gid ()) var


          // fn calls
          | EInfix(_, (_, op), left, right) ->
            let infix =
              match op with
              | ArithmeticPlus ->
                ProgramTypes.InfixFnName.ArithmeticPlus
                |> ProgramTypes.Infix.InfixFnCall

              | ArithmeticMinus ->
                ProgramTypes.InfixFnName.ArithmeticMinus
                |> ProgramTypes.Infix.InfixFnCall

            ProgramTypes.Expr.EInfix(gid (), infix, toPT left, toPT right)

          | EFnCall(_, fnName, args, _, _) ->
            let fnName = Identifiers.QualifiedFn.toPT fnName

            let fnNameExpr =
              ProgramTypes.Expr.EFnName(gid (), Stdlib.Result.Result.Ok fnName)

            ProgramTypes.Expr.EApply(
              gid (),
              fnNameExpr,
              [],
              Stdlib.List.map args (fun a -> toPT a)
            )


      module FunctionDeclaration =
        module Parameter =
          let toUserFnParamPT
            (p: WrittenTypes.FnDeclaration.Parameter)
            : ProgramTypes.UserFunction.Parameter =

            match p with
            | Unit p ->
              ProgramTypes.UserFunction.Parameter
                { name = "_" // TODO ok?
                  typ = ProgramTypes.TypeReference.TUnit
                  description = "" }

            | Normal p ->
              ProgramTypes.UserFunction.Parameter
                { name = p.name.name
                  typ = TypeReference.toPT p.typ
                  description = "" }

        let toUserFnPT
          (fn: WrittenTypes.FnDeclaration.FnDeclaration)
          : ProgramTypes.UserFunction.UserFunction =
          ProgramTypes.UserFunction.UserFunction
            { tlid = gtlid ()
              name =
                ProgramTypes.FQName.UserProgram
                  { modules = []
                    name =
                      fn.name
                      |> Identifiers.Fn.toPT
                      |> ProgramTypes.FnName.Name.FnName
                    version = 0L }
              typeParams = []
              parameters =
                fn.parameters
                |> Darklang.Stdlib.List.map (fun p -> Parameter.toUserFnParamPT p)
              returnType = TypeReference.toPT fn.returnType
              description = ""
              deprecated = ProgramTypes.Deprecation.NotDeprecated
              body = Expr.toPT fn.body }