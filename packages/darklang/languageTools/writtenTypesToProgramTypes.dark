module Darklang =
  module LanguageTools =
    module WrittenTypesToProgramTypes =
      let gid () : Int64 =
        // TODO: fix upper range here
        Stdlib.Int64.random 0L 922337203685477580L

      let gtlid () : UInt64 =
        Stdlib.UInt64.random 0UL 9223372036854775807UL


      module Identifiers =
        module Type =
          let toPT (typ: WrittenTypes.TypeIdentifier) : String = typ.name

        module QualifiedType =
          let toPT
            (onMissing: NameResolver.OnMissing)
            (i: WrittenTypes.QualifiedTypeIdentifier)
            : (ProgramTypes.NameResolution<ProgramTypes.FQTypeName.FQTypeName> *
              List<WrittenTypes.TypeReference.TypeReference>)
            =
            let typeArgs =
              Stdlib.List.map i.typeArgs (fun t -> TypeReference.toPT onMissing t)

            let nameToResolve =
              Stdlib.List.append
                (Stdlib.List.map i.modules (fun (m, _) -> m.name))
                [ i.typ.name ]

            let typeName =
              NameResolver.TypeName.resolve
                onMissing
                []
                (WrittenTypes.Name.Unresolved(i.range, nameToResolve))

            (typeName, typeArgs)


        module Fn =
          let toPT (fn: WrittenTypes.FnIdentifier) : String = fn.name

        module QualifiedFn =
          let toPT
            (onMissing: NameResolver.OnMissing)
            (i: WrittenTypes.QualifiedFnIdentifier)
            : ProgramTypes.NameResolution<ProgramTypes.FQFnName.FQFnName> =
            let nameToResolve =
              Stdlib.List.append
                (Stdlib.List.map i.modules (fun (m, _) -> m.name))
                [ i.fn.name ]

            NameResolver.FnName.resolve
              onMissing
              []
              (WrittenTypes.Name.Unresolved(i.range, nameToResolve))


      module TypeReference =
        module Builtin =
          let toPT
            (onMissing: NameResolver.OnMissing)
            (t: WrittenTypes.TypeReference.Builtin)
            : ProgramTypes.TypeReference =
            match t with
            | TUnit _range -> ProgramTypes.TypeReference.TUnit
            | TBool _range -> ProgramTypes.TypeReference.TBool
            | TInt8 _range -> ProgramTypes.TypeReference.TInt8
            | TUInt8 _range -> ProgramTypes.TypeReference.TUInt8
            | TInt16 _range -> ProgramTypes.TypeReference.TInt16
            | TUInt16 _range -> ProgramTypes.TypeReference.TUInt16
            | TInt32 _range -> ProgramTypes.TypeReference.TInt32
            | TUInt32 _range -> ProgramTypes.TypeReference.TUInt32
            | TInt64 _range -> ProgramTypes.TypeReference.TInt64
            | TUInt64 _range -> ProgramTypes.TypeReference.TUInt64
            | TInt128 _range -> ProgramTypes.TypeReference.TInt128
            | TUInt128 _range -> ProgramTypes.TypeReference.TUInt128
            | TFloat _range -> ProgramTypes.TypeReference.TFloat
            | TChar _range -> ProgramTypes.TypeReference.TChar
            | TString _range -> ProgramTypes.TypeReference.TString
            | TDateTime _range -> ProgramTypes.TypeReference.TDateTime
            | TUuid _range -> ProgramTypes.TypeReference.TUuid

            | TList(_range, _, _, typ, _) ->
              let typ = TypeReference.toPT onMissing typ
              ProgramTypes.TypeReference.TList(typ)

            | TTuple(_range, firstType, _, secondType, restTypes, _, _) ->
              let firstType = TypeReference.toPT onMissing firstType
              let secondType = TypeReference.toPT onMissing secondType

              let restTypes =
                Stdlib.List.map restTypes (fun (_, t) ->
                  TypeReference.toPT onMissing t)

              ProgramTypes.TypeReference.TTuple(firstType, secondType, restTypes)

            | TDict(_range, _, _, valueType, _) ->
              let valueType = TypeReference.toPT onMissing valueType

              ProgramTypes.TypeReference.TDict valueType

            | TFn(_range, args, returnType) ->
              let args =
                Stdlib.List.map args (fun (t, _) -> TypeReference.toPT onMissing t)

              let returnType = TypeReference.toPT onMissing returnType

              ProgramTypes.TypeReference.TFn(args, returnType)

            | TDB(_range, _, _, typ, _) ->
              let typ = TypeReference.toPT onMissing typ
              ProgramTypes.TypeReference.TDB typ

            | TVariable(_range, name) -> ProgramTypes.TypeReference.TVariable name

        let toPT
          (onMissing: NameResolver.OnMissing)
          (t: WrittenTypes.TypeReference.TypeReference)
          : ProgramTypes.TypeReference =
          match t with
          | Builtin b -> Builtin.toPT onMissing b
          | QualifiedName qn ->
            let (typeName, typeArgs) = Identifiers.QualifiedType.toPT onMissing qn

            ProgramTypes.TypeReference.TCustomType(typeName, typeArgs)


      module TypeDeclaration =
        module RecordField =
          let toPT
            (onMissing: NameResolver.OnMissing)
            (f: WrittenTypes.TypeDeclaration.RecordField)
            : ProgramTypes.TypeDeclaration.RecordField =
            let name = f.name |> Stdlib.Tuple2.second

            ProgramTypes.TypeDeclaration.RecordField
              { name = name
                typ = TypeReference.toPT onMissing f.typ
                description = "" }

        module EnumField =
          let toPT
            (onMissing: NameResolver.OnMissing)
            (f: WrittenTypes.TypeDeclaration.EnumField)
            : ProgramTypes.TypeDeclaration.EnumField =

            let label =
              match f.label with
              | Some l -> Stdlib.Option.Option.Some(l |> Stdlib.Tuple2.second)
              | None -> Stdlib.Option.Option.None

            ProgramTypes.TypeDeclaration.EnumField
              { typ = TypeReference.toPT onMissing f.typ
                label = label
                description = "" }

        module EnumCase =
          let toPT
            (onMissing: NameResolver.OnMissing)
            (c: WrittenTypes.TypeDeclaration.EnumCase)
            : ProgramTypes.TypeDeclaration.EnumCase =

            let name = c.name |> Stdlib.Tuple2.second

            let fields =
              Stdlib.List.map c.fields (fun f -> EnumField.toPT onMissing f)

            ProgramTypes.TypeDeclaration.EnumCase
              { name = name
                fields = fields
                description = "" }

        module Definition =
          let toPT
            (onMissing: NameResolver.OnMissing)
            (d: WrittenTypes.TypeDeclaration.Definition)
            : ProgramTypes.TypeDeclaration.Definition =

            match d with
            | Alias typ ->
              let typ = TypeReference.toPT onMissing typ
              ProgramTypes.TypeDeclaration.Definition.Alias typ

            | Record fields ->
              let fields =
                Stdlib.List.map fields (fun (f, _) -> RecordField.toPT onMissing f)

              ProgramTypes.TypeDeclaration.Definition.Record fields

            | Enum cases ->
              let cases = Stdlib.List.map cases (fun c -> EnumCase.toPT onMissing c)
              ProgramTypes.TypeDeclaration.Definition.Enum cases

        let toPT
          (onMissing: NameResolver.OnMissing)
          (d: WrittenTypes.TypeDeclaration.TypeDeclaration)
          : ProgramTypes.TypeDeclaration.TypeDeclaration =
          let def = Definition.toPT onMissing d.definition

          ProgramTypes.TypeDeclaration.TypeDeclaration
            { typeParams =
                d.typeParams |> Stdlib.List.map (fun p -> p |> Stdlib.Tuple2.second)
              definition = def }


        let toPackageTypePT
          (onMissing: NameResolver.OnMissing)
          (owner: String)
          (modules: List<String>)
          (d: WrittenTypes.TypeDeclaration.TypeDeclaration)
          : ProgramTypes.PackageType =
          ProgramTypes.PackageType
            { tlid = gtlid ()
              id = Stdlib.Uuid.generate ()
              name =
                ProgramTypes.FQTypeName.Package
                  { owner = owner
                    modules = modules
                    name = d.name.name }
              description = ""
              declaration = toPT onMissing d
              deprecated = ProgramTypes.Deprecation.NotDeprecated }


      module InfixFnName =
        let toPT (infix: WrittenTypes.InfixFnName) : ProgramTypes.InfixFnName =
          match infix with
          | ArithmeticPlus -> ProgramTypes.InfixFnName.ArithmeticPlus
          | ArithmeticMinus -> ProgramTypes.InfixFnName.ArithmeticMinus
          | ArithmeticMultiply -> ProgramTypes.InfixFnName.ArithmeticMultiply
          | ArithmeticDivide -> ProgramTypes.InfixFnName.ArithmeticDivide
          | ArithmeticModulo -> ProgramTypes.InfixFnName.ArithmeticModulo
          | ArithmeticPower -> ProgramTypes.InfixFnName.ArithmeticPower
          | ComparisonGreaterThan -> ProgramTypes.InfixFnName.ComparisonGreaterThan
          | ComparisonGreaterThanOrEqual ->
            ProgramTypes.InfixFnName.ComparisonGreaterThanOrEqual
          | ComparisonLessThan -> ProgramTypes.InfixFnName.ComparisonLessThan
          | ComparisonLessThanOrEqual ->
            ProgramTypes.InfixFnName.ComparisonLessThanOrEqual
          | ComparisonEquals -> ProgramTypes.InfixFnName.ComparisonEquals
          | ComparisonNotEquals -> ProgramTypes.InfixFnName.ComparisonNotEquals
          | StringConcat -> ProgramTypes.InfixFnName.StringConcat


      module BinaryOperation =
        let toPT
          (binop: WrittenTypes.BinaryOperation)
          : ProgramTypes.BinaryOperation =
          match binop with
          | BinOpAnd -> ProgramTypes.BinaryOperation.BinOpAnd
          | BinOpOr -> ProgramTypes.BinaryOperation.BinOpOr


      module Infix =
        let toPT (infix: WrittenTypes.Infix) : ProgramTypes.Infix =
          match infix with
          | InfixFnCall op -> ProgramTypes.Infix.InfixFnCall(InfixFnName.toPT op)
          | BinOp op -> ProgramTypes.Infix.BinOp(BinaryOperation.toPT op)

      module Expr =
        module LetPattern =
          let toPT (p: WrittenTypes.LetPattern) : ProgramTypes.LetPattern =
            match p with
            | LPUnit _ -> ProgramTypes.LetPattern.LPUnit(gid ())
            | LPVariable(_, name) -> ProgramTypes.LetPattern.LPVariable(gid (), name)
            | LPTuple(_, first, _, second, rest, _, _) ->
              let first = toPT first
              let second = toPT second
              let rest = Stdlib.List.map rest (fun (_, p) -> toPT p)

              ProgramTypes.LetPattern.LPTuple(gid (), first, second, rest)

        module MatchPattern =
          let toPT
            (onMissing: NameResolver.OnMissing)
            (p: WrittenTypes.MatchPattern)
            : ProgramTypes.MatchPattern =
            match p with
            | MPUnit _ -> ProgramTypes.MatchPattern.MPUnit(gid ())
            | MPBool(_, b) -> ProgramTypes.MatchPattern.MPBool(gid (), b)
            | MPInt8(_, (_, i), _) -> ProgramTypes.MatchPattern.MPInt8(gid (), i)
            | MPUInt8(_, (_, i), _) -> ProgramTypes.MatchPattern.MPUInt8(gid (), i)
            | MPInt16(_, (_, i), _) -> ProgramTypes.MatchPattern.MPInt16(gid (), i)
            | MPUInt16(_, (_, i), _) -> ProgramTypes.MatchPattern.MPUInt16(gid (), i)
            | MPInt32(_, (_, i), _) -> ProgramTypes.MatchPattern.MPInt32(gid (), i)
            | MPUInt32(_, (_, i), _) -> ProgramTypes.MatchPattern.MPUInt32(gid (), i)
            | MPInt64(_, (_, i), _) -> ProgramTypes.MatchPattern.MPInt64(gid (), i)
            | MPUInt64(_, (_, i), _) -> ProgramTypes.MatchPattern.MPUInt64(gid (), i)
            | MPInt128(_, (_, i), _) -> ProgramTypes.MatchPattern.MPInt128(gid (), i)
            | MPUInt128(_, (_, i), _) ->
              ProgramTypes.MatchPattern.MPUInt128(gid (), i)
            | MPFloat(_, s, w, f) ->
              ProgramTypes.MatchPattern.MPFloat(gid (), s, w, f)
            | MPString(_, contents, _, _) ->
              match contents with
              | None -> ProgramTypes.MatchPattern.MPString(gid (), "")
              | Some((_, s)) -> ProgramTypes.MatchPattern.MPString(gid (), s)
            | MPChar(_, c, _, _) ->
              match c with
              | None -> ProgramTypes.MatchPattern.MPChar(gid (), "")
              | Some((_, c)) -> ProgramTypes.MatchPattern.MPChar(gid (), c)

            | MPList(_, contents, _, _) ->
              ProgramTypes.MatchPattern.MPList(
                gid (),
                Stdlib.List.map contents (fun (p, _) -> toPT onMissing p)
              )
            | MPListCons(_, head, tail, _) ->
              ProgramTypes.MatchPattern.MPListCons(
                gid (),
                toPT onMissing head,
                toPT onMissing tail
              )
            | MPTuple(_, first, _, second, rest, _, _) ->
              ProgramTypes.MatchPattern.MPTuple(
                gid (),
                toPT onMissing first,
                toPT onMissing second,
                Stdlib.List.map rest (fun (_, p) -> toPT onMissing p)
              )
            | MPEnum(_, caseName, fields) ->
              let caseName = caseName |> Stdlib.Tuple2.second
              let fields = Stdlib.List.map fields (fun p -> toPT onMissing p)

              ProgramTypes.MatchPattern.MPEnum(gid (), caseName, fields)

            | MPVariable(_, name) ->
              ProgramTypes.MatchPattern.MPVariable(gid (), name)


        let toPT
          (onMissing: NameResolver.OnMissing)
          (e: WrittenTypes.Expr)
          : ProgramTypes.Expr =
          match e with
          // simple
          | EUnit _ -> ProgramTypes.Expr.EUnit(gid ())

          | EBool(_, b) -> ProgramTypes.Expr.EBool(gid (), b)
          | EInt8(_, (_, i), _) -> ProgramTypes.Expr.EInt8(gid (), i)
          | EUInt8(_, (_, i), _) -> ProgramTypes.Expr.EUInt8(gid (), i)
          | EInt16(_, (_, i), _) -> ProgramTypes.Expr.EInt16(gid (), i)
          | EUInt16(_, (_, i), _) -> ProgramTypes.Expr.EUInt16(gid (), i)
          | EInt32(_, (_, i), _) -> ProgramTypes.Expr.EInt32(gid (), i)
          | EUInt32(_, (_, i), _) -> ProgramTypes.Expr.EUInt32(gid (), i)
          | EInt64(_, (_, i), _) -> ProgramTypes.Expr.EInt64(gid (), i)
          | EUInt64(_, (_, i), _) -> ProgramTypes.Expr.EUInt64(gid (), i)
          | EInt128(_, (_, i), _) -> ProgramTypes.Expr.EInt128(gid (), i)
          | EUInt128(_, (_, i), _) -> ProgramTypes.Expr.EUInt128(gid (), i)
          | EFloat(_, s, w, f) -> ProgramTypes.Expr.EFloat(gid (), s, w, f)
          | EString(_, contents, _, _) ->
            match contents with
            | None -> ProgramTypes.Expr.EString(gid (), [])
            | Some((_, s)) ->
              ProgramTypes.Expr.EString(
                gid (),
                [ ProgramTypes.StringSegment.StringText s ]
              )
          | EChar(_, c, _, _) ->
            match c with
            | None -> ProgramTypes.Expr.EChar(gid (), "")
            | Some((_, c)) -> ProgramTypes.Expr.EChar(gid (), c)

          | EList(_, contents, _, _) ->
            ProgramTypes.Expr.EList(
              gid (),
              Stdlib.List.map contents (fun (expr, _) -> toPT onMissing expr)
            )

          | EDict(_, contents, _, _, _) ->
            ProgramTypes.Expr.EDict(
              gid (),
              Stdlib.List.map contents (fun (_, k, v) -> (k, toPT onMissing v))
            )

          | ETuple(_, first, _, second, rest, _, _) ->
            let first = toPT onMissing first
            let second = toPT onMissing second
            let rest = Stdlib.List.map rest (fun (_, e) -> toPT onMissing e)

            ProgramTypes.Expr.ETuple(gid (), first, second, rest)

          | ERecord(_, typeName, fields, _, _) ->
            let typeName = NameResolver.TypeName.resolve onMissing [] typeName

            let fields =
              Stdlib.List.map fields (fun (_, name, typeName) ->
                let fieldName = name |> Stdlib.Tuple2.second
                (fieldName, toPT onMissing typeName))

            ProgramTypes.Expr.ERecord(gid (), typeName, fields)

          | ERecordUpdate(_, record, updates, _, _, _) ->
            let record = toPT onMissing record

            let updates =
              updates
              |> Stdlib.List.map (fun (name, _, expr) ->
                let name = name |> Stdlib.Tuple2.second
                (name, toPT onMissing expr))

            ProgramTypes.Expr.ERecordUpdate(gid (), record, updates)

          | EEnum(_, typeName, caseName, fields, _) ->
            let sr = Stdlib.Tuple2.first typeName
            let unresolvedTypeName = Stdlib.Tuple2.second typeName

            let typeName =
              NameResolver.TypeName.resolve
                onMissing
                []
                (WrittenTypes.Name.Unresolved sr unresolvedTypeName)

            let caseName = caseName |> Stdlib.Tuple2.second
            let fields = Stdlib.List.map fields (fun expr -> toPT onMissing expr)

            ProgramTypes.Expr.EEnum(gid (), typeName, caseName, fields)

          // declaring and accessing variables
          | ELet(_, pat, rhs, body, _, _) ->
            ProgramTypes.Expr.ELet(
              gid (),
              LetPattern.toPT pat,
              toPT onMissing rhs,
              toPT onMissing body
            )

          | EVariable(_, var) -> ProgramTypes.Expr.EVariable (gid ()) var

          | EFieldAccess(_, expr, (_, fieldName), _) ->
            ProgramTypes.Expr.EFieldAccess(gid (), toPT onMissing expr, fieldName)

          | EIf(_, cond, thenExpr, elseExpr, _, _, _) ->
            let elseExpr =
              elseExpr |> Stdlib.Option.map (fun es -> Expr.toPT onMissing es)

            ProgramTypes.Expr.EIf(
              gid (),
              toPT onMissing cond,
              toPT onMissing thenExpr,
              elseExpr
            )

          | EMatch(_, expr, cases, _, _) ->
            let cases =
              Stdlib.List.map cases (fun case ->
                let pat =
                  MatchPattern.toPT onMissing (Stdlib.Tuple3.second case.pat)

                let whenCondition =
                  case.whenCondition
                  |> Stdlib.Option.map (fun (_, e) -> toPT onMissing e)

                let rhs = toPT onMissing case.rhs

                ProgramTypes.MatchCase
                  { pat = pat
                    whenCondition = whenCondition
                    rhs = rhs })

            ProgramTypes.Expr.EMatch(gid (), toPT onMissing expr, cases)


          // fn calls
          | EInfix(_, (_, op), left, right) ->
            let infix = Infix.toPT op

            ProgramTypes.Expr.EInfix(
              gid (),
              infix,
              toPT onMissing left,
              toPT onMissing right
            )

          | ELambda(_, pats, body, _, _) ->
            let pats = Stdlib.List.map pats (fun p -> LetPattern.toPT p)
            let body = Expr.toPT onMissing body

            ProgramTypes.Expr.ELambda(gid (), pats, body)

          | EFnName(_, fnName) ->
            let fnName = Identifiers.QualifiedFn.toPT onMissing fnName
            ProgramTypes.Expr.EFnName(gid (), fnName)

          | EApply(_, fn, typeArgs, args) ->
            let fn = toPT onMissing fn
            let args = Stdlib.List.map args (fun a -> toPT onMissing a)

            ProgramTypes.Expr.EApply(gid (), fn, [], args)


      module FunctionDeclaration =
        module Parameter =
          let toPackageFnParamPT
            (onMissing: NameResolver.OnMissing)
            (p: WrittenTypes.FnDeclaration.Parameter)
            : ProgramTypes.PackageFn.Parameter =

            match p with
            | Unit p ->
              ProgramTypes.PackageFn.Parameter
                { name = "_" // TODO ok?
                  typ = ProgramTypes.TypeReference.TUnit
                  description = "" }

            | Normal p ->
              ProgramTypes.PackageFn.Parameter
                { name = p.name.name
                  typ = TypeReference.toPT onMissing p.typ
                  description = "" }

        let toPackageFnPT
          (onMissing: NameResolver.OnMissing)
          (owner: String)
          (modules: List<String>)
          (fn: WrittenTypes.FnDeclaration.FnDeclaration)
          : ProgramTypes.PackageFn.PackageFn =
          ProgramTypes.PackageFn.PackageFn
            { tlid = gtlid ()
              id = Stdlib.Uuid.generate ()
              name =
                ProgramTypes.FQFnName.Package
                  { owner = owner
                    modules = modules
                    name = fn.name.name }
              typeParams = []
              parameters =
                fn.parameters
                |> Stdlib.List.map (fun p ->
                  Parameter.toPackageFnParamPT onMissing p)
              returnType = TypeReference.toPT onMissing fn.returnType
              description = ""
              deprecated = ProgramTypes.Deprecation.NotDeprecated
              body = Expr.toPT onMissing fn.body }