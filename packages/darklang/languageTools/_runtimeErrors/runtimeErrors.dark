module Darklang =
  module LanguageTools =
    module RuntimeErrors =
      module ErrorSegment =
        /// Error pretty printing
        /// ---------------
        /// Segments allow us to build error messages where the UI and CLI can both
        /// decorate/link to the sources in a native way
        type ErrorSegment =
          // -- Basic types
          | String of String
          | Int of Int64
          | Ordinal of Int64 // 1st, 2nd, etc
          | IndefiniteArticle // "a" or "an" (chosen based on the next segment)
          | Count of Int64 * singular: ErrorSegment * plural: ErrorSegment // 2 errors, 1 error, etc

          // -- Functions
          | FunctionName of LanguageTools.RuntimeTypes.FQFnName.FQFnName
          /// Description from StdLib description fields.
          /// Has markers like <param name>, that should be parsed and displayed (TODO: why parse?)
          | Description of String
          | ParamName of String
          | InlineParamName of String

          // -- Types
          | TypeName of LanguageTools.RuntimeTypes.FQTypeName.FQTypeName
          | ShortTypeName of LanguageTools.RuntimeTypes.FQTypeName.FQTypeName
          | TypeReference of LanguageTools.RuntimeTypes.TypeReference
          | TypeOfValue of LanguageTools.RuntimeTypes.Dval.Dval // CLEANUP should these all just be ValueTypes?
          | ValueType of LanguageTools.RuntimeTypes.ValueType
          | FieldName of String // records and enums
          | InlineFieldName of String // records and enums

          // -- Constants
          | ConstantName of LanguageTools.RuntimeTypes.FQConstantName.FQConstantName

          // -- Variables
          | DBName of String
          | VarName of String
          | InlineVarName of String

          // -- Dvals
          | InlineValue of LanguageTools.RuntimeTypes.Dval.Dval // possibly shortened to be shown inline
          | FullValue of LanguageTools.RuntimeTypes.Dval.Dval

        let toString (list: List<ErrorSegment>) : String =
          let reversed = Stdlib.List.reverse list

          let parts =
            Stdlib.List.fold reversed [] (fun prevSegments segment ->
              let newSegment =
                match segment with
                | String s -> s
                | Int i -> Stdlib.Int64.toString i
                | Ordinal i -> Stdlib.String.toOrdinal i
                | Count(i, singular, plural) ->
                  let count = Stdlib.Int64.toString i

                  if i == 1L then
                    let segment = toString [ singular ]
                    $"{count} {segment}"
                  else
                    let segment = toString [ plural ]
                    $"{count} {segment}"

                | IndefiniteArticle ->
                  match Stdlib.List.head prevSegments with
                  | None -> ""
                  | Some prev -> Stdlib.String.articleFor prev ++ " "

                | FunctionName fn -> PrettyPrinter.RuntimeTypes.fnName fn

                | Description d -> d
                | ParamName p -> $"`{p}`"
                | InlineParamName p -> p // Inline versions don't have quotes
                | TypeName t -> PrettyPrinter.RuntimeTypes.typeName t
                | ConstantName c -> PrettyPrinter.RuntimeTypes.constantName c
                | ShortTypeName t ->
                  // TODO: make it short
                  PrettyPrinter.RuntimeTypes.typeName t
                | TypeReference t -> PrettyPrinter.RuntimeTypes.typeReference t
                | TypeOfValue dv -> PrettyPrinter.RuntimeTypes.Dval.valueTypeName dv
                | ValueType vt -> PrettyPrinter.RuntimeTypes.valueType vt
                | FieldName f -> $"`{f}`"
                | InlineFieldName f -> f
                | DBName db -> db
                | VarName v -> $"`{v}`"
                | InlineVarName v -> v
                | InlineValue dv ->
                  (PrettyPrinter.RuntimeTypes.dval dv)
                  |> Stdlib.String.ellipsis 10L
                  |> Stdlib.String.splitOnNewline
                  |> Stdlib.String.join ""
                | FullValue dv -> PrettyPrinter.RuntimeTypes.dval dv
                | segment ->
                  $"(RTETODO toString parts {(Builtin.jsonSerialize<ErrorSegment> segment)})"

              Stdlib.List.push prevSegments newSegment)

          Stdlib.String.join parts ""


      type ErrorOutput =
        { summary: List<ErrorSegment.ErrorSegment>
          // Summary can be used on its own or concatenated with extraExplanation
          extraExplanation: List<ErrorSegment.ErrorSegment>
          actual: List<ErrorSegment.ErrorSegment>
          expected: List<ErrorSegment.ErrorSegment> }

      // TODO: update SqlCompilerRuntimeError to refer to
      // SqlCompiler.RuntimeErrors.Error, with other Error types here
      // maybe as cases of that (e.g. TypeCheckerError, NameResolutionError)

      type Error =
        | CliError of LanguageTools.RuntimeErrors.Cli.Error
        | TypeCheckerError of LanguageTools.RuntimeErrors.TypeChecker.Error
        | NameResolutionError of LanguageTools.RuntimeErrors.NameResolution.Error
        | SqlCompilerRuntimeError of Error
        | ExecutionError of LanguageTools.RuntimeErrors.Execution.Error
        | JsonError of LanguageTools.RuntimeErrors.Json.Error
        | IntError of LanguageTools.RuntimeErrors.Int.Error

        | OldStringErrorTODO of String

      let sqlErrorTemplate =
        "You're using our new experimental Datastore query compiler. It compiles your lambdas into optimized (and partially indexed) Datastore queries, which should be reasonably fast.\n\nUnfortunately, we hit a snag while compiling your lambda. We only support a subset of Darklang's functionality, but will be expanding it in the future.\n\nSome Darklang code is not supported in DB::query lambdas for now, and some of it won't be supported because it's an odd thing to do in a datastore query. If you think your operation should be supported, let us know in #general in Discord.\n\n  Error: "

      module Error =
        // RTETODO: move most of the logic here to the individual modules,
        // and then follow up here
        //
        let toSegments (e: Error) : ErrorOutput =
          match e with
          | OldStringErrorTODO s ->
            ErrorOutput
              { summary = [ ErrorSegment.ErrorSegment.String s ]
                extraExplanation = []
                actual = []
                expected = [] }

          // | CliError err -> Cli.Error.toSegments err

          | TypeCheckerError err -> TypeChecker.Error.toSegments err

          | NameResolutionError err -> NameResolution.toSegments err

          | ExecutionError err -> Execution.toSegments err

          | SqlCompilerRuntimeError err ->
            let innerOutput = toSegments err

            { innerOutput with
                summary =
                  Stdlib.List.append
                    [ (ErrorSegment.ErrorSegment.String sqlErrorTemplate) ]
                    innerOutput.summary }

          | JsonError err -> Json.toSegments err

          | IntError err -> Int.toSegments err

        let toString (e: Error) : String =
          let s = toSegments e

          let explanation =
            ErrorSegment.toString (Stdlib.List.append s.summary s.extraExplanation)

          let actual = ErrorSegment.toString s.actual
          let actual = if actual == "" then "" else $"\nActual: {actual}"
          let expected = ErrorSegment.toString s.expected
          let expected = if expected == "" then "" else $"\nExpected: {expected}"

          if actual == "" && expected == "" then
            explanation
          else
            $"{explanation}\n{expected}{actual}"


        type ErrorMessage = ErrorString of String

        let toErrorMessage (e: Error) : ErrorMessage =
          ErrorMessage.ErrorString(toString e)