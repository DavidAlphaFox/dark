module Darklang =
  module LanguageTools =
    module RuntimeErrors =
      module NameResolution =
        type ErrorType =
          | NotFound of names: List<String>
          | ExpectedEnumButNot of packageTypeID: uuid
          | ExpectedRecordButNot of packageTypeID: uuid
          | MissingEnumModuleName of caseName: String
          | InvalidPackageName of names: List<String>

        type NameType =
          | Function
          | Type
          | Constant

        type Error =
          { errorType: ErrorType
            nameType: NameType }

        let toSegments (e: Error) : ErrorOutput =
          match e.errorType with
          | NotFound names ->
            let nameType =
              match e.nameType with
              | Function -> "function"
              | Type -> "type"
              | Constant -> "constant"

            ErrorOutput
              { summary =
                  [ ErrorSegment.ErrorSegment.String $"There is no {nameType} named "
                    ErrorSegment.ErrorSegment.InlineVarName(
                      Stdlib.String.join names "."
                    ) ]
                extraExplanation = []
                actual = []
                expected = [] }

          | MissingEnumModuleName caseName ->
            let summary =
              [ ErrorSegment.ErrorSegment.String "Missing type name for enum case"
                ErrorSegment.ErrorSegment.String ": "
                ErrorSegment.ErrorSegment.String caseName ]

            ErrorOutput
              { summary = summary
                extraExplanation = []
                actual = []
                expected = [] }

          | InvalidPackageName names ->
            let summary =
              [ ErrorSegment.ErrorSegment.String "Invalid package name "
                ErrorSegment.ErrorSegment.InlineVarName(Stdlib.String.join names ".") ]

            ErrorOutput
              { summary = summary
                extraExplanation = []
                actual = []
                expected = [] }

          | ExpectedRecordButNot packageTypeID ->
            let summary =
              [ ErrorSegment.ErrorSegment.String "Expected a record but "
                ErrorSegment.ErrorSegment.TypeName(
                  RuntimeTypes.FQTypeName.FQTypeName.Package packageTypeID
                )
                ErrorSegment.ErrorSegment.String " is an enum" ]

            ErrorOutput
              { summary = summary
                extraExplanation = []
                actual = []
                expected = [] }

          | _ ->
            // RTETODO:
            // | ExpectedEnumButNot
            ErrorOutput
              { summary =
                  [ ErrorSegment.ErrorSegment.String
                      "RTETODO NameResolution.toSegments" ]
                extraExplanation = []
                actual = []
                expected = [] }